{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teh_phoENIX\\\\source\\\\repos\\\\WEBp\\\\WEBpL1\\\\src\\\\jsx\\\\TextEditor.jsx\";\nimport { $getRoot, $getSelection } from 'lexical';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport '../css/general.css';\nimport { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = {\n  // Theme styling goes here\n};\n\n// Catch any errors that occur during Lexical updates and log them\n// or throw them as needed. If you don't throw them, Lexical will\n// try to recover gracefully without losing user data.\nfunction onError(error) {\n  console.error(error);\n}\n\n// When the editor changes, you can get notified via the\n// LexicalOnChangePlugin!\nfunction onChange(editorState, outputState) {\n  editorState.read(() => {\n    // Read the contents of the EditorState here.\n    const root = $getRoot();\n    outputState(root.__cachedText);\n  });\n}\nexport default function Editor(outputState) {\n  const initialConfig = {\n    namespace: 'MyEditor',\n    theme,\n    onError\n  };\n  outputState('hi');\n  return /*#__PURE__*/_jsxDEV(LexicalComposer, {\n    initialConfig: initialConfig,\n    children: [/*#__PURE__*/_jsxDEV(PlainTextPlugin, {\n      contentEditable: /*#__PURE__*/_jsxDEV(ContentEditable, {\n        className: \"editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 26\n      }, this),\n      placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Enter some text...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 22\n      }, this),\n      ErrorBoundary: LexicalErrorBoundary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OnChangePlugin, {\n      onChange: editorState => onChange(editorState)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HistoryPlugin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["$getRoot","$getSelection","LexicalComposer","PlainTextPlugin","ContentEditable","HistoryPlugin","OnChangePlugin","useLexicalComposerContext","LexicalErrorBoundary","useContext","jsxDEV","_jsxDEV","theme","onError","error","console","onChange","editorState","outputState","read","root","__cachedText","Editor","initialConfig","namespace","children","contentEditable","className","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","ErrorBoundary","_c","$RefreshReg$"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/src/jsx/TextEditor.jsx"],"sourcesContent":["import {$getRoot, $getSelection} from 'lexical';\r\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\r\nimport {PlainTextPlugin} from '@lexical/react/LexicalPlainTextPlugin';\r\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\r\nimport {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\r\nimport {OnChangePlugin} from '@lexical/react/LexicalOnChangePlugin';\r\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\r\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\r\n\r\nimport '../css/general.css'\r\nimport { useContext } from 'react';\r\n\r\nconst theme = {\r\n  // Theme styling goes here\r\n}\r\n\r\n// Catch any errors that occur during Lexical updates and log them\r\n// or throw them as needed. If you don't throw them, Lexical will\r\n// try to recover gracefully without losing user data.\r\nfunction onError(error) {\r\n  console.error(error);\r\n}\r\n\r\n// When the editor changes, you can get notified via the\r\n// LexicalOnChangePlugin!\r\nfunction onChange(editorState, outputState) {\r\n    editorState.read(() => {\r\n        // Read the contents of the EditorState here.\r\n        const root = $getRoot();\r\n        outputState(root.__cachedText)\r\n    });\r\n  }\r\n\r\nexport default function Editor(outputState) {\r\n  const initialConfig = {\r\n    namespace: 'MyEditor', \r\n    theme,\r\n    onError,\r\n  };\r\n\r\n  outputState('hi')\r\n\r\n  return (\r\n    <LexicalComposer initialConfig={initialConfig}>\r\n      <PlainTextPlugin\r\n        contentEditable={<ContentEditable className='editor'/>}\r\n        placeholder={<div>Enter some text...</div>}\r\n        ErrorBoundary={LexicalErrorBoundary}\r\n      />\r\n      <OnChangePlugin onChange={editorState => onChange(editorState)} />\r\n      <HistoryPlugin />\r\n    </LexicalComposer>\r\n  );\r\n}"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,aAAa,QAAO,SAAS;AAC/C,SAAQC,eAAe,QAAO,gCAAgC;AAC9D,SAAQC,eAAe,QAAO,uCAAuC;AACrE,SAAQC,eAAe,QAAO,uCAAuC;AACrE,SAAQC,aAAa,QAAO,qCAAqC;AACjE,SAAQC,cAAc,QAAO,sCAAsC;AACnE,SAAQC,yBAAyB,QAAO,uCAAuC;AAC/E,OAAOC,oBAAoB,MAAM,qCAAqC;AAEtE,OAAO,oBAAoB;AAC3B,SAASC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,KAAK,GAAG;EACZ;AAAA,CACD;;AAED;AACA;AACA;AACA,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;AACtB;;AAEA;AACA;AACA,SAASE,QAAQA,CAACC,WAAW,EAAEC,WAAW,EAAE;EACxCD,WAAW,CAACE,IAAI,CAAC,MAAM;IACnB;IACA,MAAMC,IAAI,GAAGpB,QAAQ,EAAE;IACvBkB,WAAW,CAACE,IAAI,CAACC,YAAY,CAAC;EAClC,CAAC,CAAC;AACJ;AAEF,eAAe,SAASC,MAAMA,CAACJ,WAAW,EAAE;EAC1C,MAAMK,aAAa,GAAG;IACpBC,SAAS,EAAE,UAAU;IACrBZ,KAAK;IACLC;EACF,CAAC;EAEDK,WAAW,CAAC,IAAI,CAAC;EAEjB,oBACEP,OAAA,CAACT,eAAe;IAACqB,aAAa,EAAEA,aAAc;IAAAE,QAAA,gBAC5Cd,OAAA,CAACR,eAAe;MACduB,eAAe,eAAEf,OAAA,CAACP,eAAe;QAACuB,SAAS,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;MACvDC,WAAW,eAAErB,OAAA;QAAAc,QAAA,EAAK;MAAkB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;MAC3CE,aAAa,EAAEzB;IAAqB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACpC,eACFpB,OAAA,CAACL,cAAc;MAACU,QAAQ,EAAEC,WAAW,IAAID,QAAQ,CAACC,WAAW;IAAE;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAClEpB,OAAA,CAACN,aAAa;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEtB;AAACG,EAAA,GApBuBZ,MAAM;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}