{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar BlockTree = require(\"./BlockTree\");\nvar ContentState = require(\"./ContentState\");\nvar EditorBidiService = require(\"./EditorBidiService\");\nvar SelectionState = require(\"./SelectionState\");\nvar Immutable = require(\"immutable\");\nvar OrderedSet = Immutable.OrderedSet,\n  Record = Immutable.Record,\n  Stack = Immutable.Stack,\n  OrderedMap = Immutable.OrderedMap,\n  List = Immutable.List; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\nvar EditorState = /*#__PURE__*/function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return this.createWithText('', decorator);\n  };\n  EditorState.createWithText = function createWithText(text, decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(text), decorator);\n  };\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    if (contentState.getBlockMap().count() === 0) {\n      return EditorState.createEmpty(decorator);\n    }\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n      decorator = config.decorator;\n    var recordConfig = _objectSpread({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n  EditorState.fromJS = function fromJS(config) {\n    return new EditorState(new EditorStateRecord(_objectSpread({}, config, {\n      directionMap: config.directionMap != null ? OrderedMap(config.directionMap) : config.directionMap,\n      inlineStyleOverride: config.inlineStyleOverride != null ? OrderedSet(config.inlineStyleOverride) : config.inlineStyleOverride,\n      nativelyRenderedContent: config.nativelyRenderedContent != null ? ContentState.fromJS(config.nativelyRenderedContent) : config.nativelyRenderedContent,\n      redoStack: config.redoStack != null ? Stack(config.redoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.redoStack,\n      selection: config.selection != null ? new SelectionState(config.selection) : config.selection,\n      treeMap: config.treeMap != null ? OrderedMap(config.treeMap).map(function (v) {\n        return List(v).map(function (v) {\n          return BlockTree.fromJS(v);\n        });\n      }) : config.treeMap,\n      undoStack: config.undoStack != null ? Stack(config.undoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.undoStack,\n      currentContent: ContentState.fromJS(config.currentContent)\n    })));\n  };\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n      var newContent = put.currentContent || editorState.getCurrentContent();\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n      var existingContent = editorState.getCurrentContent();\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n      state.merge(put);\n    });\n    return new EditorState(map);\n  };\n  var _proto = EditorState.prototype;\n  _proto.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n  _proto.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n  _proto.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n  _proto.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n  _proto.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n  _proto.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n  _proto.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n  _proto.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n  _proto.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n  _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n  _proto.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  }\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */;\n\n  _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, {\n      inlineStyleOverride: inlineStyleOverride\n    });\n  }\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */;\n\n  _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n    if (override != null) {\n      return override;\n    }\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n  _proto.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n  _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n  _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n  _proto.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  }\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */;\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  }\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */;\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n    return updateSelection(editorState, selection, true);\n  }\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */;\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  }\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */;\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  }\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */;\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n    var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n    return EditorState.set(editorState, editorStateChanges);\n  }\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */;\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  }\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */;\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  }\n  /**\n   * Not for public consumption.\n   */;\n\n  function EditorState(immutable) {\n    _defineProperty(this, \"_immutable\", void 0);\n    this._immutable = immutable;\n  }\n  /**\n   * Not for public consumption.\n   */\n\n  _proto.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n  return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\n\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\n\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\n\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\n\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  } // Otherwise, look upward in the document to find the closest character.\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  } // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // Otherwise, look upward in the document to find the closest character.\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n  if (lastNonEmpty) {\n    return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  }\n  return OrderedSet();\n}\nmodule.exports = EditorState;","map":{"version":3,"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","BlockTree","require","ContentState","EditorBidiService","SelectionState","Immutable","OrderedSet","Record","Stack","OrderedMap","List","defaultRecord","allowUndo","currentContent","decorator","directionMap","forceSelection","inCompositionMode","inlineStyleOverride","lastChangeType","nativelyRenderedContent","redoStack","selection","treeMap","undoStack","EditorStateRecord","EditorState","createEmpty","createWithText","text","createWithContent","createFromText","contentState","getBlockMap","count","firstKey","first","getKey","create","config","recordConfig","generateNewTreeMap","getDirectionMap","fromJS","map","v","set","editorState","put","getImmutable","withMutations","state","existingDecorator","get","newContent","getCurrentContent","newTreeMap","regenerateTreeForNewDecorator","merge","existingContent","regenerateTreeForNewBlocks","getEntityMap","_proto","prototype","toJS","getAllowUndo","getUndoStack","getRedoStack","getSelection","getDecorator","isInCompositionMode","mustForceSelection","getNativelyRenderedContent","getLastChangeType","getInlineStyleOverride","setInlineStyleOverride","getCurrentInlineStyle","override","content","isCollapsed","getInlineStyleForCollapsedSelection","getInlineStyleForNonCollapsedSelection","getBlockTree","blockKey","getIn","isSelectionAtStartOfContent","hasEdgeWithin","isSelectionAtEndOfContent","blockMap","last","end","getLength","acceptSelection","updateSelection","getHasFocus","moveSelectionToEnd","lastBlock","getLastBlock","lastKey","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","moveFocusToEnd","afterSelectionMove","push","changeType","undefined","getSelectionAfter","mustBecomeBoundary","getSelectionBefore","overrideChangeTypes","indexOf","editorStateChanges","undo","newCurrentContent","peek","shift","redo","immutable","_immutable","block","generate","toOrderedMap","newBlockMap","newEntityMap","prevBlockMap","prevTreeMap","toSeq","previousTreeMap","getDecorations","startKey","getStartKey","startOffset","getStartOffset","startBlock","getBlockForKey","getInlineStyleAt","lookUpwardForInlineStyle","fromKey","lastNonEmpty","reverse","skipUntil","_","k","skip","module","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/draft-js/lib/EditorState.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar BlockTree = require(\"./BlockTree\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar EditorBidiService = require(\"./EditorBidiService\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar Immutable = require(\"immutable\");\n\nvar OrderedSet = Immutable.OrderedSet,\n    Record = Immutable.Record,\n    Stack = Immutable.Stack,\n    OrderedMap = Immutable.OrderedMap,\n    List = Immutable.List; // When configuring an editor, the user can chose to provide or not provide\n// basically all keys. `currentContent` varies, so this type doesn't include it.\n// (See the types defined below.)\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState = /*#__PURE__*/function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return this.createWithText('', decorator);\n  };\n\n  EditorState.createWithText = function createWithText(text, decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(text), decorator);\n  };\n\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    if (contentState.getBlockMap().count() === 0) {\n      return EditorState.createEmpty(decorator);\n    }\n\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n        decorator = config.decorator;\n\n    var recordConfig = _objectSpread({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n\n  EditorState.fromJS = function fromJS(config) {\n    return new EditorState(new EditorStateRecord(_objectSpread({}, config, {\n      directionMap: config.directionMap != null ? OrderedMap(config.directionMap) : config.directionMap,\n      inlineStyleOverride: config.inlineStyleOverride != null ? OrderedSet(config.inlineStyleOverride) : config.inlineStyleOverride,\n      nativelyRenderedContent: config.nativelyRenderedContent != null ? ContentState.fromJS(config.nativelyRenderedContent) : config.nativelyRenderedContent,\n      redoStack: config.redoStack != null ? Stack(config.redoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.redoStack,\n      selection: config.selection != null ? new SelectionState(config.selection) : config.selection,\n      treeMap: config.treeMap != null ? OrderedMap(config.treeMap).map(function (v) {\n        return List(v).map(function (v) {\n          return BlockTree.fromJS(v);\n        });\n      }) : config.treeMap,\n      undoStack: config.undoStack != null ? Stack(config.undoStack.map(function (v) {\n        return ContentState.fromJS(v);\n      })) : config.undoStack,\n      currentContent: ContentState.fromJS(config.currentContent)\n    })));\n  };\n\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n\n      var newContent = put.currentContent || editorState.getCurrentContent();\n\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n\n      var existingContent = editorState.getCurrentContent();\n\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n\n      state.merge(put);\n    });\n    return new EditorState(map);\n  };\n\n  var _proto = EditorState.prototype;\n\n  _proto.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n\n  _proto.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n\n  _proto.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n\n  _proto.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n\n  _proto.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n\n  _proto.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n\n  _proto.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n\n  _proto.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n\n  _proto.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n\n  _proto.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n\n  _proto.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  }\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n  ;\n\n  _proto.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, {\n      inlineStyleOverride: inlineStyleOverride\n    });\n  }\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n  ;\n\n  _proto.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n\n    if (override != null) {\n      return override;\n    }\n\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n\n  _proto.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n\n  _proto.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n\n  _proto.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n\n  _proto.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  }\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n  ;\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  }\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n  ;\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n\n    return updateSelection(editorState, selection, true);\n  }\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n  ;\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  }\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n  ;\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  }\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n  ;\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n\n    var inlineStyleOverride = editorState.getInlineStyleOverride(); // Don't discard inline style overrides for the following change types:\n\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n    return EditorState.set(editorState, editorStateChanges);\n  }\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n  ;\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  }\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n  ;\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  }\n  /**\n   * Not for public consumption.\n   */\n  ;\n\n  function EditorState(immutable) {\n    _defineProperty(this, \"_immutable\", void 0);\n\n    this._immutable = immutable;\n  }\n  /**\n   * Not for public consumption.\n   */\n\n\n  _proto.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n\n  return EditorState;\n}();\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\n\n\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\n\n\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\n\n\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\n\n\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n\n\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey); // If there is a character just inside the selection, use its style.\n\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  } // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n\n\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  } // Otherwise, look upward in the document to find the closest character.\n\n\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n\n  if (lastNonEmpty) {\n    return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  }\n\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}