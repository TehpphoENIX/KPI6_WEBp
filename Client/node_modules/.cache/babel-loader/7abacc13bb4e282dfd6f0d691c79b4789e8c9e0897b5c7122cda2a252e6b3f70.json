{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar ContentBlock = require(\"./ContentBlock\");\nvar ContentBlockNode = require(\"./ContentBlockNode\");\nvar ContentState = require(\"./ContentState\");\nvar DraftEntity = require(\"./DraftEntity\");\nvar DraftTreeAdapter = require(\"./DraftTreeAdapter\");\nvar DraftTreeInvariants = require(\"./DraftTreeInvariants\");\nvar SelectionState = require(\"./SelectionState\");\nvar createCharacterList = require(\"./createCharacterList\");\nvar decodeEntityRanges = require(\"./decodeEntityRanges\");\nvar decodeInlineStyleRanges = require(\"./decodeInlineStyleRanges\");\nvar generateRandomKey = require(\"./generateRandomKey\");\nvar gkx = require(\"./gkx\");\nvar Immutable = require(\"immutable\");\nvar invariant = require(\"fbjs/lib/invariant\");\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar List = Immutable.List,\n  Map = Immutable.Map,\n  OrderedMap = Immutable.OrderedMap;\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {\n  var key = block.key,\n    type = block.type,\n    data = block.data,\n    text = block.text,\n    depth = block.depth;\n  var blockNodeConfig = {\n    text: text,\n    depth: depth || 0,\n    type: type || 'unstyled',\n    key: key || generateRandomKey(),\n    data: Map(data),\n    characterList: decodeCharacterList(block, entityMap)\n  };\n  return blockNodeConfig;\n};\nvar decodeCharacterList = function decodeCharacterList(block, entityMap) {\n  var text = block.text,\n    rawEntityRanges = block.entityRanges,\n    rawInlineStyleRanges = block.inlineStyleRanges;\n  var entityRanges = rawEntityRanges || [];\n  var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n\n  return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function (range) {\n    return entityMap.hasOwnProperty(range.key);\n  }).map(function (range) {\n    return _objectSpread({}, range, {\n      key: entityMap[range.key]\n    });\n  })));\n};\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n  return _objectSpread({}, block, {\n    key: block.key || generateRandomKey()\n  });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */\n\nvar updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n  var nodesWithParentRef = nodes.map(function (block) {\n    return _objectSpread({}, block, {\n      parentRef: parentRef\n    });\n  }); // since we pop nodes from the stack we need to insert them in reverse\n\n  return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */\n\nvar decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n  return blocks // ensure children have valid keys to enable sibling links\n  .map(addKeyIfMissing).reduce(function (blockMap, block, index) {\n    !Array.isArray(block.children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0; // ensure children have valid keys to enable sibling links\n\n    var children = block.children.map(addKeyIfMissing); // root level nodes\n\n    var contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(block, entityMap), {\n      prevSibling: index === 0 ? null : blocks[index - 1].key,\n      nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n      children: List(children.map(function (child) {\n        return child.key;\n      }))\n    })); // push root node to blockMap\n\n    blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n    var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n\n    while (stack.length > 0) {\n      // we pop from the stack and start processing this node\n      var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n\n      var parentRef = node.parentRef;\n      var siblings = parentRef.getChildKeys();\n      var _index = siblings.indexOf(node.key);\n      var isValidBlock = Array.isArray(node.children);\n      if (!isValidBlock) {\n        !isValidBlock ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n        break;\n      } // ensure children have valid keys to enable sibling links\n\n      var _children = node.children.map(addKeyIfMissing);\n      var _contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(node, entityMap), {\n        parent: parentRef.getKey(),\n        children: List(_children.map(function (child) {\n          return child.key;\n        })),\n        prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n        nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n      })); // push node to blockMap\n\n      blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n      stack = updateNodeStack(stack, _children, _contentBlockNode);\n    }\n    return blockMap;\n  }, OrderedMap());\n};\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {\n  return OrderedMap(blocks.map(function (block) {\n    var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));\n    return [contentBlock.getKey(), contentBlock];\n  }));\n};\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {\n  var isTreeRawBlock = rawState.blocks.find(function (block) {\n    return Array.isArray(block.children) && block.children.length > 0;\n  });\n  var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n  if (!experimentalTreeDataSupport) {\n    return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityMap);\n  }\n  var blockMap = decodeContentBlockNodes(rawBlocks, entityMap); // in dev mode, check that the tree invariants are met\n\n  if (process.env.NODE_ENV !== \"production\") {\n    !DraftTreeInvariants.isValidTree(blockMap) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Should be a valid tree') : invariant(false) : void 0;\n  }\n  return blockMap;\n};\nvar decodeRawEntityMap = function decodeRawEntityMap(rawState) {\n  var rawEntityMap = rawState.entityMap;\n  var entityMap = {}; // TODO: Update this once we completely remove DraftEntity\n\n  Object.keys(rawEntityMap).forEach(function (rawEntityKey) {\n    var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],\n      type = _rawEntityMap$rawEnti.type,\n      mutability = _rawEntityMap$rawEnti.mutability,\n      data = _rawEntityMap$rawEnti.data; // get the key reference to created entity\n\n    entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});\n  });\n  return entityMap;\n};\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n  !Array.isArray(rawState.blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentState') : invariant(false) : void 0; // decode entities\n\n  var entityMap = decodeRawEntityMap(rawState); // decode blockMap\n\n  var blockMap = decodeRawBlocks(rawState, entityMap); // create initial selection\n\n  var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n  return new ContentState({\n    blockMap: blockMap,\n    entityMap: entityMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n};\nmodule.exports = convertFromRawToDraftState;","map":{"version":3,"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","ContentBlock","require","ContentBlockNode","ContentState","DraftEntity","DraftTreeAdapter","DraftTreeInvariants","SelectionState","createCharacterList","decodeEntityRanges","decodeInlineStyleRanges","generateRandomKey","gkx","Immutable","invariant","experimentalTreeDataSupport","List","Map","OrderedMap","decodeBlockNodeConfig","block","entityMap","type","data","text","depth","blockNodeConfig","characterList","decodeCharacterList","rawEntityRanges","entityRanges","rawInlineStyleRanges","inlineStyleRanges","range","hasOwnProperty","map","addKeyIfMissing","updateNodeStack","stack","nodes","parentRef","nodesWithParentRef","reverse","decodeContentBlockNodes","blocks","reduce","blockMap","index","Array","isArray","children","process","env","NODE_ENV","contentBlockNode","prevSibling","nextSibling","child","set","getKey","node","pop","siblings","getChildKeys","_index","indexOf","isValidBlock","_children","_contentBlockNode","parent","get","size","decodeContentBlocks","contentBlock","decodeRawBlocks","rawState","isTreeRawBlock","find","rawBlocks","fromRawStateToRawTreeState","fromRawTreeStateToRawState","isValidTree","decodeRawEntityMap","rawEntityMap","rawEntityKey","_rawEntityMap$rawEnti","mutability","__create","convertFromRawToDraftState","selectionState","isEmpty","createEmpty","first","selectionBefore","selectionAfter","module","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/draft-js/lib/convertFromRawToDraftState.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar ContentState = require(\"./ContentState\");\n\nvar DraftEntity = require(\"./DraftEntity\");\n\nvar DraftTreeAdapter = require(\"./DraftTreeAdapter\");\n\nvar DraftTreeInvariants = require(\"./DraftTreeInvariants\");\n\nvar SelectionState = require(\"./SelectionState\");\n\nvar createCharacterList = require(\"./createCharacterList\");\n\nvar decodeEntityRanges = require(\"./decodeEntityRanges\");\n\nvar decodeInlineStyleRanges = require(\"./decodeInlineStyleRanges\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar List = Immutable.List,\n    Map = Immutable.Map,\n    OrderedMap = Immutable.OrderedMap;\n\nvar decodeBlockNodeConfig = function decodeBlockNodeConfig(block, entityMap) {\n  var key = block.key,\n      type = block.type,\n      data = block.data,\n      text = block.text,\n      depth = block.depth;\n  var blockNodeConfig = {\n    text: text,\n    depth: depth || 0,\n    type: type || 'unstyled',\n    key: key || generateRandomKey(),\n    data: Map(data),\n    characterList: decodeCharacterList(block, entityMap)\n  };\n  return blockNodeConfig;\n};\n\nvar decodeCharacterList = function decodeCharacterList(block, entityMap) {\n  var text = block.text,\n      rawEntityRanges = block.entityRanges,\n      rawInlineStyleRanges = block.inlineStyleRanges;\n  var entityRanges = rawEntityRanges || [];\n  var inlineStyleRanges = rawInlineStyleRanges || []; // Translate entity range keys to the DraftEntity map.\n\n  return createCharacterList(decodeInlineStyleRanges(text, inlineStyleRanges), decodeEntityRanges(text, entityRanges.filter(function (range) {\n    return entityMap.hasOwnProperty(range.key);\n  }).map(function (range) {\n    return _objectSpread({}, range, {\n      key: entityMap[range.key]\n    });\n  })));\n};\n\nvar addKeyIfMissing = function addKeyIfMissing(block) {\n  return _objectSpread({}, block, {\n    key: block.key || generateRandomKey()\n  });\n};\n/**\n * Node stack is responsible to ensure we traverse the tree only once\n * in depth order, while also providing parent refs to inner nodes to\n * construct their links.\n */\n\n\nvar updateNodeStack = function updateNodeStack(stack, nodes, parentRef) {\n  var nodesWithParentRef = nodes.map(function (block) {\n    return _objectSpread({}, block, {\n      parentRef: parentRef\n    });\n  }); // since we pop nodes from the stack we need to insert them in reverse\n\n  return stack.concat(nodesWithParentRef.reverse());\n};\n/**\n * This will build a tree draft content state by creating the node\n * reference links into a single tree walk. Each node has a link\n * reference to \"parent\", \"children\", \"nextSibling\" and \"prevSibling\"\n * blockMap will be created using depth ordering.\n */\n\n\nvar decodeContentBlockNodes = function decodeContentBlockNodes(blocks, entityMap) {\n  return blocks // ensure children have valid keys to enable sibling links\n  .map(addKeyIfMissing).reduce(function (blockMap, block, index) {\n    !Array.isArray(block.children) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0; // ensure children have valid keys to enable sibling links\n\n    var children = block.children.map(addKeyIfMissing); // root level nodes\n\n    var contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(block, entityMap), {\n      prevSibling: index === 0 ? null : blocks[index - 1].key,\n      nextSibling: index === blocks.length - 1 ? null : blocks[index + 1].key,\n      children: List(children.map(function (child) {\n        return child.key;\n      }))\n    })); // push root node to blockMap\n\n    blockMap = blockMap.set(contentBlockNode.getKey(), contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n    var stack = updateNodeStack([], children, contentBlockNode); // start computing children nodes\n\n    while (stack.length > 0) {\n      // we pop from the stack and start processing this node\n      var node = stack.pop(); // parentRef already points to a converted ContentBlockNode\n\n      var parentRef = node.parentRef;\n      var siblings = parentRef.getChildKeys();\n\n      var _index = siblings.indexOf(node.key);\n\n      var isValidBlock = Array.isArray(node.children);\n\n      if (!isValidBlock) {\n        !isValidBlock ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentBlock can not be converted to ContentBlockNode') : invariant(false) : void 0;\n        break;\n      } // ensure children have valid keys to enable sibling links\n\n\n      var _children = node.children.map(addKeyIfMissing);\n\n      var _contentBlockNode = new ContentBlockNode(_objectSpread({}, decodeBlockNodeConfig(node, entityMap), {\n        parent: parentRef.getKey(),\n        children: List(_children.map(function (child) {\n          return child.key;\n        })),\n        prevSibling: _index === 0 ? null : siblings.get(_index - 1),\n        nextSibling: _index === siblings.size - 1 ? null : siblings.get(_index + 1)\n      })); // push node to blockMap\n\n\n      blockMap = blockMap.set(_contentBlockNode.getKey(), _contentBlockNode); // this stack is used to ensure we visit all nodes respecting depth ordering\n\n      stack = updateNodeStack(stack, _children, _contentBlockNode);\n    }\n\n    return blockMap;\n  }, OrderedMap());\n};\n\nvar decodeContentBlocks = function decodeContentBlocks(blocks, entityMap) {\n  return OrderedMap(blocks.map(function (block) {\n    var contentBlock = new ContentBlock(decodeBlockNodeConfig(block, entityMap));\n    return [contentBlock.getKey(), contentBlock];\n  }));\n};\n\nvar decodeRawBlocks = function decodeRawBlocks(rawState, entityMap) {\n  var isTreeRawBlock = rawState.blocks.find(function (block) {\n    return Array.isArray(block.children) && block.children.length > 0;\n  });\n  var rawBlocks = experimentalTreeDataSupport && !isTreeRawBlock ? DraftTreeAdapter.fromRawStateToRawTreeState(rawState).blocks : rawState.blocks;\n\n  if (!experimentalTreeDataSupport) {\n    return decodeContentBlocks(isTreeRawBlock ? DraftTreeAdapter.fromRawTreeStateToRawState(rawState).blocks : rawBlocks, entityMap);\n  }\n\n  var blockMap = decodeContentBlockNodes(rawBlocks, entityMap); // in dev mode, check that the tree invariants are met\n\n  if (process.env.NODE_ENV !== \"production\") {\n    !DraftTreeInvariants.isValidTree(blockMap) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Should be a valid tree') : invariant(false) : void 0;\n  }\n\n  return blockMap;\n};\n\nvar decodeRawEntityMap = function decodeRawEntityMap(rawState) {\n  var rawEntityMap = rawState.entityMap;\n  var entityMap = {}; // TODO: Update this once we completely remove DraftEntity\n\n  Object.keys(rawEntityMap).forEach(function (rawEntityKey) {\n    var _rawEntityMap$rawEnti = rawEntityMap[rawEntityKey],\n        type = _rawEntityMap$rawEnti.type,\n        mutability = _rawEntityMap$rawEnti.mutability,\n        data = _rawEntityMap$rawEnti.data; // get the key reference to created entity\n\n    entityMap[rawEntityKey] = DraftEntity.__create(type, mutability, data || {});\n  });\n  return entityMap;\n};\n\nvar convertFromRawToDraftState = function convertFromRawToDraftState(rawState) {\n  !Array.isArray(rawState.blocks) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'invalid RawDraftContentState') : invariant(false) : void 0; // decode entities\n\n  var entityMap = decodeRawEntityMap(rawState); // decode blockMap\n\n  var blockMap = decodeRawBlocks(rawState, entityMap); // create initial selection\n\n  var selectionState = blockMap.isEmpty() ? new SelectionState() : SelectionState.createEmpty(blockMap.first().getKey());\n  return new ContentState({\n    blockMap: blockMap,\n    entityMap: entityMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState\n  });\n};\n\nmodule.exports = convertFromRawToDraftState;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}