{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction createCommand(type) {\n  return {\n    type\n  };\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3; // Reconciling\n\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2; // Text node modes\n\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2; // IS_INERT = 3\n// Text node formatting\n\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT; // Text node details\n\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1; // Element node formatting\n\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6; // Reconciliation\n\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b'; // For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\n\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n'; // For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\n\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF'; // eslint-disable-next-line no-misleading-character-class\n\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']'); // eslint-disable-next-line no-misleading-character-class\n\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcesssingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement(); // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true; // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      } // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      } // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n\n      const records = observer.takeRecords(); // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        } // Clear any of those removal mutations\n\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet keyCounter = 1;\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' &&\n  // @ts-ignore iternal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n    if (editor != null) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  const isStateFlagPresent = format & activeFormat;\n  if (isStateFlagPresent && (alignWithFormat === null || (alignWithFormat & activeFormat) === 0)) {\n    // Remove the state flag.\n    return format ^ activeFormat;\n  }\n  if (alignWithFormat === null || alignWithFormat & activeFormat) {\n    // Add the state flag.\n    return format | activeFormat;\n  }\n  return format;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node); // TODO Split this function into leaf/element\n\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling(); // TODO: this function duplicates a bunch of operations, can be simplified.\n\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n} // Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\n\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor(); // @ts-ignore We intentionally add this to the Node.\n\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection._cachedNodes = null;\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  flushRootMutations(editor);\n}\nfunction getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      if (node.canContainTabs()) {\n        const hasTabCharacter = textContent.includes('\\t'); // At present, this condition is primarily used for code highlights when\n        // grouped together in lines (divs). If a code highlight includes a tab,\n        // the newly typed character may be missing from the DOM's textContent.\n        // Let's take an example. If a LinedCodeNode looked roughly like this:\n        // <code><div><codeHighlight /><codeHighlight /></div></code>,\n        // the following could occur when using tabs:\n        // a. /tconst --type--> 'd' at offset 1 --get--> /tconst\n        //    - Missing 'd'\n        // b. /tconst --type--> 'd' at offset 3 --get--> /tcondst\n        //    --type--> 'd' at offset 3 --get--> /tcondst\n        //    - Missing second 'd'\n        // In these cases, we can fix the problem by manually inserting the\n        // newly typed character where we know it should have been.\n\n        if (data && data.length > 0 && hasTabCharacter) {\n          const selectionOffset = data.length;\n          const insertionOffset = anchorOffset + selectionOffset - 1;\n          const beforeInsertion = textContent.slice(0, insertionOffset);\n          const afterInsertion = textContent.slice(insertionOffset, textContent.length);\n          textContent = `${beforeInsertion}${data}${afterInsertion}`;\n          anchorOffset += selectionOffset;\n          focusOffset += selectionOffset;\n        }\n      } // Data is intentionally truthy, as we check for boolean, null and empty string.\n\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start, and we need\n      // to clear this input from occurring as that action wasn't\n      // permitted.\n      parent !== null && $isRangeSelection(prevSelection) && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n} // This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\n\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(keyCode, altKey, ctrlKey, metaKey) {\n  return keyCode === 9 && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 66 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 73 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 85 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(keyCode, shiftKey) {\n  return isReturn(keyCode) && !shiftKey;\n}\nfunction isLineBreak(keyCode, shiftKey) {\n  return isReturn(keyCode) && shiftKey;\n} // Inserts a new line after the selection\n\nfunction isOpenLineBreak(keyCode, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && keyCode === 79;\n}\nfunction isDeleteWordBackward(keyCode, altKey, ctrlKey) {\n  return isBackspace(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(keyCode, altKey, ctrlKey) {\n  return isDelete(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(keyCode);\n}\nfunction isDeleteLineForward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isDelete(keyCode);\n}\nfunction isDeleteBackward(keyCode, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(keyCode) || keyCode === 72 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(keyCode);\n}\nfunction isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(keyCode) || keyCode === 68 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(keyCode);\n}\nfunction isUndo(keyCode, shiftKey, metaKey, ctrlKey) {\n  return keyCode === 90 && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return keyCode === 90 && metaKey && shiftKey;\n  }\n  return keyCode === 89 && ctrlKey || keyCode === 90 && ctrlKey && shiftKey;\n}\nfunction isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 67) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 88) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(keyCode) {\n  return keyCode === 37;\n}\nfunction isArrowRight(keyCode) {\n  return keyCode === 39;\n}\nfunction isArrowUp(keyCode) {\n  return keyCode === 38;\n}\nfunction isArrowDown(keyCode) {\n  return keyCode === 40;\n}\nfunction isMoveBackward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(keyCode, ctrlKey, metaKey) {\n  return isArrowUp(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(keyCode, ctrlKey, metaKey) {\n  return isArrowDown(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(keyCode) {\n  return keyCode === 32;\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(keyCode) {\n  return keyCode === 13;\n}\nfunction isBackspace(keyCode) {\n  return keyCode === 8;\n}\nfunction isEscape(keyCode) {\n  return keyCode === 27;\n}\nfunction isDelete(keyCode) {\n  return keyCode === 46;\n}\nfunction isSelectAll(keyCode, metaKey, ctrlKey) {\n  return keyCode === 65 && controlOrMeta(metaKey, ctrlKey);\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  const classNames = classNamesTheme[classNameThemeType]; // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n\n  if (typeof classNames === 'string') {\n    const classNamesArr = classNames.split(' ');\n    classNamesTheme[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey); // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (offset !== 0) {\n    {\n      throw Error(`TODO`);\n    }\n  }\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  // @ts-ignore\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = blockCursorTheme.split(' '); // @ts-expect-error: intentional\n\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  } // Remove cursor\n\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent); // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\nfunction $findMatchingParent(startingNode, findFn) {\n  let curr = startingNode;\n  while (curr !== $getRoot() && curr != null) {\n    if (findFn(curr)) {\n      return curr;\n    }\n    curr = curr.getParent();\n  }\n  return null;\n}\nfunction $getChildrenRecursively(node) {\n  const nodes = [];\n  const stack = [node];\n  while (stack.length > 0) {\n    const currentNode = stack.pop();\n    if (!(currentNode !== undefined)) {\n      throw Error(`Stack.length > 0; can't be undefined`);\n    }\n    if ($isElementNode(currentNode)) {\n      stack.unshift(...currentNode.getChildren());\n    }\n    if (currentNode !== node) {\n      nodes.push(currentNode);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    if (child !== undefined && child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, dirtyNodes);\n      } // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMap.delete(childKey);\n    }\n    child = child.isAttached() ? child.getNextSibling() : null;\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, dirtyElements);\n        } // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMap.delete(nodeKey);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  } // Backward\n\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  } // Forward\n\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  } // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1); // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      } // Decorators are always non editable\n\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    createNode(children[startIndex], dom, insertDOM);\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  } // @ts-expect-error: internal field\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n} // If we end an element with a LineBreakNode, then we need to add an additional <br>\n\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        dom.removeChild(element);\n      } // @ts-expect-error: internal field\n\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br'); // @ts-expect-error: internal field\n\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent; // @ts-expect-error: internal field\n\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined; // Remove the old theme classes if they exist\n\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = previousDirectionTheme.split(' ');\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        } // @ts-ignore: intentional\n\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = nextDirectionTheme.split(' '); // @ts-expect-error: intentional\n\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        } // Update direction\n\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction; // @ts-expect-error: internal field\n\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent; // @ts-expect-error: internal field\n\n    dom.__lexicalDir = direction;\n  }\n}\nfunction reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  } // @ts-expect-error: internal field\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key); // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      } // @ts-expect-error: internal field\n\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  } // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  } // Update node. If it returns true, we need to unmount and re-create the node\n\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    nextNode = nextNode.getWritable();\n    nextNode.__cachedText = editorTextContent;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = ''; // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap); // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  reconcileNode('root', null); // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n\n  activeEditor$1 = undefined; // @ts-ignore\n\n  activeEditorNodes = undefined; // @ts-ignore\n\n  activeDirtyElements = undefined; // @ts-ignore\n\n  activeDirtyLeaves = undefined; // @ts-ignore\n\n  activePrevNodeMap = undefined; // @ts-ignore\n\n  activeNextNodeMap = undefined; // @ts-ignore\n\n  activeEditorConfig = undefined; // @ts-ignore\n\n  activePrevKeyToDOMMap = undefined; // @ts-ignore\n\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap; // @ts-ignore We intentionally add this to the Node.\n\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = 0;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nlet rootElementsRegistered = 0;\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0]; // This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false; // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection(); // Update the selection format\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        } // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element') {\n            selection.format = 0;\n            selection.style = '';\n          }\n        }\n      } else {\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          if ($isTextNode(node)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n} // This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\n\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (domSelection && anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n        domSelection.removeAllRanges();\n        selection.dirty = true;\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 229 && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event); // We let the browser do its own thing for composition.\n\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        // Used for handling backspace in Android.\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && selection.anchor.key === selection.focus.key) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0; // Fixes an Android bug where selection flickers when backspacing\n\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          }\n        } else {\n          event.preventDefault();\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data; // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    } // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null); // Some browsers do not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n\n          if (isInsertLineBreak) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const offset = anchor.offset; // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, offset) + data + anchorNode.getTextContent().slice(offset + selection.focus.offset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length; // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      } // This ensures consistency on Android.\n\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData); // onInput always fires after onCompositionEnd for FF.\n\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    } // Also flush any other mutations that might have occurred\n    // since the change.\n\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null); // Handle termination of composition.\n\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    } // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.keyCode;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    keyCode,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (isMoveForward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(keyCode, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(keyCode)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(keyCode, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(keyCode, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(keyCode, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(keyCode)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(keyCode)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(keyCode)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(keyCode, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(keyCode, metaKey, ctrlKey)) {\n        event.preventDefault();\n        editor.update(() => {\n          const root = $getRoot();\n          root.select(0, root.getChildrenSize());\n        });\n      }\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = []; // @ts-expect-error: internal field\n\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n} // Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\n\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType; // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor);\n      $setSelection(newSelection);\n    });\n  } // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true); // If newly selected editor is nested, then add it to the map, clean map otherwise\n\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  if (rootElementsRegistered === 0) {\n    const doc = rootElement.ownerDocument;\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered++; // @ts-expect-error: internal field\n\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        switch (eventName) {\n          case 'cut':\n            return dispatchCommand(editor, CUT_COMMAND, event);\n          case 'copy':\n            return dispatchCommand(editor, COPY_COMMAND, event);\n          case 'paste':\n            return dispatchCommand(editor, PASTE_COMMAND, event);\n          case 'dragstart':\n            return dispatchCommand(editor, DRAGSTART_COMMAND, event);\n          case 'dragover':\n            return dispatchCommand(editor, DRAGOVER_COMMAND, event);\n          case 'dragend':\n            return dispatchCommand(editor, DRAGEND_COMMAND, event);\n          case 'focus':\n            return dispatchCommand(editor, FOCUS_COMMAND, event);\n          case 'blur':\n            {\n              return dispatchCommand(editor, BLUR_COMMAND, event);\n            }\n          case 'drop':\n            return dispatchCommand(editor, DROP_COMMAND, event);\n        }\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  if (rootElementsRegistered !== 0) {\n    rootElementsRegistered--; // We only want to have a single global selectionchange event handler, shared\n    // between all editor instances.\n\n    if (rootElementsRegistered === 0) {\n      const doc = rootElement.ownerDocument;\n      doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n    }\n  } // @ts-expect-error: internal field\n\n  const editor = rootElement.__lexicalEditor;\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor); // @ts-expect-error: internal field\n\n    rootElement.__lexicalEditor = null;\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  } // @ts-expect-error: internal field\n\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n  constructor(key) {\n    // @ts-expect-error\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type,\n        // @ts-expect-error\n        this.constructor);\n      }\n    }\n  } // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n\n  getType() {\n    return this.__type;\n  }\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    } // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n\n    if ($isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element' && targetSelection.anchor.key === targetSelection.focus.key && targetSelection.anchor.offset === targetSelection.focus.offset) {\n      return false;\n    }\n    return isSelected;\n  }\n  /**\n   * Returns this nodes key.\n   */\n\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  } // TO-DO: this function can be simplified a lot\n\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n  /**\n   * Returns a mutable version of the node. Will throw an error if\n   * called outside of a Lexical Editor {@link LexicalEditor.update} callback.\n   *\n   */\n\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key; // Ensure we get the latest node from pending state\n\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection._cachedNodes = null;\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const constructor = latestNode.constructor; // @ts-expect-error\n\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode); // Update reference in node map\n\n    nodeMap.set(key, mutableNode);\n    return mutableNode;\n  }\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n\n  getTextContent() {\n    return '';\n  }\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n\n  getTextContentSize() {\n    return this.getTextContent().length;\n  } // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n\n  static transform() {\n    return null;\n  } // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n\n  remove(preserveEmptyParent) {\n    removeNode(this, true, preserveEmptyParent);\n  }\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) selection = selection.clone();\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n\n  insertAfter(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n\n  insertBefore(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev; // TODO: this is O(n), can we improve?\n\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n\n  isParentRequired() {\n    return false;\n  }\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type); // Common error - split in its own invariant\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection._cachedNodes = null;\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  } // Transfer the element point to a text point.\n\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this.dirty = false;\n    this._nodes = objects;\n    this._cachedNodes = null;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {// Do nothing?\n  }\n  insertText() {// Do nothing?\n  }\n  insertNodes(nodes, selectStart) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd; // Insert nodes\n\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes, selectStart); // Remove selected nodes\n\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n    return true;\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass GridSelection {\n  constructor(gridKey, anchor, focus) {\n    this.gridKey = gridKey;\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n  is(selection) {\n    if (!DEPRECATED_$isGridSelection(selection)) {\n      return false;\n    }\n    return this.gridKey === selection.gridKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n  set(gridKey, anchorCellKey, focusCellKey) {\n    this.dirty = true;\n    this.gridKey = gridKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n  clone() {\n    return new GridSelection(this.gridKey, this.anchor, this.focus);\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {// Do nothing?\n  }\n  insertText() {// Do nothing?\n  }\n  insertNodes(nodes, selectStart) {\n    const focusNode = this.focus.getNode();\n    const selection = $normalizeSelection(focusNode.select(0, focusNode.getChildrenSize()));\n    return selection.insertNodes(nodes, selectStart);\n  } // TODO Deprecate this method. It's confusing when used with colspan|rowspan\n\n  getShape() {\n    const anchorCellNode = $getNodeByKey(this.anchor.key);\n    if (!(anchorCellNode !== null)) {\n      throw Error(`getNodes: expected to find AnchorNode`);\n    }\n    const anchorCellNodeIndex = anchorCellNode.getIndexWithinParent();\n    const anchorCelRoweIndex = anchorCellNode.getParentOrThrow().getIndexWithinParent();\n    const focusCellNode = $getNodeByKey(this.focus.key);\n    if (!(focusCellNode !== null)) {\n      throw Error(`getNodes: expected to find FocusNode`);\n    }\n    const focusCellNodeIndex = focusCellNode.getIndexWithinParent();\n    const focusCellRowIndex = focusCellNode.getParentOrThrow().getIndexWithinParent();\n    const startX = Math.min(anchorCellNodeIndex, focusCellNodeIndex);\n    const stopX = Math.max(anchorCellNodeIndex, focusCellNodeIndex);\n    const startY = Math.min(anchorCelRoweIndex, focusCellRowIndex);\n    const stopY = Math.max(anchorCelRoweIndex, focusCellRowIndex);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchorNode = this.anchor.getNode();\n    const focusNode = this.focus.getNode();\n    const anchorCell = $findMatchingParent(anchorNode, DEPRECATED_$isGridCellNode); // todo replace with triplet\n\n    const focusCell = $findMatchingParent(focusNode, DEPRECATED_$isGridCellNode);\n    if (!DEPRECATED_$isGridCellNode(anchorCell)) {\n      throw Error(`Expected GridSelection anchor to be (or a child of) GridCellNode`);\n    }\n    if (!DEPRECATED_$isGridCellNode(focusCell)) {\n      throw Error(`Expected GridSelection focus to be (or a child of) GridCellNode`);\n    }\n    const anchorRow = anchorCell.getParent();\n    if (!DEPRECATED_$isGridRowNode(anchorRow)) {\n      throw Error(`Expected anchorCell to have a parent GridRowNode`);\n    }\n    const gridNode = anchorRow.getParent();\n    if (!DEPRECATED_$isGridNode(gridNode)) {\n      throw Error(`Expected tableNode to have a parent GridNode`);\n    } // TODO Mapping the whole Grid every time not efficient. We need to compute the entire state only\n    // once (on load) and iterate on it as updates occur. However, to do this we need to have the\n    // ability to store a state. Killing GridSelection and moving the logic to the plugin would make\n    // this possible.\n\n    const [map, cellAMap, cellBMap] = DEPRECATED_$computeGridMap(gridNode, anchorCell, focusCell);\n    let minColumn = Math.min(cellAMap.startColumn, cellBMap.startColumn);\n    let minRow = Math.min(cellAMap.startRow, cellBMap.startRow);\n    let maxColumn = Math.max(cellAMap.startColumn + cellAMap.cell.__colSpan - 1, cellBMap.startColumn + cellBMap.cell.__colSpan - 1);\n    let maxRow = Math.max(cellAMap.startRow + cellAMap.cell.__rowSpan - 1, cellBMap.startRow + cellBMap.cell.__rowSpan - 1);\n    let exploredMinColumn = minColumn;\n    let exploredMinRow = minRow;\n    let exploredMaxColumn = minColumn;\n    let exploredMaxRow = minRow;\n    function expandBoundary(mapValue) {\n      const {\n        cell,\n        startColumn: cellStartColumn,\n        startRow: cellStartRow\n      } = mapValue;\n      minColumn = Math.min(minColumn, cellStartColumn);\n      minRow = Math.min(minRow, cellStartRow);\n      maxColumn = Math.max(maxColumn, cellStartColumn + cell.__colSpan - 1);\n      maxRow = Math.max(maxRow, cellStartRow + cell.__rowSpan - 1);\n    }\n    while (minColumn < exploredMinColumn || minRow < exploredMinRow || maxColumn > exploredMaxColumn || maxRow > exploredMaxRow) {\n      if (minColumn < exploredMinColumn) {\n        // Expand on the left\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const previousColumn = exploredMinColumn - 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][previousColumn]);\n        }\n        exploredMinColumn = previousColumn;\n      }\n      if (minRow < exploredMinRow) {\n        // Expand on top\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const previousRow = exploredMinRow - 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[previousRow][exploredMinColumn + i]);\n        }\n        exploredMinRow = previousRow;\n      }\n      if (maxColumn > exploredMaxColumn) {\n        // Expand on the right\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const nextColumn = exploredMaxColumn + 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][nextColumn]);\n        }\n        exploredMaxColumn = nextColumn;\n      }\n      if (maxRow > exploredMaxRow) {\n        // Expand on the bottom\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const nextRow = exploredMaxRow + 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[nextRow][exploredMinColumn + i]);\n        }\n        exploredMaxRow = nextRow;\n      }\n    }\n    const nodes = [gridNode];\n    let lastRow = null;\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minColumn; j <= maxColumn; j++) {\n        const {\n          cell\n        } = map[i][j];\n        const currentRow = cell.getParent();\n        if (!DEPRECATED_$isGridRowNode(currentRow)) {\n          throw Error(`Expected GridCellNode parent to be a GridRowNode`);\n        }\n        if (currentRow !== lastRow) {\n          nodes.push(currentRow);\n        }\n        nodes.push(cell, ...$getChildrenRecursively(cell));\n        lastRow = currentRow;\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction DEPRECATED_$isGridSelection(x) {\n  return x instanceof GridSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this.format = format;\n    this.style = style;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset); // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n  insertRawText(text) {\n    const parts = text.split(/\\r?\\n/);\n    if (parts.length === 1) {\n      this.insertText(text);\n    } else {\n      const nodes = [];\n      const length = parts.length;\n      for (let i = 0; i < length; i++) {\n        const part = parts[i];\n        if (part !== '') {\n          nodes.push($createTextNode(part));\n        }\n        if (i !== length - 1) {\n          nodes.push($createLineBreakNode());\n        }\n      }\n      this.insertNodes(nodes);\n    }\n  }\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = this.isCollapsed() || anchor.isBefore(focus);\n    const format = this.format;\n    const style = this.style;\n    if (isBefore && anchor.type === 'element') {\n      $transferStartingElementPointToTextPoint(anchor, focus, format, style);\n    } else if (!isBefore && focus.type === 'element') {\n      $transferStartingElementPointToTextPoint(focus, anchor, format, style);\n    }\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const firstPoint = isBefore ? anchor : focus;\n    const endPoint = isBefore ? focus : anchor;\n    const startOffset = firstPoint.offset;\n    const endOffset = endPoint.offset;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          } // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]); // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode; // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      } // Handle mutations to the last node.\n\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          lastNode = lastNode.spliceText(0, endOffset, '');\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      } // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement); // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      } // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      } // Remove all selected nodes that haven't already been removed.\n\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n  removeText() {\n    this.insertText('');\n  }\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset; // In case selection started at the end of text node use next text node\n\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize(); // Single node selected\n\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      } // The entire node is selected, so just format it\n\n      if (startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat); // Update selection only if starts/ends on text node\n\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    } // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n\n    if (startOffset !== 0) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat); // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize()) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    } // Process all text nodes in between\n\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      if (!textNode.isToken()) {\n        const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n        textNode.setFormat(nextFormat);\n      }\n    } // Update selection only if starts/ends on text node\n\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n  insertNodes(nodes, selectStart) {\n    // If there is a range selected remove the text in it\n    if (!this.isCollapsed()) {\n      const selectionEnd = this.isBackward() ? this.anchor : this.focus;\n      const nextSibling = selectionEnd.getNode().getNextSibling();\n      const nextSiblingKey = nextSibling ? nextSibling.getKey() : null;\n      const prevSibling = selectionEnd.getNode().getPreviousSibling();\n      const prevSiblingKey = prevSibling ? prevSibling.getKey() : null;\n      this.removeText(); // If the selection has been moved to an adjacent inline element, create\n      // a temporary text node that we can insert the nodes after.\n\n      if (this.isCollapsed() && this.focus.type === 'element') {\n        let textNode;\n        if (this.focus.key === nextSiblingKey && this.focus.offset === 0) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertBefore(textNode);\n        } else if (this.focus.key === prevSiblingKey && this.focus.offset === this.focus.getNode().getChildrenSize()) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertAfter(textNode);\n        }\n        if (textNode) {\n          this.focus.set(textNode.__key, 0, 'text');\n          this.anchor.set(textNode.__key, 0, 'text');\n        }\n      }\n    }\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    const anchorNode = anchor.getNode();\n    let target = anchorNode;\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n      const placementNode = element.getChildAtIndex(anchorOffset - 1);\n      if (placementNode === null) {\n        target = element;\n      } else {\n        target = placementNode;\n      }\n    }\n    const siblings = []; // Get all remaining text node siblings in this element so we can\n    // append them after the last node we're inserting.\n\n    const nextSiblings = anchorNode.getNextSiblings();\n    const topLevelElement = $isRootOrShadowRoot(anchorNode) ? null : anchorNode.getTopLevelElementOrThrow();\n    if ($isTextNode(anchorNode)) {\n      const textContent = anchorNode.getTextContent();\n      const textContentLength = textContent.length;\n      if (anchorOffset === 0 && textContentLength !== 0) {\n        const prevSibling = anchorNode.getPreviousSibling();\n        if (prevSibling !== null) {\n          target = prevSibling;\n        } else {\n          target = anchorNode.getParentOrThrow();\n        }\n        siblings.push(anchorNode);\n      } else if (anchorOffset === textContentLength) {\n        target = anchorNode;\n      } else if (anchorNode.isToken()) {\n        // Do nothing if we're inside a token node\n        return false;\n      } else {\n        // If we started with a range selected grab the danglingText after the\n        // end of the selection and put it on our siblings array so we can\n        // append it after the last node we're inserting\n        let danglingText;\n        [target, danglingText] = anchorNode.splitText(anchorOffset);\n        siblings.push(danglingText);\n      }\n    }\n    const startingNode = target;\n    siblings.push(...nextSiblings);\n    const firstNode = nodes[0];\n    let didReplaceOrMerge = false;\n    let lastNode = null; // Time to insert the nodes!\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (!$isRootOrShadowRoot(target) && !$isDecoratorNode(target) && $isElementNode(node) && !node.isInline()) {\n        // -----\n        // Heuristics for the replacement or merging of elements\n        // -----\n        // If we have an incoming element node as the first node, then we'll need\n        // see if we can merge any descendant leaf nodes into our existing target.\n        // We can do this by finding the first descendant in our node and then we can\n        // pluck it and its parent (siblings included) out and insert them directly\n        // into our target. We only do this for the first node, as we are only\n        // interested in merging with the anchor, which is our target.\n        //\n        // If we apply either the replacement or merging heuristics, we need to be\n        // careful that we're not trying to insert a non-element node into a root node,\n        // so we check if the target's parent after this logic is the root node and if\n        // so we trigger an invariant to ensure this problem is caught in development\n        // and fixed accordingly.\n        if (node.is(firstNode)) {\n          if ($isElementNode(target) && target.isEmpty() && target.canReplaceWith(node)) {\n            target.replace(node);\n            target = node;\n            didReplaceOrMerge = true;\n            continue;\n          } // We may have a node tree where there are many levels, for example with\n          // lists and tables. So let's find the first descendant to try and merge\n          // with. So if we have the target:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //\n          // and we are trying to insert:\n          //\n          // ListNode (3)\n          //   ListItemNode (4)\n          //     Text (5)\n          //   ListItemNode (6)\n          //\n          // The result would be:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //   Text (5)\n          //\n\n          const firstDescendant = node.getFirstDescendant();\n          if ($isLeafNode(firstDescendant)) {\n            let element = firstDescendant.getParentOrThrow();\n            while (element.isInline()) {\n              element = element.getParentOrThrow();\n            }\n            const children = element.getChildren();\n            const childrenLength = children.length;\n            if ($isElementNode(target)) {\n              let firstChild = target.getFirstChild();\n              for (let s = 0; s < childrenLength; s++) {\n                const child = children[s];\n                if (firstChild === null) {\n                  target.append(child);\n                } else {\n                  firstChild.insertAfter(child);\n                }\n                firstChild = child;\n              }\n            } else {\n              for (let s = childrenLength - 1; s >= 0; s--) {\n                target.insertAfter(children[s]);\n              }\n              target = target.getParentOrThrow();\n            }\n            lastNode = children[childrenLength - 1];\n            element.remove();\n            didReplaceOrMerge = true;\n            if (element.is(node)) {\n              continue;\n            }\n          }\n        }\n        if ($isTextNode(target)) {\n          if (topLevelElement === null) {\n            {\n              throw Error(`insertNode: topLevelElement is root node`);\n            }\n          }\n          target = topLevelElement;\n        }\n      } else if (didReplaceOrMerge && !$isElementNode(node) && !$isDecoratorNode(node) && $isRootOrShadowRoot(target.getParent())) {\n        {\n          throw Error(`insertNodes: cannot insert a non-element into a root node`);\n        }\n      }\n      didReplaceOrMerge = false;\n      if ($isElementNode(target) && !target.isInline()) {\n        lastNode = node;\n        if ($isDecoratorNode(node) && !node.isInline()) {\n          target = target.insertAfter(node, false);\n        } else if (!$isElementNode(node)) {\n          const firstChild = target.getFirstChild();\n          if (firstChild !== null) {\n            firstChild.insertBefore(node);\n          } else {\n            target.append(node);\n          }\n          target = node;\n        } else {\n          if (!node.canBeEmpty() && node.isEmpty()) {\n            continue;\n          }\n          if ($isRootNode(target)) {\n            const placementNode = target.getChildAtIndex(anchorOffset);\n            if (placementNode !== null) {\n              placementNode.insertBefore(node);\n            } else {\n              target.append(node);\n            }\n            target = node;\n          } else if (node.isInline()) {\n            target.append(node);\n            target = node;\n          } else {\n            target = target.insertAfter(node, false);\n          }\n        }\n      } else if (!$isElementNode(node) || $isElementNode(node) && node.isInline() || $isDecoratorNode(target) && !target.isInline()) {\n        lastNode = node; // when pasting top level node in the middle of paragraph\n        // we need to split paragraph instead of placing it inline\n\n        if ($isRangeSelection(this) && $isDecoratorNode(node) && ($isElementNode(target) || $isTextNode(target)) && !node.isInline()) {\n          let splitNode;\n          let splitOffset;\n          if ($isTextNode(target)) {\n            splitNode = target.getParentOrThrow();\n            const [textNode] = target.splitText(anchorOffset);\n            splitOffset = textNode.getIndexWithinParent() + 1;\n          } else {\n            splitNode = target;\n            splitOffset = anchorOffset;\n          }\n          const [, rightTree] = $splitNode(splitNode, splitOffset);\n          target = rightTree.insertBefore(node);\n        } else {\n          target = target.insertAfter(node, false);\n        }\n      } else {\n        const nextTarget = target.getParentOrThrow(); // if we're inserting an Element after a LineBreak, we want to move the target to the parent\n        // and remove the LineBreak so we don't have empty space.\n\n        if ($isLineBreakNode(target)) {\n          target.remove();\n        }\n        target = nextTarget; // Re-try again with the target being the parent\n\n        i--;\n        continue;\n      }\n    }\n    if (selectStart) {\n      // Handle moving selection to start for all nodes\n      if ($isTextNode(startingNode)) {\n        startingNode.select();\n      } else {\n        const prevSibling = target.getPreviousSibling();\n        if ($isTextNode(prevSibling)) {\n          prevSibling.select();\n        } else {\n          const index = target.getIndexWithinParent();\n          target.getParentOrThrow().select(index, index);\n        }\n      }\n    }\n    if ($isElementNode(target)) {\n      // If the last node to be inserted was a text node,\n      // then we should attempt to move selection to that.\n      const lastChild = $isTextNode(lastNode) ? lastNode : $isElementNode(lastNode) && lastNode.isInline() ? lastNode.getLastDescendant() : target.getLastDescendant();\n      if (!selectStart) {\n        // Handle moving selection to end for elements\n        if (lastChild === null) {\n          target.select();\n        } else if ($isTextNode(lastChild)) {\n          if (lastChild.getTextContent() === '') {\n            lastChild.selectPrevious();\n          } else {\n            lastChild.select();\n          }\n        } else {\n          lastChild.selectNext();\n        }\n      }\n      if (siblings.length !== 0) {\n        const originalTarget = target;\n        for (let i = siblings.length - 1; i >= 0; i--) {\n          const sibling = siblings[i];\n          const prevParent = sibling.getParentOrThrow();\n          if ($isElementNode(target) && !$isBlockElementNode(sibling) && !($isDecoratorNode(sibling) && (\n          // Note: We are only looking for decorators that are inline and not isolated.\n          !sibling.isInline() || sibling.isIsolated()))) {\n            if (originalTarget === target) {\n              target.append(sibling);\n            } else {\n              target.insertBefore(sibling);\n            }\n            target = sibling;\n          } else if (!$isElementNode(target) && !$isBlockElementNode(sibling)) {\n            target.insertBefore(sibling);\n            target = sibling;\n          } else {\n            if ($isElementNode(sibling) && !sibling.canInsertAfter(target)) {\n              // @ts-ignore The clone method does exist on the constructor.\n              const prevParentClone = prevParent.constructor.clone(prevParent);\n              if (!$isElementNode(prevParentClone)) {\n                {\n                  throw Error(`insertNodes: cloned parent clone is not an element`);\n                }\n              }\n              prevParentClone.append(sibling);\n              target.insertAfter(prevParentClone);\n            } else {\n              target.insertAfter(sibling);\n            }\n          } // Check if the prev parent is empty, as it might need\n          // removing.\n\n          if (prevParent.isEmpty() && !prevParent.canBeEmpty()) {\n            prevParent.remove();\n          }\n        }\n      }\n    } else if (!selectStart) {\n      // Handle moving selection to end for other nodes\n      if ($isTextNode(target)) {\n        target.select();\n      } else {\n        const element = target.getParentOrThrow();\n        const index = target.getIndexWithinParent() + 1;\n        element.select(index, index);\n      }\n    }\n    return true;\n  }\n  insertParagraph() {\n    if (!this.isCollapsed()) {\n      this.removeText();\n    }\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    let currentElement;\n    let nodesToMove = [];\n    let siblingsToMove = [];\n    if (anchor.type === 'text') {\n      const anchorNode = anchor.getNode();\n      nodesToMove = anchorNode.getNextSiblings().reverse();\n      currentElement = anchorNode.getParentOrThrow();\n      const isInline = currentElement.isInline();\n      const textContentLength = isInline ? currentElement.getTextContentSize() : anchorNode.getTextContentSize();\n      if (anchorOffset === 0) {\n        nodesToMove.push(anchorNode);\n      } else {\n        if (isInline) {\n          // For inline nodes, we want to move all the siblings to the new paragraph\n          // if selection is at the end, we just move the siblings. Otherwise, we also\n          // split the text node and add that and it's siblings below.\n          siblingsToMove = currentElement.getNextSiblings();\n        }\n        if (anchorOffset !== textContentLength) {\n          if (!isInline || anchorOffset !== anchorNode.getTextContentSize()) {\n            const [, splitNode] = anchorNode.splitText(anchorOffset);\n            nodesToMove.push(splitNode);\n          }\n        }\n      }\n    } else {\n      currentElement = anchor.getNode();\n      if ($isRootOrShadowRoot(currentElement)) {\n        const paragraph = $createParagraphNode();\n        const child = currentElement.getChildAtIndex(anchorOffset);\n        paragraph.select();\n        if (child !== null) {\n          child.insertBefore(paragraph, false);\n        } else {\n          currentElement.append(paragraph);\n        }\n        return;\n      }\n      nodesToMove = currentElement.getChildren().slice(anchorOffset).reverse();\n    }\n    const nodesToMoveLength = nodesToMove.length;\n    if (anchorOffset === 0 && nodesToMoveLength > 0 && currentElement.isInline()) {\n      const parent = currentElement.getParentOrThrow();\n      const newElement = parent.insertNewAfter(this, false);\n      if ($isElementNode(newElement)) {\n        const children = parent.getChildren();\n        for (let i = 0; i < children.length; i++) {\n          newElement.append(children[i]);\n        }\n      }\n      return;\n    }\n    const newElement = currentElement.insertNewAfter(this, false);\n    if (newElement === null) {\n      // Handle as a line break insertion\n      this.insertLineBreak();\n    } else if ($isElementNode(newElement)) {\n      // If we're at the beginning of the current element, move the new element to be before the current element\n      const currentElementFirstChild = currentElement.getFirstChild();\n      const isBeginning = anchorOffset === 0 && (currentElement.is(anchor.getNode()) || currentElementFirstChild && currentElementFirstChild.is(anchor.getNode()));\n      if (isBeginning && nodesToMoveLength > 0) {\n        currentElement.insertBefore(newElement);\n        return;\n      }\n      let firstChild = null;\n      const siblingsToMoveLength = siblingsToMove.length;\n      const parent = newElement.getParentOrThrow(); // For inline elements, we append the siblings to the parent.\n\n      if (siblingsToMoveLength > 0) {\n        for (let i = 0; i < siblingsToMoveLength; i++) {\n          const siblingToMove = siblingsToMove[i];\n          parent.append(siblingToMove);\n        }\n      }\n      if (nodesToMoveLength !== 0) {\n        for (let i = 0; i < nodesToMoveLength; i++) {\n          const nodeToMove = nodesToMove[i];\n          if (firstChild === null) {\n            newElement.append(nodeToMove);\n          } else {\n            firstChild.insertBefore(nodeToMove);\n          }\n          firstChild = nodeToMove;\n        }\n      }\n      if (!newElement.canBeEmpty() && newElement.getChildrenSize() === 0) {\n        newElement.selectPrevious();\n        newElement.remove();\n      } else {\n        newElement.selectStart();\n      }\n    }\n  }\n  insertLineBreak(selectStart) {\n    const lineBreakNode = $createLineBreakNode();\n    const anchor = this.anchor;\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n      if ($isRootNode(element)) {\n        this.insertParagraph();\n      }\n    }\n    if (selectStart) {\n      this.insertNodes([lineBreakNode], true);\n    } else {\n      if (this.insertNodes([lineBreakNode])) {\n        lineBreakNode.selectNext(0, 0);\n      }\n    }\n  }\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move'; // Handle the selection movement around decorators.\n\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement; // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    } // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity); // Guard against no ranges\n\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0); // Apply the DOM selection to our Lexical selection.\n\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        } // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n  deleteCharacter(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const focus = this.focus;\n      let anchorNode = anchor.getNode();\n      if (!isBackward && (\n      // Delete forward handle case\n      anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n        const parent = anchorNode.getParent();\n        const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n        if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n          return;\n        }\n      } // Handle the deletion around decorators.\n\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n        }\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    const wasCollapsed = this.isCollapsed();\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      if (this.anchor.type === 'text') {\n        this.modify('extend', isBackward, 'lineboundary');\n      } // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n    }\n    this.removeText();\n  }\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction getCharacterOffsets(selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // @ts-expect-error Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode; // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false; // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length; // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === editor._blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (editor._blockCursorElement !== null) {\n      resolvedOffset--;\n    }\n    resolvedNode = getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = getNodeFromDOM(dom); // Ensure resolvedElement is actually a element.\n\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n            resolvedOffset = 0;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent(); // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize(); // @ts-expect-error: intentional\n\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0; // @ts-expect-error: intentional\n\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus); // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = getNodeFromDOM(anchorDOM);\n    const focusNode = getNodeFromDOM(focusDOM); // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  } // Handle normalization of selection when it is at the boundaries.\n\n  normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n} // This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction DEPRECATED_$createGridSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new GridSelection('root', anchor, focus);\n}\nfunction internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isNodeSelection(lastSelection) || DEPRECATED_$isGridSelection(lastSelection)) {\n    return lastSelection.clone();\n  }\n  return internalCreateRangeSelection(lastSelection, domSelection, editor);\n}\nfunction internalCreateRangeSelection(lastSelection, domSelection, editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  } // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcesssingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  } // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n\n  const resolvedSelectionPoints = internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset) {\n  let times = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key; // Single node. We shift selection but never redimension it\n\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element'); // The new selection might point to text nodes, try to resolve them\n\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  } // The new selection might point to text nodes, try to resolve them\n\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement; // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  } // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  } // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  } // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {// If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes, selectStart) {\n  let selection = $getSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  return selection.insertNodes(nodes, selectStart);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction DEPRECATED_$computeGridMap(grid, cellA, cellB) {\n  const tableMap = [];\n  let cellAValue = null;\n  let cellBValue = null;\n  function write(startRow, startColumn, cell) {\n    const value = {\n      cell,\n      startColumn,\n      startRow\n    };\n    const rowSpan = cell.__rowSpan;\n    const colSpan = cell.__colSpan;\n    for (let i = 0; i < rowSpan; i++) {\n      if (tableMap[startRow + i] === undefined) {\n        tableMap[startRow + i] = [];\n      }\n      for (let j = 0; j < colSpan; j++) {\n        tableMap[startRow + i][startColumn + j] = value;\n      }\n    }\n    if (cellA.is(cell)) {\n      cellAValue = value;\n    }\n    if (cellB.is(cell)) {\n      cellBValue = value;\n    }\n  }\n  function isEmpty(row, column) {\n    return tableMap[row] === undefined || tableMap[row][column] === undefined;\n  }\n  const gridChildren = grid.getChildren();\n  for (let i = 0; i < gridChildren.length; i++) {\n    const row = gridChildren[i];\n    if (!DEPRECATED_$isGridRowNode(row)) {\n      throw Error(`Expected GridNode children to be GridRowNode`);\n    }\n    const rowChildren = row.getChildren();\n    let j = 0;\n    for (const cell of rowChildren) {\n      if (!DEPRECATED_$isGridCellNode(cell)) {\n        throw Error(`Expected GridRowNode children to be GridCellNode`);\n      }\n      while (!isEmpty(i, j)) {\n        j++;\n      }\n      write(i, j, cell);\n      j += cell.__colSpan;\n    }\n  }\n  if (!(cellAValue !== null)) {\n    throw Error(`Anchor not found in Grid`);\n  }\n  if (!(cellBValue !== null)) {\n    throw Error(`Focus not found in Grid`);\n  }\n  return [tableMap, cellAValue, cellBValue];\n}\nfunction DEPRECATED_$getNodeTriplet(source) {\n  let cell;\n  if (source instanceof DEPRECATED_GridCellNode) {\n    cell = source;\n  } else if (source instanceof LexicalNode) {\n    const cell_ = $findMatchingParent(source, DEPRECATED_$isGridCellNode);\n    if (!DEPRECATED_$isGridCellNode(cell_)) {\n      throw Error(`Expected to find a parent GridCellNode`);\n    }\n    cell = cell_;\n  } else {\n    const cell_ = $findMatchingParent(source.getNode(), DEPRECATED_$isGridCellNode);\n    if (!DEPRECATED_$isGridCellNode(cell_)) {\n      throw Error(`Expected to find a parent GridCellNode`);\n    }\n    cell = cell_;\n  }\n  const row = cell.getParent();\n  if (!DEPRECATED_$isGridRowNode(row)) {\n    throw Error(`Expected GridCellNode to have a parent GridRowNode`);\n  }\n  const grid = row.getParent();\n  if (!DEPRECATED_$isGridNode(grid)) {\n    throw Error(`Expected GridRowNode to have a parent GridNode`);\n  }\n  return [cell, row, grid];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\n\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size; // We want to prioritize node transforms over element transforms\n\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    } // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    } // Make the editorState immutable\n\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n} // This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction commitPendingUpdates(editor) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  } // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false; // We don't want updates to sync block the reconciliation.\n\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      } // Reset editor and restore incoming editor state to the DOM\n\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        commitPendingUpdates(editor);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState); // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window); // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, tags, dirtyLeaves);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n  triggerTextContentListeners(editor, currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, updateTags, dirtyLeaves) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (var _len = arguments.length, payload = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      payload[_key - 3] = arguments[_key];\n    }\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false; // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection != null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    } // Restore existing editor state to the DOM\n\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\n\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getFirstChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getLastChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length; // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  } // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    if ($isElementNode(firstNode) || $isTextNode(firstNode)) {\n      return firstNode.select(0, 0);\n    } // Decorator or LineBreak\n\n    if (firstNode !== null) {\n      return firstNode.selectPrevious();\n    }\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      return lastNode.select();\n    } // Decorator or LineBreak\n\n    if (lastNode !== null) {\n      return lastNode.selectNext();\n    }\n    return this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append() {\n    for (var _len2 = arguments.length, nodesToAppend = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      nodesToAppend[_key2] = arguments[_key2];\n    }\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      } // Set child parent to self\n\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize; // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        } // Cleanup if node can't be empty\n\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  } // JSON serialization\n\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  } // These are intended to be extends for specific element heuristics.\n\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canInsertTab() {\n    return false;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  } // TODO 0.10 deprecate\n\n  canExtractContents() {\n    return true;\n  }\n  canReplaceWith(replacement) {\n    return true;\n  }\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  } // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n\n  isShadowRoot() {\n    return false;\n  }\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  } // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  } // Mutate\n\n  append() {\n    for (let i = 0; i < arguments.length; i++) {\n      const node = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...arguments);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection; // Check if we need to update because of changes in selection\n\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor; // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\n    }\n  } // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n  const serializedChildren = serializedNode.children;\n  if ($isElementNode(node)) {\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  } // @ts-expect-error\n\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        const parentElement = node.parentElement; // If the <br> is the only child, then skip including it\n\n        if (parentElement != null && parentElement.firstChild === node && parentElement.lastChild === node) {\n          return null;\n        }\n        return {\n          conversion: convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList; // Firstly we handle the base theme.\n\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  } // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing(); // Always add a suffix if we're composing a node\n\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        } // @ts-expect-error\n\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme; // Apply theme class names\n\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n/** @noInheritDoc */\n\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  } // View\n\n  createDOM(config) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme; // Apply theme class names\n\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      br: () => ({\n        conversion: convertLineBreakToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  } // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor); // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n\n    if (element !== null) {\n      if (this.hasFormat('bold')) {\n        element = wrapElementWith(element, 'b');\n      }\n      if (this.hasFormat('italic')) {\n        element = wrapElementWith(element, 'i');\n      }\n      if (this.hasFormat('strikethrough')) {\n        element = wrapElementWith(element, 's');\n      }\n      if (this.hasFormat('underline')) {\n        element = wrapElementWith(element, 'u');\n      }\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  } // Mutators\n\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  } // TODO 0.5 This should just be a `string`.\n\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  } // TODO 0.5 This should just be a `string`.\n\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n  toggleFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return this.setFormat(this.getFormat() ^ formatFlag);\n  }\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  canContainTabs() {\n    return false;\n  }\n  splitText() {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    for (var _len3 = arguments.length, splitOffsets = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      splitOffsets[_key3] = arguments[_key3];\n    }\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    } // Handle selection\n\n    const selection = $getSelection(); // Then handle all other parts\n\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    } // Insert the nodes into the parent's children\n\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n    return splitNodes;\n  }\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode; // Google Docs uses span tags + font-weight for bold text\n\n  const hasBoldFontWeight = span.style.fontWeight === '700'; // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n\n  const hasLinethroughTextDecoration = span.style.textDecoration === 'line-through'; // Google Docs uses span tags + font-style for italic text\n\n  const hasItalicFontStyle = span.style.fontStyle === 'italic'; // Google Docs uses span tags + text-decoration: underline for underline text\n\n  const hasUnderlineTextDecoration = span.style.textDecoration === 'underline'; // Google Docs uses span tags + vertical-align to specify subscript and superscript\n\n  const verticalAlign = span.style.verticalAlign;\n  return {\n    forChild: lexicalNode => {\n      if (!$isTextNode(lexicalNode)) {\n        return lexicalNode;\n      }\n      if (hasBoldFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      if (hasLinethroughTextDecoration) {\n        lexicalNode.toggleFormat('strikethrough');\n      }\n      if (hasItalicFontStyle) {\n        lexicalNode.toggleFormat('italic');\n      }\n      if (hasUnderlineTextDecoration) {\n        lexicalNode.toggleFormat('underline');\n      }\n      if (verticalAlign === 'sub') {\n        lexicalNode.toggleFormat('subscript');\n      }\n      if (verticalAlign === 'super') {\n        lexicalNode.toggleFormat('superscript');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction convertLineBreakToElement() {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode; // Google Docs wraps all copied HTML in a <b> with font-weight normal\n\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !hasNormalFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction convertTextDOMNode(domNode, _parent, preformatted) {\n  let textContent = domNode.textContent || '';\n  if (!preformatted && /\\n/.test(textContent)) {\n    textContent = textContent.replace(/\\r?\\n/gm, ' ');\n    if (textContent.trim().length === 0) {\n      return {\n        node: null\n      };\n    }\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !lexicalNode.hasFormat(format)) {\n        lexicalNode.toggleFormat(format);\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction $createTextNode() {\n  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  static getType() {\n    return 'paragraph';\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  } // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && this.isEmpty()) {\n      element.append(document.createElement('br'));\n    }\n    if (element) {\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'paragraph',\n      version: 1\n    };\n  } // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newElement = $createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren(); // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  } // Remove all the DOM nodes from the root element\n\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM != null ? node.klass.importDOM.bind(node.klass) : null;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM();\n    if (map !== null) {\n      Object.keys(map).forEach(key => {\n        let currentCache = conversionCache.get(key);\n        if (currentCache === undefined) {\n          currentCache = [];\n          conversionCache.set(key, currentCache);\n        }\n        currentCache.push(map[key]);\n      });\n    }\n  });\n  return conversionCache;\n}\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\n\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, ParagraphNode, ...(config.nodes || [])];\n  const onError = config.onError;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replacementClass = null;\n      let replacementKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replacementClass = options.with;\n        replacementKlass = options.withKlass ? options.withKlass : null;\n      } // Ensure custom nodes implement required methods.\n\n      {\n        const name = klass.name;\n        if (name !== 'RootNode') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        klass,\n        replace: replacementClass,\n        replaceWithKlass: replacementKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor; // The root element associated with this editor\n\n    this._rootElement = null; // The current editor state\n\n    this._editorState = editorState; // Handling of drafts and updates\n\n    this._pendingEditorState = null; // Used to help co-ordinate selection and events\n\n    this._compositionKey = null;\n    this._deferred = []; // Used during reconciliation\n\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false; // Listeners\n\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    }; // Commands\n\n    this._commands = new Map(); // Editor configuration for theme/context.\n\n    this._config = config; // Mapping of types to their nodes\n\n    this._nodes = nodes; // React node decorators for portals\n\n    this._decorators = {};\n    this._pendingDecorators = null; // Used to optimize reconciliation\n\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set(); // Handling of DOM mutations\n\n    this._observer = null; // Used for identifying owning editors\n\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerMutationListener(klass, listener) {\n    const registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klass);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n  /** @internal */\n\n  registerNodeTransformToKlass(klass, listener) {\n    const type = klass.getType();\n    const registeredNode = this._nodes.get(type);\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    return registeredNode;\n  }\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n\n  hasNodes(nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const klass = nodes[i];\n      const type = klass.getType();\n      if (!this._nodes.has(type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n\n  getDecorators() {\n    return this._decorators;\n  }\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n\n  getKey() {\n    return this._key;\n  }\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        commitPendingUpdates(this); // TODO: remove this flag once we no longer use UEv2 internally\n\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n\n  getEditorState() {\n    return this._editorState;\n  }\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    commitPendingUpdates(this);\n  }\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserliazation from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n\n  focus(callbackFn) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      }); // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n  /**\n   * Removes focus from the editor.\n   */\n\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass DEPRECATED_GridCellNode extends ElementNode {\n  /** @internal */\n  constructor(colSpan, key) {\n    super(key);\n    this.__colSpan = colSpan;\n    this.__rowSpan = 1;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      colSpan: this.__colSpan,\n      rowSpan: this.__rowSpan\n    };\n  }\n  getColSpan() {\n    return this.__colSpan;\n  }\n  setColSpan(colSpan) {\n    this.getWritable().__colSpan = colSpan;\n    return this;\n  }\n  getRowSpan() {\n    return this.__rowSpan;\n  }\n  setRowSpan(rowSpan) {\n    this.getWritable().__rowSpan = rowSpan;\n    return this;\n  }\n}\nfunction DEPRECATED_$isGridCellNode(node) {\n  return node instanceof DEPRECATED_GridCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridNode extends ElementNode {}\nfunction DEPRECATED_$isGridNode(node) {\n  return node instanceof DEPRECATED_GridNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridRowNode extends ElementNode {}\nfunction DEPRECATED_$isGridRowNode(node) {\n  return node instanceof DEPRECATED_GridRowNode;\n}\nexports.$addUpdateTag = $addUpdateTag;\nexports.$applyNodeReplacement = $applyNodeReplacement;\nexports.$copyNode = $copyNode;\nexports.$createLineBreakNode = $createLineBreakNode;\nexports.$createNodeSelection = $createNodeSelection;\nexports.$createParagraphNode = $createParagraphNode;\nexports.$createRangeSelection = $createRangeSelection;\nexports.$createTextNode = $createTextNode;\nexports.$getAdjacentNode = $getAdjacentNode;\nexports.$getNearestNodeFromDOMNode = $getNearestNodeFromDOMNode;\nexports.$getNearestRootOrShadowRoot = $getNearestRootOrShadowRoot;\nexports.$getNodeByKey = $getNodeByKey;\nexports.$getPreviousSelection = $getPreviousSelection;\nexports.$getRoot = $getRoot;\nexports.$getSelection = $getSelection;\nexports.$getTextContent = $getTextContent;\nexports.$hasAncestor = $hasAncestor;\nexports.$hasUpdateTag = $hasUpdateTag;\nexports.$insertNodes = $insertNodes;\nexports.$isDecoratorNode = $isDecoratorNode;\nexports.$isElementNode = $isElementNode;\nexports.$isInlineElementOrDecoratorNode = $isInlineElementOrDecoratorNode;\nexports.$isLeafNode = $isLeafNode;\nexports.$isLineBreakNode = $isLineBreakNode;\nexports.$isNodeSelection = $isNodeSelection;\nexports.$isParagraphNode = $isParagraphNode;\nexports.$isRangeSelection = $isRangeSelection;\nexports.$isRootNode = $isRootNode;\nexports.$isRootOrShadowRoot = $isRootOrShadowRoot;\nexports.$isTextNode = $isTextNode;\nexports.$nodesOfType = $nodesOfType;\nexports.$normalizeSelection__EXPERIMENTAL = $normalizeSelection;\nexports.$parseSerializedNode = $parseSerializedNode;\nexports.$setCompositionKey = $setCompositionKey;\nexports.$setSelection = $setSelection;\nexports.$splitNode = $splitNode;\nexports.BLUR_COMMAND = BLUR_COMMAND;\nexports.CAN_REDO_COMMAND = CAN_REDO_COMMAND;\nexports.CAN_UNDO_COMMAND = CAN_UNDO_COMMAND;\nexports.CLEAR_EDITOR_COMMAND = CLEAR_EDITOR_COMMAND;\nexports.CLEAR_HISTORY_COMMAND = CLEAR_HISTORY_COMMAND;\nexports.CLICK_COMMAND = CLICK_COMMAND;\nexports.COMMAND_PRIORITY_CRITICAL = COMMAND_PRIORITY_CRITICAL;\nexports.COMMAND_PRIORITY_EDITOR = COMMAND_PRIORITY_EDITOR;\nexports.COMMAND_PRIORITY_HIGH = COMMAND_PRIORITY_HIGH;\nexports.COMMAND_PRIORITY_LOW = COMMAND_PRIORITY_LOW;\nexports.COMMAND_PRIORITY_NORMAL = COMMAND_PRIORITY_NORMAL;\nexports.CONTROLLED_TEXT_INSERTION_COMMAND = CONTROLLED_TEXT_INSERTION_COMMAND;\nexports.COPY_COMMAND = COPY_COMMAND;\nexports.CUT_COMMAND = CUT_COMMAND;\nexports.DELETE_CHARACTER_COMMAND = DELETE_CHARACTER_COMMAND;\nexports.DELETE_LINE_COMMAND = DELETE_LINE_COMMAND;\nexports.DELETE_WORD_COMMAND = DELETE_WORD_COMMAND;\nexports.DEPRECATED_$computeGridMap = DEPRECATED_$computeGridMap;\nexports.DEPRECATED_$createGridSelection = DEPRECATED_$createGridSelection;\nexports.DEPRECATED_$getNodeTriplet = DEPRECATED_$getNodeTriplet;\nexports.DEPRECATED_$isGridCellNode = DEPRECATED_$isGridCellNode;\nexports.DEPRECATED_$isGridNode = DEPRECATED_$isGridNode;\nexports.DEPRECATED_$isGridRowNode = DEPRECATED_$isGridRowNode;\nexports.DEPRECATED_$isGridSelection = DEPRECATED_$isGridSelection;\nexports.DEPRECATED_GridCellNode = DEPRECATED_GridCellNode;\nexports.DEPRECATED_GridNode = DEPRECATED_GridNode;\nexports.DEPRECATED_GridRowNode = DEPRECATED_GridRowNode;\nexports.DRAGEND_COMMAND = DRAGEND_COMMAND;\nexports.DRAGOVER_COMMAND = DRAGOVER_COMMAND;\nexports.DRAGSTART_COMMAND = DRAGSTART_COMMAND;\nexports.DROP_COMMAND = DROP_COMMAND;\nexports.DecoratorNode = DecoratorNode;\nexports.ElementNode = ElementNode;\nexports.FOCUS_COMMAND = FOCUS_COMMAND;\nexports.FORMAT_ELEMENT_COMMAND = FORMAT_ELEMENT_COMMAND;\nexports.FORMAT_TEXT_COMMAND = FORMAT_TEXT_COMMAND;\nexports.INDENT_CONTENT_COMMAND = INDENT_CONTENT_COMMAND;\nexports.INSERT_LINE_BREAK_COMMAND = INSERT_LINE_BREAK_COMMAND;\nexports.INSERT_PARAGRAPH_COMMAND = INSERT_PARAGRAPH_COMMAND;\nexports.KEY_ARROW_DOWN_COMMAND = KEY_ARROW_DOWN_COMMAND;\nexports.KEY_ARROW_LEFT_COMMAND = KEY_ARROW_LEFT_COMMAND;\nexports.KEY_ARROW_RIGHT_COMMAND = KEY_ARROW_RIGHT_COMMAND;\nexports.KEY_ARROW_UP_COMMAND = KEY_ARROW_UP_COMMAND;\nexports.KEY_BACKSPACE_COMMAND = KEY_BACKSPACE_COMMAND;\nexports.KEY_DELETE_COMMAND = KEY_DELETE_COMMAND;\nexports.KEY_DOWN_COMMAND = KEY_DOWN_COMMAND;\nexports.KEY_ENTER_COMMAND = KEY_ENTER_COMMAND;\nexports.KEY_ESCAPE_COMMAND = KEY_ESCAPE_COMMAND;\nexports.KEY_MODIFIER_COMMAND = KEY_MODIFIER_COMMAND;\nexports.KEY_SPACE_COMMAND = KEY_SPACE_COMMAND;\nexports.KEY_TAB_COMMAND = KEY_TAB_COMMAND;\nexports.LineBreakNode = LineBreakNode;\nexports.MOVE_TO_END = MOVE_TO_END;\nexports.MOVE_TO_START = MOVE_TO_START;\nexports.OUTDENT_CONTENT_COMMAND = OUTDENT_CONTENT_COMMAND;\nexports.PASTE_COMMAND = PASTE_COMMAND;\nexports.ParagraphNode = ParagraphNode;\nexports.REDO_COMMAND = REDO_COMMAND;\nexports.REMOVE_TEXT_COMMAND = REMOVE_TEXT_COMMAND;\nexports.RootNode = RootNode;\nexports.SELECTION_CHANGE_COMMAND = SELECTION_CHANGE_COMMAND;\nexports.TextNode = TextNode;\nexports.UNDO_COMMAND = UNDO_COMMAND;\nexports.createCommand = createCommand;\nexports.createEditor = createEditor;\nexports.getNearestEditorFromDOMNode = getNearestEditorFromDOMNode;\nexports.isSelectionCapturedInDecoratorInput = isSelectionCapturedInDecoratorInput;\nexports.isSelectionWithinEditor = isSelectionWithinEditor;","map":{"version":3,"names":["createCommand","type","SELECTION_CHANGE_COMMAND","CLICK_COMMAND","DELETE_CHARACTER_COMMAND","INSERT_LINE_BREAK_COMMAND","INSERT_PARAGRAPH_COMMAND","CONTROLLED_TEXT_INSERTION_COMMAND","PASTE_COMMAND","REMOVE_TEXT_COMMAND","DELETE_WORD_COMMAND","DELETE_LINE_COMMAND","FORMAT_TEXT_COMMAND","UNDO_COMMAND","REDO_COMMAND","KEY_DOWN_COMMAND","KEY_ARROW_RIGHT_COMMAND","MOVE_TO_END","KEY_ARROW_LEFT_COMMAND","MOVE_TO_START","KEY_ARROW_UP_COMMAND","KEY_ARROW_DOWN_COMMAND","KEY_ENTER_COMMAND","KEY_SPACE_COMMAND","KEY_BACKSPACE_COMMAND","KEY_ESCAPE_COMMAND","KEY_DELETE_COMMAND","KEY_TAB_COMMAND","INDENT_CONTENT_COMMAND","OUTDENT_CONTENT_COMMAND","DROP_COMMAND","FORMAT_ELEMENT_COMMAND","DRAGSTART_COMMAND","DRAGOVER_COMMAND","DRAGEND_COMMAND","COPY_COMMAND","CUT_COMMAND","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","CAN_REDO_COMMAND","CAN_UNDO_COMMAND","FOCUS_COMMAND","BLUR_COMMAND","KEY_MODIFIER_COMMAND","CAN_USE_DOM","window","document","createElement","documentMode","IS_APPLE","test","navigator","platform","IS_FIREFOX","userAgent","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","IS_IOS","MSStream","IS_CHROME","IS_APPLE_WEBKIT","DOM_ELEMENT_TYPE","DOM_TEXT_TYPE","NO_DIRTY_NODES","HAS_DIRTY_NODES","FULL_RECONCILE","IS_NORMAL","IS_TOKEN","IS_SEGMENTED","IS_BOLD","IS_ITALIC","IS_STRIKETHROUGH","IS_UNDERLINE","IS_CODE","IS_SUBSCRIPT","IS_SUPERSCRIPT","IS_HIGHLIGHT","IS_ALL_FORMATTING","IS_DIRECTIONLESS","IS_UNMERGEABLE","IS_ALIGN_LEFT","IS_ALIGN_CENTER","IS_ALIGN_RIGHT","IS_ALIGN_JUSTIFY","IS_ALIGN_START","IS_ALIGN_END","NON_BREAKING_SPACE","ZERO_WIDTH_SPACE","COMPOSITION_SUFFIX","DOUBLE_LINE_BREAK","COMPOSITION_START_CHAR","RTL","LTR","RTL_REGEX","RegExp","LTR_REGEX","TEXT_TYPE_TO_FORMAT","bold","code","highlight","italic","strikethrough","subscript","superscript","underline","DETAIL_TYPE_TO_DETAIL","directionless","unmergeable","ELEMENT_TYPE_TO_FORMAT","center","end","justify","left","right","start","ELEMENT_FORMAT_TO_TYPE","TEXT_MODE_TO_TYPE","normal","segmented","token","TEXT_TYPE_TO_MODE","TEXT_MUTATION_VARIANCE","isProcessingMutations","lastTextEntryTimeStamp","getIsProcesssingMutations","updateTimeStamp","event","timeStamp","initTextEntryListener","editor","getWindow","addEventListener","isManagedLineBreak","dom","target","__lexicalLineBreak","_key","undefined","getLastSelection","getEditorState","read","selection","$getSelection","clone","handleTextMutation","node","domSelection","getDOMSelection","_window","anchorOffset","focusOffset","anchorNode","text","nodeValue","$updateTextNodeFromDOMContent","shouldUpdateTextNodeFromMutation","targetDOM","targetNode","$isRangeSelection","anchor","getNode","is","format","getFormat","nodeType","isAttached","$flushMutations$1","mutations","observer","shouldFlushTextMutations","performance","now","updateEditor","badDOMTargets","Map","rootElement","getRootElement","currentEditorState","_editorState","blockCursorElement","_blockCursorElement","shouldRevertSelection","possibleTextForFirefoxPaste","i","length","mutation","$getNearestNodeFromDOMNode","$isDecoratorNode","$isTextNode","addedDOMs","addedNodes","s","addedDOM","getNodeFromDOMNode","parentDOM","parentNode","nodeName","possibleText","innerText","removeChild","removedDOMs","removedNodes","removedDOMsLength","unremovedBRs","removedDOM","appendChild","internalGetRoot","set","size","$isElementNode","childKeys","getChildrenKeys","currentDOM","firstChild","key","correctDOM","getElementByKey","replaceChild","nextSibling","markDirty","records","takeRecords","record","dirty","$setSelection","isFirefoxClipboardEvents","insertRawText","flushRootMutations","_observer","initMutationObserver","MutationObserver","keyCounter","generateRandomKey","getRegisteredNodeOrThrow","registeredNode","_nodes","get","Error","scheduleMicroTask","queueMicrotask","fn","Promise","resolve","then","$isSelectionCapturedInDecorator","isSelectionCapturedInDecoratorInput","anchorDOM","activeElement","contentEditable","__lexicalEditor","isSelectionWithinEditor","focusDOM","contains","getNearestEditorFromDOMNode","error","currentNode","getParentElement","getTextDirection","$isTokenOrSegmented","isToken","isSegmented","isDOMNodeLexicalTextNode","getDOMTextNode","element","toggleTextFormatType","alignWithFormat","activeFormat","isStateFlagPresent","$isLeafNode","$isLineBreakNode","$setNodeKey","existingKey","__key","errorOnReadOnly","errorOnInfiniteTransforms","getActiveEditor","editorState","getActiveEditorState","_nodeMap","_dirtyElements","_dirtyLeaves","add","_cloneNotNeeded","_dirtyType","internalMarkParentElementsAsDirty","parentKey","nodeMap","dirtyElements","nextParentKey","has","__parent","removeFromParent","oldParent","getParent","writableNode","getWritable","writableParent","prevSibling","getPreviousSibling","getNextSibling","writableNextSibling","__first","__prev","writablePrevSibling","__next","__last","__size","internalMarkNodeAsDirty","latest","getLatest","parent","internalMarkSiblingsAsDirty","previousNode","nextNode","$setCompositionKey","compositionKey","previousCompositionKey","_compositionKey","$getNodeByKey","$getCompositionKey","isCurrentlyReadOnlyMode","startingDOM","cloneDecorators","currentDecorators","_decorators","pendingDecorators","Object","assign","_pendingDecorators","getEditorStateTextContent","$getRoot","getTextContent","markAllNodesAsDirty","isEmpty","_pendingEditorState","tag","isFrozen","_cachedNodes","_selection","$flushMutations","getNodeFromDOM","nodeKey","getNodeKeyFromDOM","getTextNodeOffset","moveSelectionToEnd","getTextContentSize","doesContainGrapheme","str","getEditorsToPropagate","editorsToPropagate","currentEditor","push","_parentEditor","createUID","Math","random","toString","replace","substr","getAnchorTextFromDOM","$updateSelectedTextFromDOM","isCompositionEnd","data","textContent","canContainTabs","hasTabCharacter","includes","selectionOffset","insertionOffset","beforeInsertion","slice","afterInsertion","offset","textNode","compositionEnd","isDirty","isComposing","normalizedTextContent","prevTextContent","setTimeout","update","remove","prevSelection","$getPreviousSelection","getKey","canInsertTextBefore","setTextContent","setTextNodeRange","originalTextContent","replacement","$createTextNode","$previousSiblingDoesNotAcceptText","previousSibling","isInline","canInsertTextAfter","$shouldInsertTextAfterOrBeforeTextNode","isCollapsed","getParentOrThrow","isTab","keyCode","altKey","ctrlKey","metaKey","isBold","controlOrMeta","isItalic","isUnderline","isParagraph","shiftKey","isReturn","isLineBreak","isOpenLineBreak","isDeleteWordBackward","isBackspace","isDeleteWordForward","isDelete","isDeleteLineBackward","isDeleteLineForward","isDeleteBackward","isDeleteForward","isUndo","isRedo","isCopy","isCut","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","isMoveBackward","isMoveToStart","isMoveForward","isMoveToEnd","isMoveUp","isMoveDown","isModifier","isSpace","isEscape","isSelectAll","getCachedClassNameArray","classNamesTheme","classNameThemeType","classNames","classNamesArr","split","setMutatedNode","mutatedNodes","registeredNodes","mutationListeners","__type","klass","mutatedNodesByType","prevMutation","isMove","$nodesOfType","readOnly","_readOnly","klassType","getType","nodes","nodesOfType","resolveElement","isBackward","block","getIndexWithinParent","getChildrenSize","getChildAtIndex","$getAdjacentNode","focus","focusNode","possibleNode","inputType","dispatchCommand","command","payload","triggerCommandListeners","$textContentRequiresDoubleLinebreakAtEnd","$isRootNode","isLastChild","getElementByKeyOrThrow","_keyToDOMMap","parentElement","assignedSlot","host","scrollIntoViewIfNeeded","selectionRect","doc","ownerDocument","defaultView","top","currentTop","bottom","currentBottom","targetTop","targetBottom","isBodyElement","body","innerHeight","targetRect","getBoundingClientRect","diff","scrollBy","scrollTop","yOffset","$hasUpdateTag","_updateTags","$addUpdateTag","$maybeMoveChildrenSelectionToParent","arguments","$hasAncestor","child","getDefaultView","domElem","ownerDoc","windowObj","$isInlineElementOrDecoratorNode","$getNearestRootOrShadowRoot","$isRootOrShadowRoot","isShadowRoot","$copyNode","copy","constructor","$applyNodeReplacement","replaceFunc","replacementNode","errorOnInsertTextNodeOnRoot","insertNode","createBlockCursorElement","editorConfig","theme","setAttribute","blockCursorTheme","blockCursor","classList","needsBlockCursor","canBeEmpty","removeDOMBlockCursorElement","style","removeProperty","updateDOMBlockCursorElement","nextSelection","elementNode","elementNodeSize","isBlockCursor","insertBeforeElement","sibling","elementDOM","_config","caretColor","insertBefore","targetWindow","getSelection","$splitNode","startNode","recurse","isParentRoot","nodeToMove","insertAfter","leftTree","rightTree","newParent","nextSiblings","getNextSiblings","append","$findMatchingParent","startingNode","findFn","curr","$getChildrenRecursively","stack","pop","unshift","getChildren","$garbageCollectDetachedDecorators","pendingEditorState","decorators","$garbageCollectDetachedDeepChildNodes","prevNodeMap","dirtyNodes","getFirstChild","childKey","delete","$garbageCollectDetachedNodes","prevEditorState","dirtyLeaves","$canSimpleTextNodesBeMerged","node1","node2","node1Mode","__mode","node1Format","__format","node1Style","__style","node2Mode","node2Format","node2Style","$mergeTextNodes","writableNode1","mergeWithSibling","normalizedNodes","_normalizedNodes","$normalizeTextNode","__text","isSimpleText","isUnmergeable","$normalizeSelection","$normalizePoint","point","nextOffsetAtEnd","subTreeTextContent","subTreeDirectionedTextContent","editorTextContent","activeEditorConfig","activeEditor$1","activeEditorNodes","treatAllNodesAsDirty","activeEditorStateReadOnly","activeMutationListeners","activeTextDirection","activeDirtyElements","activeDirtyLeaves","activePrevNodeMap","activeNextNodeMap","activePrevKeyToDOMMap","destroyNode","getPrevElementByKeyOrThrow","children","createChildrenArray","destroyChildren","_startIndex","endIndex","startIndex","setTextAlign","domStyle","value","setProperty","DEFAULT_INDENT_VALUE","setElementIndent","indent","indentClassName","elementHasClassName","indentationBaseValue","getComputedStyle","getPropertyValue","setElementFormat","createNode","insertDOM","createDOM","storeDOMWithKey","__indent","childrenSize","createChildrenWithDirection","reconcileElementTerminatingLineBreak","decorator","decorate","reconcileDecorator","isDirectionless","possibleLineBreak","freeze","previousSubTreeDirectionedTextContent","createChildren","reconcileBlockDirection","previousSubTreeTextContent","__lexicalTextContent","isLastChildLineBreakOrDecorator","prevElement","nextElement","prevLineBreak","nextLineBreak","previousSubTreeDirectionTextContent","__lexicalDirTextContent","previousDirection","__lexicalDir","hasEmptyDirectionedTextContent","direction","previousDirectionTheme","nextDirectionTheme","removeAttribute","dir","__dir","reconcileChildrenWithDirection","reconcileChildren","prevChildrenSize","nextChildrenSize","prevFirstChildKey","nextFrstChildKey","reconcileNode","lastDOM","replacementDOM","prevChildren","nextChildren","lexicalLineBreak","canUseFastPath","reconcileNodeChildren","prevNode","updateDOM","nextIndent","nextFormat","__cachedText","prevChildrenLength","nextChildrenLength","prevEndIndex","nextEndIndex","prevChildrenSet","nextChildrenSet","siblingDOM","prevIndex","nextIndex","prevKey","nextKey","Set","nextHasPrevKey","prevHasNextKey","childDOM","appendNewChildren","removeOldChildren","reconcileRoot","nextEditorState","dirtyType","_listeners","currentMutatedNodes","keyToDOMMap","PASS_THROUGH_COMMAND","ANDROID_COMPOSITION_LATENCY","rootElementEvents","onKeyDown","onPointerDown","onCompositionStart","onCompositionEnd","onInput","onClick","onBeforeInput","lastKeyDownTimeStamp","lastKeyCode","lastBeforeInputInsertTextTimeStamp","unprocessedBeforeInputData","rootElementsRegistered","isSelectionChangeFromDOMUpdate","isSelectionChangeFromMouseDown","isInsertLineBreak","isFirefoxEndingComposition","collapsedSelectionFormat","$shouldPreventDefaultAndInsertText","domTargetRange","isBeforeInput","domAnchorNode","anchorKey","backingAnchorElement","textLength","collapsed","startContainer","startOffset","getStyle","shouldSkipSelectionChange","domNode","onSelectionChange","isActive","windowEvent","currentTimeStamp","lastFormat","lastStyle","lastOffset","lastKey","combinedFormat","hasTextNodes","getNodes","nodesLength","lastSelection","getTopLevelElementOrThrow","removeAllRanges","pointerType","Node","getTargetRange","getTargetRanges","targetRanges","$canRemoveText","isPossiblyAndroidKeyPress","targetRange","preventDefault","applyDOMRange","dataTransfer","getData","stopPropagation","onCompositionEndImpl","characterData","$isNodeSelection","root","select","getRootElementRemoveHandles","eventHandles","__lexicalEventHandles","activeNestedEditorsMap","onDocumentSelectionChange","nextActiveEditor","newSelection","internalCreateRangeSelection","editors","rootEditor","rootEditorKey","activeNestedEditor","prevActiveEditor","stopLexicalPropagation","_lexicalHandled","hasStoppedLexicalPropagation","stopped","addRootElementEvents","removeHandles","eventName","onEvent","eventHandler","isEditable","removeEventListener","removeRootElementEvents","cleanActiveNestedEditorsMap","markSelectionChangeFromDOMUpdate","markCollapsedSelectionFormat","removeNode","nodeToRemove","restoreSelection","preserveEmptyParent","selectionMoved","moveSelectionPointToSibling","index","$updateElementSelectionOnCreateDeleteNode","selectEnd","LexicalNode","name","_data","errorOnTypeKlassMismatch","isSelected","targetSelection","some","n","getTopLevelElement","getParents","parents","getParentKeys","self","getPreviousSiblings","siblings","getCommonAncestor","a","b","aLength","bLength","bSet","ancestor","object","isBefore","isParentOf","commonAncestor","indexA","indexB","getNodesBetween","visited","getLastChild","parentSibling","reverse","latestNode","cloneNotNeeded","mutableNode","__detail","_editor","_prevNode","_dom","exportDOM","exportJSON","importJSON","_serializedNode","transform","replaceWith","includeChildren","toReplaceKey","writableReplaceWith","forEach","$moveSelectionPointToEnd","nodeToInsert","writableSelf","writableNodeToInsert","elementAnchorSelectionOnNode","elementFocusSelectionOnNode","oldIndex","oldParentKey","insertKey","writableParentKey","isParentRequired","createParentElementNode","$createParagraphNode","selectPrevious","selectNext","editorKlass","Point","aNode","bNode","aOffset","bOffset","aNodeDescendant","getDescendantByIndex","bNodeDescendant","oldKey","$createPoint","selectPointOnNode","textContentLength","lastNode","getLastDescendant","$transferStartingElementPointToTextPoint","placementNode","setFormat","setStyle","$setPointValues","NodeSelection","objects","Array","from","every","clear","extract","insertText","insertNodes","selectStart","selectedNodes","selectedNodesLength","lastSelectedNode","selectionAtEnd","cachedNodes","x","RangeSelection","GridSelection","gridKey","DEPRECATED_$isGridSelection","anchorCellKey","focusCellKey","getCharacterOffsets","getShape","anchorCellNode","anchorCellNodeIndex","anchorCelRoweIndex","focusCellNode","focusCellNodeIndex","focusCellRowIndex","startX","min","stopX","max","startY","stopY","fromX","fromY","toX","toY","anchorCell","DEPRECATED_$isGridCellNode","focusCell","anchorRow","DEPRECATED_$isGridRowNode","gridNode","DEPRECATED_$isGridNode","map","cellAMap","cellBMap","DEPRECATED_$computeGridMap","minColumn","startColumn","minRow","startRow","maxColumn","cell","__colSpan","maxRow","__rowSpan","exploredMinColumn","exploredMinRow","exploredMaxColumn","exploredMaxRow","expandBoundary","mapValue","cellStartColumn","cellStartRow","rowDiff","previousColumn","columnDiff","previousRow","nextColumn","nextRow","lastRow","j","currentRow","firstPoint","lastPoint","firstNode","endOffset","firstNodeDescendant","lastNodeDescendant","prevWasElement","range","resolvedSelectionPoints","internalResolveSelectionPoints","endContainer","anchorPoint","focusPoint","toggleFormat","hasFormat","formatFlag","parts","part","$createLineBreakNode","endPoint","firstNodeText","firstNodeTextLength","firstNodeParent","lastIndex","lastNodeParent","normalizeSelectionPointsForBoundaries","firstNodeFormat","firstNodeStyle","splitText","delCount","spliceText","markedNodeKeysForKeep","firstElement","lastElement","lastElementChild","lastNodeChildren","selectedNodesSet","firstAndLastElementsAreEqual","insertionTarget","lastNodeChild","lastRemovedParent","childrenLength","selectedNode","removeText","formatText","formatType","selectedTextNodes","selectedTextNodesLength","startPoint","firstIndex","firstNextFormat","getFormatFlags","splitNodes","lastNextFormat","selectionEnd","nextSiblingKey","prevSiblingKey","topLevelElement","danglingText","didReplaceOrMerge","canReplaceWith","firstDescendant","getFirstDescendant","splitNode","splitOffset","nextTarget","lastChild","originalTarget","prevParent","$isBlockElementNode","isIsolated","canInsertAfter","prevParentClone","insertParagraph","currentElement","nodesToMove","siblingsToMove","paragraph","nodesToMoveLength","newElement","insertNewAfter","insertLineBreak","currentElementFirstChild","isBeginning","siblingsToMoveLength","siblingToMove","lineBreakNode","shift","lastNodeText","lastNodeTextLength","modify","alter","granularity","collapse","isKeyboardSelectable","nodeSelection","$createNodeSelection","elementKey","siblingKey","_rootElement","moveNativeSelection","rangeCount","getRangeAt","validNodes","shrinkSelection","firstValidNode","lastValidNode","$swapPoints","deleteCharacter","textContentSize","$removeSegment","$updateCaretSelectionForUnicodeCharacter","collapseAtStart","wasCollapsed","deleteLine","deleteWord","getCharacterOffset","anchorType","characterOffset","splitLength","segmentOffset","restoreOffset","isLast","splice","nextTextContent","join","trim","shouldResolveAncestor","resolvedElement","resolvedOffset","internalResolveSelectionPoint","resolvedNode","childNodes","childNodesLength","hasBlockCursor","descendant","resolveSelectionPointOnBoundary","lastAnchor","lastFocus","resolvedAnchorPoint","resolvedFocusPoint","internalMakeRangeSelection","focusKey","focusType","$createRangeSelection","DEPRECATED_$createGridSelection","internalCreateSelection","eventType","isSelectionChange","useDOMSelection","detail","nodeOffset","times","newSelectionOffset","$updateSelectionResolveTextNodes","firstPointNode","lastPointNode","firstPointOffset","lastPointOffset","childSize","anchorOffsetAtEnd","newOffset","focusOffsetAtEnd","applySelectionTransforms","selectionTransform","adjustPointOffsetForMergedSibling","updateDOMSelection","tags","nodeCount","anchorDOMNode","focusDOMNode","nextAnchorOffset","nextFocusOffset","nextStyle","nextAnchorNode","nextFocusNode","anchorFormatOrStyleChanged","preventScroll","setBaseAndExtent","selectionTarget","Text","createRange","selectNode","$insertNodes","$getTextContent","grid","cellA","cellB","tableMap","cellAValue","cellBValue","write","rowSpan","colSpan","row","column","gridChildren","rowChildren","DEPRECATED_$getNodeTriplet","source","DEPRECATED_GridCellNode","cell_","activeEditorState","activeEditor","isReadOnlyMode","isAttemptingToRecoverFromReconcilerError","infiniteTransformCount","observerOptions","childList","subtree","internalGetActiveEditor","$applyTransforms","transformsCache","transformsArr","transforms","transformsArrLength","$isNodeValidForTransform","$normalizeAllDirtyTextNodes","$applyAllTransforms","untransformedDirtyLeaves","untransformedDirtyLeavesLength","untransformedDirtyElements","untransformedDirtyElementsLength","currentUntransformedDirtyElement","intentionallyMarkedAsDirty","$parseSerializedNode","serializedNode","internalSerializedNode","$parseSerializedNodeImpl","nodeClass","isArray","serializedJSONChildNode","childNode","parseEditorState","serializedEditorState","updateFn","createEmptyEditorState","previousActiveEditorState","previousReadOnlyMode","previousActiveEditor","previousDirtyElements","previousDirtyLeaves","previousCloneNotNeeded","previousDirtyType","handleDEVOnlyPendingUpdateGuarantees","_onError","readEditorState","callbackFn","commitPendingUpdates","shouldSkipDOM","_headless","currentSelection","pendingSelection","needsUpdate","previouslyUpdating","_updating","disconnect","resetEditor","observe","deferred","_deferred","_editable","triggerMutationListeners","triggerListeners","triggerTextContentListeners","triggerDeferredUpdateCallbacks","triggerEnqueuedUpdates","currentTextContent","latestTextContent","updateTags","listeners","listenersLength","listener","isCurrentlyEnqueuingUpdates","_len","apply","returnVal","e","commandListeners","_commands","listenerInPriorityOrder","listenersSet","queuedUpdates","_updates","queuedUpdate","options","beginUpdate","processNestedUpdates","initialSkipTransforms","skipTransforms","nextUpdateFn","onUpdate","discrete","editorStateWasCloned","cloneEditorState","_flushSync","startingCompositionKey","endingCompositionKey","pendingNodeMap","shouldUpdate","editorStateHasDirtySelection","DecoratorNode","config","ElementNode","getFormatType","getIndent","parentLastChild","getAllTextNodes","textNodes","subChildrenNodes","firstKey","getFirstChildOrThrow","getLastChildOrThrow","getDirection","_anchorOffset","_focusOffset","childrenCount","_len2","nodesToAppend","_key2","setDirection","setIndent","indentLevel","deleteCount","nodesToInsert","nodesToInsertLength","oldSize","writableSelfKey","nodesToInsertKeys","nodesToRemoveKeys","nodeAfterRange","nodeBeforeRange","newSize","nodeToDelete","nodeKeyToDelete","writableNodeToDelete","nodeKeyToInsert","writablePrevNode","writableNodeAfterRange","nodesToRemoveKeySet","nodesToInsertKeySet","isPointRemoved","version","canInsertTab","canIndent","excludeFromCopy","destination","canExtractContents","canMergeWith","extractWithChild","RootNode","cachedText","$createRootNode","current","EditorState","exportNodeToJSON","serializedChildren","serializedChildNode","toJSON","LineBreakNode","importDOM","br","conversion","convertLineBreakElement","priority","serializedLineBreakNode","getElementOuterTag","getElementInnerTag","setTextThemeClassNames","prevFormat","textClassNames","domClassList","hasUnderlineStrikethrough","prevUnderlineStrikethrough","nextUnderlineStrikethrough","flag","diffComposedText","nextText","suffix","insert","deleteData","insertData","createTextInnerDOM","innerDOM","innerTag","wrapElementWith","el","TextNode","getDetail","getMode","outerTag","cssText","prevOuterTag","nextOuterTag","prevInnerTag","nextInnerTag","prevTag","nextTag","prevInnerDOM","nextInnerDOM","prevStyle","#text","convertTextDOMNode","convertBringAttentionToElement","convertLineBreakToElement","convertTextFormatElement","em","span","convertSpanElement","strong","sub","sup","u","setDetail","setMode","mode","toggleDirectionless","toggleUnmergeable","newText","moveSelection","handledTextLength","updatedText","_len3","splitOffsets","_key3","offsetsSet","string","partsLength","firstPart","hasReplacedSelf","textSize","partSize","nextTextSize","insertionIndex","targetKey","targetText","isTextEntity","hasBoldFontWeight","fontWeight","hasLinethroughTextDecoration","textDecoration","hasItalicFontStyle","fontStyle","hasUnderlineTextDecoration","verticalAlign","forChild","lexicalNode","hasNormalFontWeight","_parent","preformatted","nodeNameToTextFormat","toLowerCase","ParagraphNode","p","convertParagraphElement","textAlign","textIndent","_","parseInt","$isParagraphNode","COMMAND_PRIORITY_EDITOR","COMMAND_PRIORITY_LOW","COMMAND_PRIORITY_NORMAL","COMMAND_PRIORITY_HIGH","COMMAND_PRIORITY_CRITICAL","prevRootElement","nextRootElement","keyNodeMap","initializeConversionCache","conversionCache","handledConversions","bind","keys","currentCache","createEditor","parentEditor","disableEvents","namespace","initialEditorState","onError","editable","replacementClass","replacementKlass","with","withKlass","proto","prototype","method","hasOwnProperty","console","warn","replaceWithKlass","LexicalEditor","htmlConversions","textcontent","_htmlConversions","registerUpdateListener","listenerSetOrMap","registerEditableListener","registerDecoratorListener","registerTextContentListener","registerRootListener","registerCommand","commandsMap","listenersInPriorityOrder","String","registerMutationListener","registerNodeTransformToKlass","registerNodeTransform","registeredReplaceWithNode","hasNodes","getDecorators","setRootElement","userSelect","whiteSpace","wordBreak","setEditorState","maybeStringifiedEditorState","JSON","parse","defaultSelection","blur","setEditable","getColSpan","setColSpan","getRowSpan","setRowSpan","DEPRECATED_GridNode","DEPRECATED_GridRowNode","exports","$normalizeSelection__EXPERIMENTAL"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/lexical/Lexical.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction createCommand(type) {\n  return {\n    type\n  } ;\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3; // Reconciling\n\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2; // Text node modes\n\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2; // IS_INERT = 3\n// Text node formatting\n\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT; // Text node details\n\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1; // Element node formatting\n\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6; // Reconciliation\n\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b'; // For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\n\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n'; // For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\n\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF'; // eslint-disable-next-line no-misleading-character-class\n\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']'); // eslint-disable-next-line no-misleading-character-class\n\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcesssingMutations() {\n  return isProcessingMutations;\n}\n\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\n\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\n\nfunction isManagedLineBreak(dom, target, editor) {\n  return (// @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom || // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\n\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\n\nfunction handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n\n  const text = target.nodeValue;\n\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\n\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\n\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement(); // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            handleTextMutation( // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true; // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n\n          const addedDOMs = mutation.addedNodes;\n\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      } // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n\n\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n\n              if (correctDOM === null) {\n                continue;\n              }\n\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      } // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n\n\n      const records = observer.takeRecords(); // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        } // Clear any of those removal mutations\n\n\n        observer.takeRecords();\n      }\n\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction flushRootMutations(editor) {\n  const observer = editor._observer;\n\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet keyCounter = 1;\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n\n  if (activeElement === null) {\n    return false;\n  }\n\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' && // @ts-ignore iternal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) && // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n\n    if (editor != null) {\n      return editor;\n    }\n\n    currentNode = getParentElement(currentNode);\n  }\n\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\n\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\n\nfunction getDOMTextNode(element) {\n  let node = element;\n\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n\n    node = node.firstChild;\n  }\n\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  const isStateFlagPresent = format & activeFormat;\n\n  if (isStateFlagPresent && (alignWithFormat === null || (alignWithFormat & activeFormat) === 0)) {\n    // Remove the state flag.\n    return format ^ activeFormat;\n  }\n\n  if (alignWithFormat === null || alignWithFormat & activeFormat) {\n    // Add the state flag.\n    return format | activeFormat;\n  }\n\n  return format;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    node.__key = existingKey;\n    return;\n  }\n\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n\n  editorState._nodeMap.set(key, node); // TODO Split this function into leaf/element\n\n\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n\n  editor._cloneNotNeeded.add(key);\n\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\n\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n\n    const node = nodeMap.get(nextParentKey);\n\n    if (node === undefined) {\n      break;\n    }\n\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\n\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling(); // TODO: this function duplicates a bunch of operations, can be simplified.\n\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n\n      writableNode.__prev = null;\n    }\n\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n\n      writableNode.__next = null;\n    }\n\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n} // Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\n\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n\n  const node = editorState._nodeMap.get(key);\n\n  if (node === undefined) {\n    return null;\n  }\n\n  return node;\n}\nfunction getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor(); // @ts-ignore We intentionally add this to the Node.\n\n  const key = dom[`__lexicalKey_${editor._key}`];\n\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n\n  while (dom != null) {\n    const node = getNodeFromDOMNode(dom, editorState);\n\n    if (node !== null) {\n      return node;\n    }\n\n    dom = getParentElement(dom);\n  }\n\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n\n    if (editorState.isEmpty()) {\n      return;\n    }\n\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n\n    const nodeMap = editorState._nodeMap;\n\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n\n    selection.dirty = true;\n    selection._cachedNodes = null;\n  }\n\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  flushRootMutations(editor);\n}\nfunction getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n\n    return null;\n  }\n\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\n\nfunction getNodeKeyFromDOM( // Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n\n    if (key !== undefined) {\n      return key;\n    }\n\n    node = getParentElement(node);\n  }\n\n  return null;\n}\n\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n\n  if (domSelection === null) {\n    return;\n  }\n\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n\n    if (textContent !== null && $isTextNode(node)) {\n      if (node.canContainTabs()) {\n        const hasTabCharacter = textContent.includes('\\t'); // At present, this condition is primarily used for code highlights when\n        // grouped together in lines (divs). If a code highlight includes a tab,\n        // the newly typed character may be missing from the DOM's textContent.\n        // Let's take an example. If a LinedCodeNode looked roughly like this:\n        // <code><div><codeHighlight /><codeHighlight /></div></code>,\n        // the following could occur when using tabs:\n        // a. /tconst --type--> 'd' at offset 1 --get--> /tconst\n        //    - Missing 'd'\n        // b. /tconst --type--> 'd' at offset 3 --get--> /tcondst\n        //    --type--> 'd' at offset 3 --get--> /tcondst\n        //    - Missing second 'd'\n        // In these cases, we can fix the problem by manually inserting the\n        // newly typed character where we know it should have been.\n\n        if (data && data.length > 0 && hasTabCharacter) {\n          const selectionOffset = data.length;\n          const insertionOffset = anchorOffset + selectionOffset - 1;\n          const beforeInsertion = textContent.slice(0, insertionOffset);\n          const afterInsertion = textContent.slice(insertionOffset, textContent.length);\n          textContent = `${beforeInsertion}${data}${afterInsertion}`;\n          anchorOffset += selectionOffset;\n          focusOffset += selectionOffset;\n        }\n      } // Data is intentionally truthy, as we check for boolean, null and empty string.\n\n\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n\n    const prevTextContent = node.getTextContent();\n\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n\n        return;\n      }\n\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing || // Check if character was added at the start, and we need\n      // to clear this input from occurring as that action wasn't\n      // permitted.\n      parent !== null && $isRangeSelection(prevSelection) && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0) {\n        node.markDirty();\n        return;\n      }\n\n      const selection = $getSelection();\n\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\n\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n} // This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\n\n\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(keyCode, altKey, ctrlKey, metaKey) {\n  return keyCode === 9 && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 66 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 73 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 85 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(keyCode, shiftKey) {\n  return isReturn(keyCode) && !shiftKey;\n}\nfunction isLineBreak(keyCode, shiftKey) {\n  return isReturn(keyCode) && shiftKey;\n} // Inserts a new line after the selection\n\nfunction isOpenLineBreak(keyCode, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && keyCode === 79;\n}\nfunction isDeleteWordBackward(keyCode, altKey, ctrlKey) {\n  return isBackspace(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(keyCode, altKey, ctrlKey) {\n  return isDelete(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(keyCode);\n}\nfunction isDeleteLineForward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isDelete(keyCode);\n}\nfunction isDeleteBackward(keyCode, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n\n    return isBackspace(keyCode) || keyCode === 72 && ctrlKey;\n  }\n\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n\n  return isBackspace(keyCode);\n}\nfunction isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n\n    return isDelete(keyCode) || keyCode === 68 && ctrlKey;\n  }\n\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n\n  return isDelete(keyCode);\n}\nfunction isUndo(keyCode, shiftKey, metaKey, ctrlKey) {\n  return keyCode === 90 && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return keyCode === 90 && metaKey && shiftKey;\n  }\n\n  return keyCode === 89 && ctrlKey || keyCode === 90 && ctrlKey && shiftKey;\n}\nfunction isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n\n  if (keyCode === 67) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n\n  return false;\n}\nfunction isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n\n  if (keyCode === 88) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n\n  return false;\n}\n\nfunction isArrowLeft(keyCode) {\n  return keyCode === 37;\n}\n\nfunction isArrowRight(keyCode) {\n  return keyCode === 39;\n}\n\nfunction isArrowUp(keyCode) {\n  return keyCode === 38;\n}\n\nfunction isArrowDown(keyCode) {\n  return keyCode === 40;\n}\n\nfunction isMoveBackward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(keyCode, ctrlKey, metaKey) {\n  return isArrowUp(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(keyCode, ctrlKey, metaKey) {\n  return isArrowDown(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(keyCode) {\n  return keyCode === 32;\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n\n  return ctrlKey;\n}\nfunction isReturn(keyCode) {\n  return keyCode === 13;\n}\nfunction isBackspace(keyCode) {\n  return keyCode === 8;\n}\nfunction isEscape(keyCode) {\n  return keyCode === 27;\n}\nfunction isDelete(keyCode) {\n  return keyCode === 46;\n}\nfunction isSelectAll(keyCode, metaKey, ctrlKey) {\n  return keyCode === 65 && controlOrMeta(metaKey, ctrlKey);\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  const classNames = classNamesTheme[classNameThemeType]; // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n\n  if (typeof classNames === 'string') {\n    const classNamesArr = classNames.split(' ');\n    classNamesTheme[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n\n  const prevMutation = mutatedNodesByType.get(nodeKey); // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n\n  return nodesOfType;\n}\n\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\n\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n\n      return possibleNode;\n    }\n  }\n\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n\n  if (defaultView === null) {\n    return;\n  }\n\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n\n    let diff = 0;\n\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n\n    if (isBodyElement) {\n      break;\n    }\n\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode, offset = 0) {\n  if (offset !== 0) {\n    {\n      throw Error(`TODO`);\n    }\n  }\n\n  const selection = $getSelection();\n\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n\n    parent = parent.getParent();\n  }\n\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n\n    parent = parent.getParentOrThrow();\n  }\n\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  // @ts-ignore\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n\n  const registeredNode = editor._nodes.get(nodeType);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n\n  const replaceFunc = registeredNode.replace;\n\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n\n    return replacementNode;\n  }\n\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\n\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = blockCursorTheme.split(' '); // @ts-expect-error: intentional\n\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n\n  return element;\n}\n\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\n\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n\n      rootElement.style.caretColor = 'transparent';\n\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n\n      return;\n    }\n  } // Remove cursor\n\n\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n\n  if (startNode == null) {\n    startNode = node;\n  }\n\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent); // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n\n    if (isParentRoot) {\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\nfunction $findMatchingParent(startingNode, findFn) {\n  let curr = startingNode;\n\n  while (curr !== $getRoot() && curr != null) {\n    if (findFn(curr)) {\n      return curr;\n    }\n\n    curr = curr.getParent();\n  }\n\n  return null;\n}\nfunction $getChildrenRecursively(node) {\n  const nodes = [];\n  const stack = [node];\n\n  while (stack.length > 0) {\n    const currentNode = stack.pop();\n\n    if (!(currentNode !== undefined)) {\n      throw Error(`Stack.length > 0; can't be undefined`);\n    }\n\n    if ($isElementNode(currentNode)) {\n      stack.unshift(...currentNode.getChildren());\n    }\n\n    if (currentNode !== node) {\n      nodes.push(currentNode);\n    }\n  }\n\n  return nodes;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n\n      delete decorators[key];\n    }\n  }\n}\n\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, dirtyNodes) {\n  let child = node.getFirstChild();\n\n  while (child !== null) {\n    const childKey = child.__key;\n\n    if (child !== undefined && child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, dirtyNodes);\n      } // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n\n\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n\n      nodeMap.delete(childKey);\n    }\n\n    child = child.isAttached() ? child.getNextSibling() : null;\n  }\n}\n\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n\n      nodeMap.delete(nodeKey);\n    }\n  }\n\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, dirtyElements);\n        } // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n\n\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n\n        nodeMap.delete(nodeKey);\n      }\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\n\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\n\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  } // Backward\n\n\n  let previousNode;\n\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  } // Forward\n\n\n  let nextNode;\n\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\n\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\n\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  } // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n\n\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\n\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\n\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\n\nconst DEFAULT_INDENT_VALUE = '40px';\n\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\n\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\n\nfunction createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1); // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      createChildrenWithDirection(children, endIndex, node, dom);\n    }\n\n    const format = node.__format;\n\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      } // Decorators are always non editable\n\n\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\n\nfunction createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\n\nfunction createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n\n  for (; startIndex <= endIndex; ++startIndex) {\n    createNode(children[startIndex], dom, insertDOM);\n  }\n\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  } // @ts-expect-error: internal field\n\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\n\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n} // If we end an element with a LineBreakNode, then we need to add an additional <br>\n\n\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n\n      if (element != null) {\n        dom.removeChild(element);\n      } // @ts-expect-error: internal field\n\n\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br'); // @ts-expect-error: internal field\n\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\n\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent = // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent; // @ts-expect-error: internal field\n\n  const previousDirection = dom.__lexicalDir;\n\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined; // Remove the old theme classes if they exist\n\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = previousDirectionTheme.split(' ');\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        } // @ts-ignore: intentional\n\n\n        classList.remove(...previousDirectionTheme);\n      }\n\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = nextDirectionTheme.split(' '); // @ts-expect-error: intentional\n\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        } // Update direction\n\n\n        dom.dir = direction;\n      }\n\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n\n    activeTextDirection = direction; // @ts-expect-error: internal field\n\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent; // @ts-expect-error: internal field\n\n    dom.__lexicalDir = direction;\n  }\n}\n\nfunction reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\n\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n\n  return children;\n}\n\nfunction reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n\n    if (prevFirstChildKey === nextFrstChildKey) {\n      reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  } // @ts-expect-error: internal field\n\n\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\n\nfunction reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key); // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      } // @ts-expect-error: internal field\n\n\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n\n    return dom;\n  } // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n\n\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  } // Update node. If it returns true, we need to unmount and re-create the node\n\n\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = createNode(key, null, null);\n\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n\n    const nextFormat = nextNode.__format;\n\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n\n    if (isDirty) {\n      reconcileChildrenWithDirection(prevNode, nextNode, dom);\n\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    nextNode = nextNode.getWritable();\n    nextNode.__cachedText = editorTextContent;\n  }\n\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n\n  return dom;\n}\n\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n\n  pendingDecorators[key] = decorator;\n}\n\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\n\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n\n  return nextSibling;\n}\n\nfunction reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n\n          reconcileNode(nextKey, dom);\n        }\n\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n  }\n\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\n\nfunction reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = ''; // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap); // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  reconcileNode('root', null); // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n\n  activeEditor$1 = undefined; // @ts-ignore\n\n  activeEditorNodes = undefined; // @ts-ignore\n\n  activeDirtyElements = undefined; // @ts-ignore\n\n  activeDirtyLeaves = undefined; // @ts-ignore\n\n  activePrevNodeMap = undefined; // @ts-ignore\n\n  activeNextNodeMap = undefined; // @ts-ignore\n\n  activeEditorConfig = undefined; // @ts-ignore\n\n  activePrevKeyToDOMMap = undefined; // @ts-ignore\n\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap; // @ts-ignore We intentionally add this to the Node.\n\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\n\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\n\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\n\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = 0;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nlet rootElementsRegistered = 0;\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0]; // This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key || // If we're working with a non-text node.\n  !$isTextNode(anchorNode) || // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT || // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() || // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) || // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 || // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) || // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) || // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style || // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\n\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\n\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false; // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n\n    const selection = $getSelection(); // Update the selection format\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        } // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n\n\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element') {\n            selection.format = 0;\n            selection.style = '';\n          }\n        }\n      } else {\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n\n          if ($isTextNode(node)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n} // This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\n\n\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n\n      if (domSelection && anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n        domSelection.removeAllRanges();\n        selection.dirty = true;\n      }\n    }\n\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\n\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\n\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n\n  const targetRanges = event.getTargetRanges();\n\n  if (targetRanges.length === 0) {\n    return null;\n  }\n\n  return targetRanges[0];\n}\n\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\n\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 229 && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\n\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event); // We let the browser do its own thing for composition.\n\n  if (inputType === 'deleteCompositionText' || // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n\n        $setSelection(prevSelection.clone());\n      }\n\n      if ($isRangeSelection(selection)) {\n        // Used for handling backspace in Android.\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && selection.anchor.key === selection.focus.key) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0; // Fixes an Android bug where selection flickers when backspacing\n\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          }\n        } else {\n          event.preventDefault();\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n        }\n\n        return;\n      }\n    }\n\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n\n    const data = event.data; // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    } // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n\n\n    event.preventDefault();\n\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null); // Some browsers do not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n\n          if (isInsertLineBreak) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n\n          break;\n        }\n\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          }\n\n          break;\n        }\n\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, undefined);\n          break;\n        }\n\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n\n    }\n  });\n}\n\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n\n      if (domSelection === null) {\n        return;\n      }\n\n      const offset = anchor.offset; // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, offset) + data + anchorNode.getTextContent().slice(offset + selection.focus.offset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n\n      const textLength = data.length; // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      } // This ensures consistency on Android.\n\n\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData); // onInput always fires after onCompositionEnd for FF.\n\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    } // Also flush any other mutations that might have occurred\n    // since the change.\n\n\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\n\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n\n      if ( // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY || // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\n\nfunction onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null); // Handle termination of composition.\n\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n\n      return;\n    } // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n\n\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n\n  $updateSelectedTextFromDOM(true, editor, data);\n}\n\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\n\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.keyCode;\n\n  if (editor.isComposing()) {\n    return;\n  }\n\n  const {\n    keyCode,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n\n  if (isMoveForward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(keyCode, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(keyCode)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(keyCode, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(keyCode, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(keyCode, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(keyCode)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(keyCode)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(keyCode)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(keyCode, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(keyCode, metaKey, ctrlKey)) {\n        event.preventDefault();\n        editor.update(() => {\n          const root = $getRoot();\n          root.select(0, root.getChildrenSize());\n        });\n      }\n    }\n  }\n\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\n\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n\n  if (eventHandles === undefined) {\n    eventHandles = []; // @ts-expect-error: internal field\n\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n\n  return eventHandles;\n} // Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\n\n\nconst activeNestedEditorsMap = new Map();\n\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n\n  if (domSelection === null) {\n    return;\n  }\n\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n\n  if (nextActiveEditor === null) {\n    return;\n  }\n\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n\n      if (domAnchorNode === null) {\n        return;\n      }\n\n      const nodeType = domAnchorNode.nodeType; // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n\n      const newSelection = internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor);\n      $setSelection(newSelection);\n    });\n  } // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n\n\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n\n  onSelectionChange(domSelection, nextActiveEditor, true); // If newly selected editor is nested, then add it to the map, clean map otherwise\n\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\n\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\n\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\n\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  if (rootElementsRegistered === 0) {\n    const doc = rootElement.ownerDocument;\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n\n  rootElementsRegistered++; // @ts-expect-error: internal field\n\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n\n      stopLexicalPropagation(event);\n\n      if (editor.isEditable()) {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n\n      stopLexicalPropagation(event);\n\n      if (editor.isEditable()) {\n        switch (eventName) {\n          case 'cut':\n            return dispatchCommand(editor, CUT_COMMAND, event);\n\n          case 'copy':\n            return dispatchCommand(editor, COPY_COMMAND, event);\n\n          case 'paste':\n            return dispatchCommand(editor, PASTE_COMMAND, event);\n\n          case 'dragstart':\n            return dispatchCommand(editor, DRAGSTART_COMMAND, event);\n\n          case 'dragover':\n            return dispatchCommand(editor, DRAGOVER_COMMAND, event);\n\n          case 'dragend':\n            return dispatchCommand(editor, DRAGEND_COMMAND, event);\n\n          case 'focus':\n            return dispatchCommand(editor, FOCUS_COMMAND, event);\n\n          case 'blur':\n            {\n              return dispatchCommand(editor, BLUR_COMMAND, event);\n            }\n\n          case 'drop':\n            return dispatchCommand(editor, DROP_COMMAND, event);\n        }\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  if (rootElementsRegistered !== 0) {\n    rootElementsRegistered--; // We only want to have a single global selectionchange event handler, shared\n    // between all editor instances.\n\n    if (rootElementsRegistered === 0) {\n      const doc = rootElement.ownerDocument;\n      doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n    }\n  } // @ts-expect-error: internal field\n\n\n  const editor = rootElement.__lexicalEditor;\n\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor); // @ts-expect-error: internal field\n\n    rootElement.__lexicalEditor = null;\n  }\n\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  } // @ts-expect-error: internal field\n\n\n  rootElement.__lexicalEventHandles = [];\n}\n\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\n\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n\n  if (parent === null) {\n    return;\n  }\n\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  }\n\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    removeNode(parent, restoreSelection);\n  }\n\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n\n\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  constructor(key) {\n    // @ts-expect-error\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, // @ts-expect-error\n        this.constructor);\n      }\n    }\n  } // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n\n\n  getType() {\n    return this.__type;\n  }\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n\n\n  isAttached() {\n    let nodeKey = this.__key;\n\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n\n      const node = $getNodeByKey(nodeKey);\n\n      if (node === null) {\n        break;\n      }\n\n      nodeKey = node.__parent;\n    }\n\n    return false;\n  }\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n\n\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n\n    if (targetSelection == null) {\n      return false;\n    }\n\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n\n    if ($isTextNode(this)) {\n      return isSelected;\n    } // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n\n\n    if ($isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element' && targetSelection.anchor.key === targetSelection.focus.key && targetSelection.anchor.offset === targetSelection.focus.offset) {\n      return false;\n    }\n\n    return isSelected;\n  }\n  /**\n   * Returns this nodes key.\n   */\n\n\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n\n\n  getIndexWithinParent() {\n    const parent = this.getParent();\n\n    if (parent === null) {\n      return -1;\n    }\n\n    let node = parent.getFirstChild();\n    let index = 0;\n\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n\n      index++;\n      node = node.getNextSibling();\n    }\n\n    return -1;\n  }\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n\n\n  getParent() {\n    const parent = this.getLatest().__parent;\n\n    if (parent === null) {\n      return null;\n    }\n\n    return $getNodeByKey(parent);\n  }\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n\n\n  getParentOrThrow() {\n    const parent = this.getParent();\n\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n\n    return parent;\n  }\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n\n\n  getTopLevelElement() {\n    let node = this;\n\n    while (node !== null) {\n      const parent = node.getParent();\n\n      if ($isRootOrShadowRoot(parent)) {\n        return node;\n      }\n\n      node = parent;\n    }\n\n    return null;\n  }\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n\n\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n\n    return parent;\n  }\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n\n\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n\n    return parents;\n  }\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n\n\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n\n    return parents;\n  }\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n\n\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n\n\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n\n    if (parent === null) {\n      return siblings;\n    }\n\n    let node = parent.getFirstChild();\n\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n\n    return siblings;\n  }\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n\n\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n\n\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n\n    return siblings;\n  }\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n\n\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n\n    const bSet = new Set(b);\n\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n\n\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n\n    return this.__key === object.__key;\n  }\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n\n\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n\n    while (true) {\n      const parent = node.getParentOrThrow();\n\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n\n      node = parent;\n    }\n\n    node = targetNode;\n\n    while (true) {\n      const parent = node.getParentOrThrow();\n\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n\n      node = parent;\n    }\n\n    return indexA < indexB;\n  }\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n\n\n  isParentOf(targetNode) {\n    const key = this.__key;\n\n    if (key === targetNode.__key) {\n      return false;\n    }\n\n    let node = targetNode;\n\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n\n      node = node.getParent();\n    }\n\n    return false;\n  } // TO-DO: this function can be simplified a lot\n\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n\n\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n\n    while (true) {\n      const key = node.__key;\n\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n\n      if (node === targetNode) {\n        break;\n      }\n\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n\n      const parent = node.getParentOrThrow();\n\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n\n      if (parent === targetNode) {\n        break;\n      }\n\n      let parentSibling = null;\n      let ancestor = parent;\n\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        }\n      } while (parentSibling === null);\n\n      node = parentSibling;\n    }\n\n    if (!isBefore) {\n      nodes.reverse();\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n\n\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n\n\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n\n    return latest;\n  }\n  /**\n   * Returns a mutable version of the node. Will throw an error if\n   * called outside of a Lexical Editor {@link LexicalEditor.update} callback.\n   *\n   */\n\n\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key; // Ensure we get the latest node from pending state\n\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n\n    if (selection !== null) {\n      selection._cachedNodes = null;\n    }\n\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n\n    const constructor = latestNode.constructor; // @ts-expect-error\n\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode); // Update reference in node map\n\n    nodeMap.set(key, mutableNode);\n    return mutableNode;\n  }\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n\n\n  getTextContent() {\n    return '';\n  }\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n\n\n  getTextContentSize() {\n    return this.getTextContent().length;\n  } // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n\n\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n\n\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n\n\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n\n\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n\n\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n\n\n  static transform() {\n    return null;\n  } // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n\n\n  remove(preserveEmptyParent) {\n    removeNode(this, true, preserveEmptyParent);\n  }\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n\n\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) selection = selection.clone();\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    removeNode(self, false, true);\n\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n\n    writableReplaceWith.__prev = prevKey;\n\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n\n    if (includeChildren) {\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n\n    return writableReplaceWith;\n  }\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n\n\n  insertAfter(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n\n    return nodeToInsert;\n  }\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n\n\n  insertBefore(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev; // TODO: this is O(n), can we improve?\n\n    const index = this.getIndexWithinParent();\n\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n\n    return nodeToInsert;\n  }\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n\n\n  isParentRequired() {\n    return false;\n  }\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n\n\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n\n\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n\n\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n\n    if (nextSibling === null) {\n      return parent.select();\n    }\n\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n\n\n  markDirty() {\n    this.getWritable();\n  }\n\n}\n\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type); // Common error - split in its own invariant\n\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n\n  const editorKlass = registeredNode.klass;\n\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n\n    return aNode.isBefore(bNode);\n  }\n\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n\n    return node;\n  }\n\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n\n      if (selection !== null) {\n        selection._cachedNodes = null;\n        selection.dirty = true;\n      }\n    }\n  }\n\n}\n\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\n\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n\n  point.set(key, offset, type);\n}\n\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\n\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  } // Transfer the element point to a text point.\n\n\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n\n  start.set(textNode.__key, 0, 'text');\n}\n\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\n\nclass NodeSelection {\n  constructor(objects) {\n    this.dirty = false;\n    this._nodes = objects;\n    this._cachedNodes = null;\n  }\n\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n\n  add(key) {\n    this.dirty = true;\n\n    this._nodes.add(key);\n\n    this._cachedNodes = null;\n  }\n\n  delete(key) {\n    this.dirty = true;\n\n    this._nodes.delete(key);\n\n    this._cachedNodes = null;\n  }\n\n  clear() {\n    this.dirty = true;\n\n    this._nodes.clear();\n\n    this._cachedNodes = null;\n  }\n\n  has(key) {\n    return this._nodes.has(key);\n  }\n\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n\n  extract() {\n    return this.getNodes();\n  }\n\n  insertRawText(text) {// Do nothing?\n  }\n\n  insertText() {// Do nothing?\n  }\n\n  insertNodes(nodes, selectStart) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd; // Insert nodes\n\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n\n    selectionAtEnd.insertNodes(nodes, selectStart); // Remove selected nodes\n\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n\n    return true;\n  }\n\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n\n    const objects = this._nodes;\n    const nodes = [];\n\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n\n    return nodes;\n  }\n\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n\n    return textContent;\n  }\n\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass GridSelection {\n  constructor(gridKey, anchor, focus) {\n    this.gridKey = gridKey;\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n\n  is(selection) {\n    if (!DEPRECATED_$isGridSelection(selection)) {\n      return false;\n    }\n\n    return this.gridKey === selection.gridKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n\n  set(gridKey, anchorCellKey, focusCellKey) {\n    this.dirty = true;\n    this.gridKey = gridKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n\n  clone() {\n    return new GridSelection(this.gridKey, this.anchor, this.focus);\n  }\n\n  isCollapsed() {\n    return false;\n  }\n\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n\n  extract() {\n    return this.getNodes();\n  }\n\n  insertRawText(text) {// Do nothing?\n  }\n\n  insertText() {// Do nothing?\n  }\n\n  insertNodes(nodes, selectStart) {\n    const focusNode = this.focus.getNode();\n    const selection = $normalizeSelection(focusNode.select(0, focusNode.getChildrenSize()));\n    return selection.insertNodes(nodes, selectStart);\n  } // TODO Deprecate this method. It's confusing when used with colspan|rowspan\n\n\n  getShape() {\n    const anchorCellNode = $getNodeByKey(this.anchor.key);\n\n    if (!(anchorCellNode !== null)) {\n      throw Error(`getNodes: expected to find AnchorNode`);\n    }\n\n    const anchorCellNodeIndex = anchorCellNode.getIndexWithinParent();\n    const anchorCelRoweIndex = anchorCellNode.getParentOrThrow().getIndexWithinParent();\n    const focusCellNode = $getNodeByKey(this.focus.key);\n\n    if (!(focusCellNode !== null)) {\n      throw Error(`getNodes: expected to find FocusNode`);\n    }\n\n    const focusCellNodeIndex = focusCellNode.getIndexWithinParent();\n    const focusCellRowIndex = focusCellNode.getParentOrThrow().getIndexWithinParent();\n    const startX = Math.min(anchorCellNodeIndex, focusCellNodeIndex);\n    const stopX = Math.max(anchorCellNodeIndex, focusCellNodeIndex);\n    const startY = Math.min(anchorCelRoweIndex, focusCellRowIndex);\n    const stopY = Math.max(anchorCelRoweIndex, focusCellRowIndex);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n\n    const anchorNode = this.anchor.getNode();\n    const focusNode = this.focus.getNode();\n    const anchorCell = $findMatchingParent(anchorNode, DEPRECATED_$isGridCellNode); // todo replace with triplet\n\n    const focusCell = $findMatchingParent(focusNode, DEPRECATED_$isGridCellNode);\n\n    if (!DEPRECATED_$isGridCellNode(anchorCell)) {\n      throw Error(`Expected GridSelection anchor to be (or a child of) GridCellNode`);\n    }\n\n    if (!DEPRECATED_$isGridCellNode(focusCell)) {\n      throw Error(`Expected GridSelection focus to be (or a child of) GridCellNode`);\n    }\n\n    const anchorRow = anchorCell.getParent();\n\n    if (!DEPRECATED_$isGridRowNode(anchorRow)) {\n      throw Error(`Expected anchorCell to have a parent GridRowNode`);\n    }\n\n    const gridNode = anchorRow.getParent();\n\n    if (!DEPRECATED_$isGridNode(gridNode)) {\n      throw Error(`Expected tableNode to have a parent GridNode`);\n    } // TODO Mapping the whole Grid every time not efficient. We need to compute the entire state only\n    // once (on load) and iterate on it as updates occur. However, to do this we need to have the\n    // ability to store a state. Killing GridSelection and moving the logic to the plugin would make\n    // this possible.\n\n\n    const [map, cellAMap, cellBMap] = DEPRECATED_$computeGridMap(gridNode, anchorCell, focusCell);\n    let minColumn = Math.min(cellAMap.startColumn, cellBMap.startColumn);\n    let minRow = Math.min(cellAMap.startRow, cellBMap.startRow);\n    let maxColumn = Math.max(cellAMap.startColumn + cellAMap.cell.__colSpan - 1, cellBMap.startColumn + cellBMap.cell.__colSpan - 1);\n    let maxRow = Math.max(cellAMap.startRow + cellAMap.cell.__rowSpan - 1, cellBMap.startRow + cellBMap.cell.__rowSpan - 1);\n    let exploredMinColumn = minColumn;\n    let exploredMinRow = minRow;\n    let exploredMaxColumn = minColumn;\n    let exploredMaxRow = minRow;\n\n    function expandBoundary(mapValue) {\n      const {\n        cell,\n        startColumn: cellStartColumn,\n        startRow: cellStartRow\n      } = mapValue;\n      minColumn = Math.min(minColumn, cellStartColumn);\n      minRow = Math.min(minRow, cellStartRow);\n      maxColumn = Math.max(maxColumn, cellStartColumn + cell.__colSpan - 1);\n      maxRow = Math.max(maxRow, cellStartRow + cell.__rowSpan - 1);\n    }\n\n    while (minColumn < exploredMinColumn || minRow < exploredMinRow || maxColumn > exploredMaxColumn || maxRow > exploredMaxRow) {\n      if (minColumn < exploredMinColumn) {\n        // Expand on the left\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const previousColumn = exploredMinColumn - 1;\n\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][previousColumn]);\n        }\n\n        exploredMinColumn = previousColumn;\n      }\n\n      if (minRow < exploredMinRow) {\n        // Expand on top\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const previousRow = exploredMinRow - 1;\n\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[previousRow][exploredMinColumn + i]);\n        }\n\n        exploredMinRow = previousRow;\n      }\n\n      if (maxColumn > exploredMaxColumn) {\n        // Expand on the right\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const nextColumn = exploredMaxColumn + 1;\n\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][nextColumn]);\n        }\n\n        exploredMaxColumn = nextColumn;\n      }\n\n      if (maxRow > exploredMaxRow) {\n        // Expand on the bottom\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const nextRow = exploredMaxRow + 1;\n\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[nextRow][exploredMinColumn + i]);\n        }\n\n        exploredMaxRow = nextRow;\n      }\n    }\n\n    const nodes = [gridNode];\n    let lastRow = null;\n\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minColumn; j <= maxColumn; j++) {\n        const {\n          cell\n        } = map[i][j];\n        const currentRow = cell.getParent();\n\n        if (!DEPRECATED_$isGridRowNode(currentRow)) {\n          throw Error(`Expected GridCellNode parent to be a GridRowNode`);\n        }\n\n        if (currentRow !== lastRow) {\n          nodes.push(currentRow);\n        }\n\n        nodes.push(cell, ...$getChildrenRecursively(cell));\n        lastRow = currentRow;\n      }\n    }\n\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n\n    return nodes;\n  }\n\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n\n    return textContent;\n  }\n\n}\nfunction DEPRECATED_$isGridSelection(x) {\n  return x instanceof GridSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    this.dirty = false;\n    this.format = format;\n    this.style = style;\n    this._cachedNodes = null;\n    anchor._selection = this;\n    focus._selection = this;\n  }\n\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset); // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n\n    let nodes;\n\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n\n    return nodes;\n  }\n\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  getTextContent() {\n    const nodes = this.getNodes();\n\n    if (nodes.length === 0) {\n      return '';\n    }\n\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n\n    return textContent;\n  }\n\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  insertRawText(text) {\n    const parts = text.split(/\\r?\\n/);\n\n    if (parts.length === 1) {\n      this.insertText(text);\n    } else {\n      const nodes = [];\n      const length = parts.length;\n\n      for (let i = 0; i < length; i++) {\n        const part = parts[i];\n\n        if (part !== '') {\n          nodes.push($createTextNode(part));\n        }\n\n        if (i !== length - 1) {\n          nodes.push($createLineBreakNode());\n        }\n      }\n\n      this.insertNodes(nodes);\n    }\n  }\n\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = this.isCollapsed() || anchor.isBefore(focus);\n    const format = this.format;\n    const style = this.style;\n\n    if (isBefore && anchor.type === 'element') {\n      $transferStartingElementPointToTextPoint(anchor, focus, format, style);\n    } else if (!isBefore && focus.type === 'element') {\n      $transferStartingElementPointToTextPoint(focus, anchor, format, style);\n    }\n\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const firstPoint = isBefore ? anchor : focus;\n    const endPoint = isBefore ? focus : anchor;\n    const startOffset = firstPoint.offset;\n    const endOffset = endPoint.offset;\n    let firstNode = selectedNodes[0];\n\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n\n      if (!$isTextNode(nextSibling) || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n\n      prevSibling.select();\n      firstNode = prevSibling;\n\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          } // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n\n\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n\n          return;\n        }\n      }\n\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]); // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode; // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      } // Handle mutations to the last node.\n\n\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n\n          lastNode = lastNode.spliceText(0, endOffset, '');\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      } // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n\n\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement); // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n\n          parent = parent.getParent();\n        }\n      } // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n\n\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      } // Remove all selected nodes that haven't already been removed.\n\n\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  removeText() {\n    this.insertText('');\n  }\n\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n\n    const selectedTextNodesLength = selectedTextNodes.length;\n\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType); // When changing format, we should stop composition\n\n      $setCompositionKey(null);\n      return;\n    }\n\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset; // In case selection started at the end of text node use next text node\n\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n\n    if (firstNode == null) {\n      return;\n    }\n\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize(); // Single node selected\n\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      } // The entire node is selected, so just format it\n\n\n      if (startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat); // Update selection only if starts/ends on text node\n\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n\n      this.format = firstNextFormat;\n      return;\n    } // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n\n\n    if (startOffset !== 0) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat); // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize()) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n\n      lastNode.setFormat(lastNextFormat);\n    } // Process all text nodes in between\n\n\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n\n      if (!textNode.isToken()) {\n        const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n        textNode.setFormat(nextFormat);\n      }\n    } // Update selection only if starts/ends on text node\n\n\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  insertNodes(nodes, selectStart) {\n    // If there is a range selected remove the text in it\n    if (!this.isCollapsed()) {\n      const selectionEnd = this.isBackward() ? this.anchor : this.focus;\n      const nextSibling = selectionEnd.getNode().getNextSibling();\n      const nextSiblingKey = nextSibling ? nextSibling.getKey() : null;\n      const prevSibling = selectionEnd.getNode().getPreviousSibling();\n      const prevSiblingKey = prevSibling ? prevSibling.getKey() : null;\n      this.removeText(); // If the selection has been moved to an adjacent inline element, create\n      // a temporary text node that we can insert the nodes after.\n\n      if (this.isCollapsed() && this.focus.type === 'element') {\n        let textNode;\n\n        if (this.focus.key === nextSiblingKey && this.focus.offset === 0) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertBefore(textNode);\n        } else if (this.focus.key === prevSiblingKey && this.focus.offset === this.focus.getNode().getChildrenSize()) {\n          textNode = $createTextNode();\n          this.focus.getNode().insertAfter(textNode);\n        }\n\n        if (textNode) {\n          this.focus.set(textNode.__key, 0, 'text');\n          this.anchor.set(textNode.__key, 0, 'text');\n        }\n      }\n    }\n\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    const anchorNode = anchor.getNode();\n    let target = anchorNode;\n\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n      const placementNode = element.getChildAtIndex(anchorOffset - 1);\n\n      if (placementNode === null) {\n        target = element;\n      } else {\n        target = placementNode;\n      }\n    }\n\n    const siblings = []; // Get all remaining text node siblings in this element so we can\n    // append them after the last node we're inserting.\n\n    const nextSiblings = anchorNode.getNextSiblings();\n    const topLevelElement = $isRootOrShadowRoot(anchorNode) ? null : anchorNode.getTopLevelElementOrThrow();\n\n    if ($isTextNode(anchorNode)) {\n      const textContent = anchorNode.getTextContent();\n      const textContentLength = textContent.length;\n\n      if (anchorOffset === 0 && textContentLength !== 0) {\n        const prevSibling = anchorNode.getPreviousSibling();\n\n        if (prevSibling !== null) {\n          target = prevSibling;\n        } else {\n          target = anchorNode.getParentOrThrow();\n        }\n\n        siblings.push(anchorNode);\n      } else if (anchorOffset === textContentLength) {\n        target = anchorNode;\n      } else if (anchorNode.isToken()) {\n        // Do nothing if we're inside a token node\n        return false;\n      } else {\n        // If we started with a range selected grab the danglingText after the\n        // end of the selection and put it on our siblings array so we can\n        // append it after the last node we're inserting\n        let danglingText;\n        [target, danglingText] = anchorNode.splitText(anchorOffset);\n        siblings.push(danglingText);\n      }\n    }\n\n    const startingNode = target;\n    siblings.push(...nextSiblings);\n    const firstNode = nodes[0];\n    let didReplaceOrMerge = false;\n    let lastNode = null; // Time to insert the nodes!\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      if (!$isRootOrShadowRoot(target) && !$isDecoratorNode(target) && $isElementNode(node) && !node.isInline()) {\n        // -----\n        // Heuristics for the replacement or merging of elements\n        // -----\n        // If we have an incoming element node as the first node, then we'll need\n        // see if we can merge any descendant leaf nodes into our existing target.\n        // We can do this by finding the first descendant in our node and then we can\n        // pluck it and its parent (siblings included) out and insert them directly\n        // into our target. We only do this for the first node, as we are only\n        // interested in merging with the anchor, which is our target.\n        //\n        // If we apply either the replacement or merging heuristics, we need to be\n        // careful that we're not trying to insert a non-element node into a root node,\n        // so we check if the target's parent after this logic is the root node and if\n        // so we trigger an invariant to ensure this problem is caught in development\n        // and fixed accordingly.\n        if (node.is(firstNode)) {\n          if ($isElementNode(target) && target.isEmpty() && target.canReplaceWith(node)) {\n            target.replace(node);\n            target = node;\n            didReplaceOrMerge = true;\n            continue;\n          } // We may have a node tree where there are many levels, for example with\n          // lists and tables. So let's find the first descendant to try and merge\n          // with. So if we have the target:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //\n          // and we are trying to insert:\n          //\n          // ListNode (3)\n          //   ListItemNode (4)\n          //     Text (5)\n          //   ListItemNode (6)\n          //\n          // The result would be:\n          //\n          // Paragraph (1)\n          //   Text (2)\n          //   Text (5)\n          //\n\n\n          const firstDescendant = node.getFirstDescendant();\n\n          if ($isLeafNode(firstDescendant)) {\n            let element = firstDescendant.getParentOrThrow();\n\n            while (element.isInline()) {\n              element = element.getParentOrThrow();\n            }\n\n            const children = element.getChildren();\n            const childrenLength = children.length;\n\n            if ($isElementNode(target)) {\n              let firstChild = target.getFirstChild();\n\n              for (let s = 0; s < childrenLength; s++) {\n                const child = children[s];\n\n                if (firstChild === null) {\n                  target.append(child);\n                } else {\n                  firstChild.insertAfter(child);\n                }\n\n                firstChild = child;\n              }\n            } else {\n              for (let s = childrenLength - 1; s >= 0; s--) {\n                target.insertAfter(children[s]);\n              }\n\n              target = target.getParentOrThrow();\n            }\n\n            lastNode = children[childrenLength - 1];\n            element.remove();\n            didReplaceOrMerge = true;\n\n            if (element.is(node)) {\n              continue;\n            }\n          }\n        }\n\n        if ($isTextNode(target)) {\n          if (topLevelElement === null) {\n            {\n              throw Error(`insertNode: topLevelElement is root node`);\n            }\n          }\n\n          target = topLevelElement;\n        }\n      } else if (didReplaceOrMerge && !$isElementNode(node) && !$isDecoratorNode(node) && $isRootOrShadowRoot(target.getParent())) {\n        {\n          throw Error(`insertNodes: cannot insert a non-element into a root node`);\n        }\n      }\n\n      didReplaceOrMerge = false;\n\n      if ($isElementNode(target) && !target.isInline()) {\n        lastNode = node;\n\n        if ($isDecoratorNode(node) && !node.isInline()) {\n          target = target.insertAfter(node, false);\n        } else if (!$isElementNode(node)) {\n          const firstChild = target.getFirstChild();\n\n          if (firstChild !== null) {\n            firstChild.insertBefore(node);\n          } else {\n            target.append(node);\n          }\n\n          target = node;\n        } else {\n          if (!node.canBeEmpty() && node.isEmpty()) {\n            continue;\n          }\n\n          if ($isRootNode(target)) {\n            const placementNode = target.getChildAtIndex(anchorOffset);\n\n            if (placementNode !== null) {\n              placementNode.insertBefore(node);\n            } else {\n              target.append(node);\n            }\n\n            target = node;\n          } else if (node.isInline()) {\n            target.append(node);\n            target = node;\n          } else {\n            target = target.insertAfter(node, false);\n          }\n        }\n      } else if (!$isElementNode(node) || $isElementNode(node) && node.isInline() || $isDecoratorNode(target) && !target.isInline()) {\n        lastNode = node; // when pasting top level node in the middle of paragraph\n        // we need to split paragraph instead of placing it inline\n\n        if ($isRangeSelection(this) && $isDecoratorNode(node) && ($isElementNode(target) || $isTextNode(target)) && !node.isInline()) {\n          let splitNode;\n          let splitOffset;\n\n          if ($isTextNode(target)) {\n            splitNode = target.getParentOrThrow();\n            const [textNode] = target.splitText(anchorOffset);\n            splitOffset = textNode.getIndexWithinParent() + 1;\n          } else {\n            splitNode = target;\n            splitOffset = anchorOffset;\n          }\n\n          const [, rightTree] = $splitNode(splitNode, splitOffset);\n          target = rightTree.insertBefore(node);\n        } else {\n          target = target.insertAfter(node, false);\n        }\n      } else {\n        const nextTarget = target.getParentOrThrow(); // if we're inserting an Element after a LineBreak, we want to move the target to the parent\n        // and remove the LineBreak so we don't have empty space.\n\n        if ($isLineBreakNode(target)) {\n          target.remove();\n        }\n\n        target = nextTarget; // Re-try again with the target being the parent\n\n        i--;\n        continue;\n      }\n    }\n\n    if (selectStart) {\n      // Handle moving selection to start for all nodes\n      if ($isTextNode(startingNode)) {\n        startingNode.select();\n      } else {\n        const prevSibling = target.getPreviousSibling();\n\n        if ($isTextNode(prevSibling)) {\n          prevSibling.select();\n        } else {\n          const index = target.getIndexWithinParent();\n          target.getParentOrThrow().select(index, index);\n        }\n      }\n    }\n\n    if ($isElementNode(target)) {\n      // If the last node to be inserted was a text node,\n      // then we should attempt to move selection to that.\n      const lastChild = $isTextNode(lastNode) ? lastNode : $isElementNode(lastNode) && lastNode.isInline() ? lastNode.getLastDescendant() : target.getLastDescendant();\n\n      if (!selectStart) {\n        // Handle moving selection to end for elements\n        if (lastChild === null) {\n          target.select();\n        } else if ($isTextNode(lastChild)) {\n          if (lastChild.getTextContent() === '') {\n            lastChild.selectPrevious();\n          } else {\n            lastChild.select();\n          }\n        } else {\n          lastChild.selectNext();\n        }\n      }\n\n      if (siblings.length !== 0) {\n        const originalTarget = target;\n\n        for (let i = siblings.length - 1; i >= 0; i--) {\n          const sibling = siblings[i];\n          const prevParent = sibling.getParentOrThrow();\n\n          if ($isElementNode(target) && !$isBlockElementNode(sibling) && !($isDecoratorNode(sibling) && ( // Note: We are only looking for decorators that are inline and not isolated.\n          !sibling.isInline() || sibling.isIsolated()))) {\n            if (originalTarget === target) {\n              target.append(sibling);\n            } else {\n              target.insertBefore(sibling);\n            }\n\n            target = sibling;\n          } else if (!$isElementNode(target) && !$isBlockElementNode(sibling)) {\n            target.insertBefore(sibling);\n            target = sibling;\n          } else {\n            if ($isElementNode(sibling) && !sibling.canInsertAfter(target)) {\n              // @ts-ignore The clone method does exist on the constructor.\n              const prevParentClone = prevParent.constructor.clone(prevParent);\n\n              if (!$isElementNode(prevParentClone)) {\n                {\n                  throw Error(`insertNodes: cloned parent clone is not an element`);\n                }\n              }\n\n              prevParentClone.append(sibling);\n              target.insertAfter(prevParentClone);\n            } else {\n              target.insertAfter(sibling);\n            }\n          } // Check if the prev parent is empty, as it might need\n          // removing.\n\n\n          if (prevParent.isEmpty() && !prevParent.canBeEmpty()) {\n            prevParent.remove();\n          }\n        }\n      }\n    } else if (!selectStart) {\n      // Handle moving selection to end for other nodes\n      if ($isTextNode(target)) {\n        target.select();\n      } else {\n        const element = target.getParentOrThrow();\n        const index = target.getIndexWithinParent() + 1;\n        element.select(index, index);\n      }\n    }\n\n    return true;\n  }\n\n  insertParagraph() {\n    if (!this.isCollapsed()) {\n      this.removeText();\n    }\n\n    const anchor = this.anchor;\n    const anchorOffset = anchor.offset;\n    let currentElement;\n    let nodesToMove = [];\n    let siblingsToMove = [];\n\n    if (anchor.type === 'text') {\n      const anchorNode = anchor.getNode();\n      nodesToMove = anchorNode.getNextSiblings().reverse();\n      currentElement = anchorNode.getParentOrThrow();\n      const isInline = currentElement.isInline();\n      const textContentLength = isInline ? currentElement.getTextContentSize() : anchorNode.getTextContentSize();\n\n      if (anchorOffset === 0) {\n        nodesToMove.push(anchorNode);\n      } else {\n        if (isInline) {\n          // For inline nodes, we want to move all the siblings to the new paragraph\n          // if selection is at the end, we just move the siblings. Otherwise, we also\n          // split the text node and add that and it's siblings below.\n          siblingsToMove = currentElement.getNextSiblings();\n        }\n\n        if (anchorOffset !== textContentLength) {\n          if (!isInline || anchorOffset !== anchorNode.getTextContentSize()) {\n            const [, splitNode] = anchorNode.splitText(anchorOffset);\n            nodesToMove.push(splitNode);\n          }\n        }\n      }\n    } else {\n      currentElement = anchor.getNode();\n\n      if ($isRootOrShadowRoot(currentElement)) {\n        const paragraph = $createParagraphNode();\n        const child = currentElement.getChildAtIndex(anchorOffset);\n        paragraph.select();\n\n        if (child !== null) {\n          child.insertBefore(paragraph, false);\n        } else {\n          currentElement.append(paragraph);\n        }\n\n        return;\n      }\n\n      nodesToMove = currentElement.getChildren().slice(anchorOffset).reverse();\n    }\n\n    const nodesToMoveLength = nodesToMove.length;\n\n    if (anchorOffset === 0 && nodesToMoveLength > 0 && currentElement.isInline()) {\n      const parent = currentElement.getParentOrThrow();\n      const newElement = parent.insertNewAfter(this, false);\n\n      if ($isElementNode(newElement)) {\n        const children = parent.getChildren();\n\n        for (let i = 0; i < children.length; i++) {\n          newElement.append(children[i]);\n        }\n      }\n\n      return;\n    }\n\n    const newElement = currentElement.insertNewAfter(this, false);\n\n    if (newElement === null) {\n      // Handle as a line break insertion\n      this.insertLineBreak();\n    } else if ($isElementNode(newElement)) {\n      // If we're at the beginning of the current element, move the new element to be before the current element\n      const currentElementFirstChild = currentElement.getFirstChild();\n      const isBeginning = anchorOffset === 0 && (currentElement.is(anchor.getNode()) || currentElementFirstChild && currentElementFirstChild.is(anchor.getNode()));\n\n      if (isBeginning && nodesToMoveLength > 0) {\n        currentElement.insertBefore(newElement);\n        return;\n      }\n\n      let firstChild = null;\n      const siblingsToMoveLength = siblingsToMove.length;\n      const parent = newElement.getParentOrThrow(); // For inline elements, we append the siblings to the parent.\n\n      if (siblingsToMoveLength > 0) {\n        for (let i = 0; i < siblingsToMoveLength; i++) {\n          const siblingToMove = siblingsToMove[i];\n          parent.append(siblingToMove);\n        }\n      }\n\n      if (nodesToMoveLength !== 0) {\n        for (let i = 0; i < nodesToMoveLength; i++) {\n          const nodeToMove = nodesToMove[i];\n\n          if (firstChild === null) {\n            newElement.append(nodeToMove);\n          } else {\n            firstChild.insertBefore(nodeToMove);\n          }\n\n          firstChild = nodeToMove;\n        }\n      }\n\n      if (!newElement.canBeEmpty() && newElement.getChildrenSize() === 0) {\n        newElement.selectPrevious();\n        newElement.remove();\n      } else {\n        newElement.selectStart();\n      }\n    }\n  }\n\n  insertLineBreak(selectStart) {\n    const lineBreakNode = $createLineBreakNode();\n    const anchor = this.anchor;\n\n    if (anchor.type === 'element') {\n      const element = anchor.getNode();\n\n      if ($isRootNode(element)) {\n        this.insertParagraph();\n      }\n    }\n\n    if (selectStart) {\n      this.insertNodes([lineBreakNode], true);\n    } else {\n      if (this.insertNodes([lineBreakNode])) {\n        lineBreakNode.selectNext(0, 0);\n      }\n    }\n  }\n\n  getCharacterOffsets() {\n    return getCharacterOffsets(this);\n  }\n\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = getCharacterOffsets(this);\n\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n\n      return [firstNode];\n    }\n\n    const isBefore = anchor.isBefore(focus);\n\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n\n    return selectedNodes;\n  }\n\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move'; // Handle the selection movement around decorators.\n\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n\n          if (!isBackward) {\n            offset++;\n          }\n        }\n\n        focus.set(elementKey, offset, 'element');\n\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n\n        return;\n      }\n    }\n\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n\n    if (!domSelection) {\n      return;\n    }\n\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement; // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    } // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n\n\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity); // Guard against no ranges\n\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0); // Apply the DOM selection to our Lexical selection.\n\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        } // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n\n\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n\n  deleteCharacter(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const focus = this.focus;\n      let anchorNode = anchor.getNode();\n\n      if (!isBackward && ( // Delete forward handle case\n      anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n        const parent = anchorNode.getParent();\n        const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n\n        if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n          return;\n        }\n      } // Handle the deletion around decorators.\n\n\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n        }\n\n        return;\n      }\n\n      this.modify('extend', isBackward, 'character');\n\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n\n    const wasCollapsed = this.isCollapsed();\n    this.removeText();\n\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      if (this.anchor.type === 'text') {\n        this.modify('extend', isBackward, 'lineboundary');\n      } // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n\n\n      const endPoint = isBackward ? this.focus : this.anchor;\n\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n    }\n\n    this.removeText();\n  }\n\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      this.modify('extend', isBackward, 'word');\n    }\n\n    this.removeText();\n  }\n\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\n\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n\n  if (point.type === 'text') {\n    return offset;\n  }\n\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\n\nfunction getCharacterOffsets(selection) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\n\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\n\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // @ts-expect-error Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\n\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\n\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n\n      break;\n    }\n  }\n\n  const nextTextContent = split.join('').trim();\n\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\n\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\n\nfunction internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode; // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false; // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length; // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n\n    if (childDOM === editor._blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (editor._blockCursorElement !== null) {\n      resolvedOffset--;\n    }\n\n    resolvedNode = getNodeFromDOM(childDOM);\n\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = getNodeFromDOM(dom); // Ensure resolvedElement is actually a element.\n\n      if (resolvedElement === null) {\n        return null;\n      }\n\n      if ($isElementNode(resolvedElement)) {\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n\n          if (descendant === null) {\n            resolvedElement = child;\n            resolvedOffset = 0;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n        }\n\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent(); // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = getNodeFromDOM(dom);\n  }\n\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\n\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize(); // @ts-expect-error: intentional\n\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0; // @ts-expect-error: intentional\n\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\n\nfunction normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus); // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n\n    const editor = getActiveEditor();\n\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\n\nfunction internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n\n  const resolvedAnchorPoint = internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n\n  const resolvedFocusPoint = internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = getNodeFromDOM(anchorDOM);\n    const focusNode = getNodeFromDOM(focusDOM); // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  } // Handle normalization of selection when it is at the boundaries.\n\n\n  normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\n\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n} // This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\n\nfunction internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction DEPRECATED_$createGridSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new GridSelection('root', anchor, focus);\n}\nfunction internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n\n  if ($isNodeSelection(lastSelection) || DEPRECATED_$isGridSelection(lastSelection)) {\n    return lastSelection.clone();\n  }\n\n  return internalCreateRangeSelection(lastSelection, domSelection, editor);\n}\nfunction internalCreateRangeSelection(lastSelection, domSelection, editor) {\n  const windowObj = editor._window;\n\n  if (windowObj === null) {\n    return null;\n  } // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n\n  const windowEvent = windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcesssingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  } // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n\n\n  const resolvedSelectionPoints = internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n\n  const parentKey = parentNode.__key; // Single node. We shift selection but never redimension it\n\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element'); // The new selection might point to text nodes, try to resolve them\n\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  } // The new selection might point to text nodes, try to resolve them\n\n\n  $updateSelectionResolveTextNodes(selection);\n}\n\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n\n    return;\n  }\n\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\n\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement; // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n\n    return;\n  }\n\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  } // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n\n\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  } // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n\n\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode && // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n\n    if (anchor.type !== 'element') {\n      return;\n    }\n  } // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n\n\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {// If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n  }\n\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n\n    if (selectionTarget !== null) {\n      let selectionRect;\n\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes, selectStart) {\n  let selection = $getSelection();\n\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n\n  return selection.insertNodes(nodes, selectStart);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n\n  if (selection === null) {\n    return '';\n  }\n\n  return selection.getTextContent();\n}\nfunction DEPRECATED_$computeGridMap(grid, cellA, cellB) {\n  const tableMap = [];\n  let cellAValue = null;\n  let cellBValue = null;\n\n  function write(startRow, startColumn, cell) {\n    const value = {\n      cell,\n      startColumn,\n      startRow\n    };\n    const rowSpan = cell.__rowSpan;\n    const colSpan = cell.__colSpan;\n\n    for (let i = 0; i < rowSpan; i++) {\n      if (tableMap[startRow + i] === undefined) {\n        tableMap[startRow + i] = [];\n      }\n\n      for (let j = 0; j < colSpan; j++) {\n        tableMap[startRow + i][startColumn + j] = value;\n      }\n    }\n\n    if (cellA.is(cell)) {\n      cellAValue = value;\n    }\n\n    if (cellB.is(cell)) {\n      cellBValue = value;\n    }\n  }\n\n  function isEmpty(row, column) {\n    return tableMap[row] === undefined || tableMap[row][column] === undefined;\n  }\n\n  const gridChildren = grid.getChildren();\n\n  for (let i = 0; i < gridChildren.length; i++) {\n    const row = gridChildren[i];\n\n    if (!DEPRECATED_$isGridRowNode(row)) {\n      throw Error(`Expected GridNode children to be GridRowNode`);\n    }\n\n    const rowChildren = row.getChildren();\n    let j = 0;\n\n    for (const cell of rowChildren) {\n      if (!DEPRECATED_$isGridCellNode(cell)) {\n        throw Error(`Expected GridRowNode children to be GridCellNode`);\n      }\n\n      while (!isEmpty(i, j)) {\n        j++;\n      }\n\n      write(i, j, cell);\n      j += cell.__colSpan;\n    }\n  }\n\n  if (!(cellAValue !== null)) {\n    throw Error(`Anchor not found in Grid`);\n  }\n\n  if (!(cellBValue !== null)) {\n    throw Error(`Focus not found in Grid`);\n  }\n\n  return [tableMap, cellAValue, cellBValue];\n}\nfunction DEPRECATED_$getNodeTriplet(source) {\n  let cell;\n\n  if (source instanceof DEPRECATED_GridCellNode) {\n    cell = source;\n  } else if (source instanceof LexicalNode) {\n    const cell_ = $findMatchingParent(source, DEPRECATED_$isGridCellNode);\n\n    if (!DEPRECATED_$isGridCellNode(cell_)) {\n      throw Error(`Expected to find a parent GridCellNode`);\n    }\n\n    cell = cell_;\n  } else {\n    const cell_ = $findMatchingParent(source.getNode(), DEPRECATED_$isGridCellNode);\n\n    if (!DEPRECATED_$isGridCellNode(cell_)) {\n      throw Error(`Expected to find a parent GridCellNode`);\n    }\n\n    cell = cell_;\n  }\n\n  const row = cell.getParent();\n\n  if (!DEPRECATED_$isGridRowNode(row)) {\n    throw Error(`Expected GridCellNode to have a parent GridRowNode`);\n  }\n\n  const grid = row.getParent();\n\n  if (!DEPRECATED_$isGridNode(grid)) {\n    throw Error(`Expected GridRowNode to have a parent GridNode`);\n  }\n\n  return [cell, row, grid];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n\n  const transformsArrLength = transformsArr.length;\n\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\n\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined && // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\n\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\n\n\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n\n        dirtyLeaves.add(nodeKey);\n      }\n\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size; // We want to prioritize node transforms over element transforms\n\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    } // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n\n\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n\n      const node = nodeMap.get(nodeKey);\n\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\n\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\n\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n\n  const nodeClass = registeredNode.klass;\n\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n\n  return node;\n}\n\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n\n    if (updateFn) {\n      updateFn();\n    } // Make the editorState immutable\n\n\n    editorState._readOnly = true;\n\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n\n  return editorState;\n} // This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\n\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\n\nfunction commitPendingUpdates(editor) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n\n  if (pendingEditorState === null) {\n    return;\n  } // ======\n  // Reconciliation has started.\n  // ======\n\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false; // We don't want updates to sync block the reconciliation.\n\n    editor._updating = true;\n\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      } // Reset editor and restore incoming editor state to the DOM\n\n\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        commitPendingUpdates(editor);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n\n      Object.freeze(pendingSelection);\n    }\n  }\n\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n\n    editor._cloneNotNeeded.clear();\n\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n\n  $garbageCollectDetachedDecorators(editor, pendingEditorState); // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window); // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n\n  if (editor._editable && // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, tags, dirtyLeaves);\n  }\n\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n\n\n  const pendingDecorators = editor._pendingDecorators;\n\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  triggerTextContentListeners(editor, currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  triggerEnqueuedUpdates(editor);\n}\n\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\n\nfunction triggerMutationListeners(editor, currentEditorState, pendingEditorState, mutatedNodes, updateTags, dirtyLeaves) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        updateTags\n      });\n    }\n  }\n}\n\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n\n  const editors = getEditorsToPropagate(editor);\n\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      beginUpdate(editor, updateFn, options);\n    }\n  }\n}\n\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\n\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false; // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n\n      nextUpdateFn();\n    }\n  }\n\n  return skipTransforms;\n}\n\nfunction beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection != null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = internalCreateSelection(editor);\n      }\n    }\n\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n\n    const endingCompositionKey = editor._compositionKey;\n\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n\n    const pendingSelection = pendingEditorState._selection;\n\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    } // Restore existing editor state to the DOM\n\n\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n\n    editor._cloneNotNeeded.clear();\n\n    editor._dirtyLeaves = new Set();\n\n    editor._dirtyElements.clear();\n\n    commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\n\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\n\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n\n  isIsolated() {\n    return false;\n  }\n\n  isInline() {\n    return true;\n  }\n\n  isKeyboardSelectable() {\n    return true;\n  }\n\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n\n    return children;\n  }\n\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n\n    return children;\n  }\n\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n\n      child = child.getNextSibling();\n    }\n\n    return textNodes;\n  }\n\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getFirstChild();\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      break;\n    }\n\n    return node;\n  }\n\n  getLastDescendant() {\n    let node = this.getLastChild();\n\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getLastChild();\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      break;\n    }\n\n    return node;\n  }\n\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length; // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n\n    return firstChild;\n  }\n\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n\n    return lastChild;\n  }\n\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n\n        node = node.getNextSibling();\n        i++;\n      }\n\n      return null;\n    }\n\n    node = this.getLastChild();\n    i = size - 1;\n\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n\n      node = node.getPreviousSibling();\n      i--;\n    }\n\n    return null;\n  }\n\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n\n    return textContent;\n  }\n\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n\n    return textContentSize;\n  }\n\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n\n    return false;\n  } // Mutators\n\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n\n    const key = this.__key;\n\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n\n    return selection;\n  }\n\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n\n    if ($isElementNode(firstNode) || $isTextNode(firstNode)) {\n      return firstNode.select(0, 0);\n    } // Decorator or LineBreak\n\n\n    if (firstNode !== null) {\n      return firstNode.selectPrevious();\n    }\n\n    return this.select(0, 0);\n  }\n\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      return lastNode.select();\n    } // Decorator or LineBreak\n\n\n    if (lastNode !== null) {\n      return lastNode.selectNext();\n    }\n\n    return this.select();\n  }\n\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n\n  append(...nodesToAppend) {\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n\n    let prevNode = nodeBeforeRange;\n\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n\n      const writableNodeToInsert = nodeToInsert.getWritable();\n\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      } // Set child parent to self\n\n\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n\n    writableSelf.__size = newSize; // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        } // Cleanup if node can't be empty\n\n\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n\n    return writableSelf;\n  } // JSON serialization\n\n\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  } // These are intended to be extends for specific element heuristics.\n\n\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n\n  canInsertTab() {\n    return false;\n  }\n\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n\n\n  collapseAtStart(selection) {\n    return false;\n  }\n\n  excludeFromCopy(destination) {\n    return false;\n  } // TODO 0.10 deprecate\n\n\n  canExtractContents() {\n    return true;\n  }\n\n  canReplaceWith(replacement) {\n    return true;\n  }\n\n  canInsertAfter(node) {\n    return true;\n  }\n\n  canBeEmpty() {\n    return true;\n  }\n\n  canInsertTextBefore() {\n    return true;\n  }\n\n  canInsertTextAfter() {\n    return true;\n  }\n\n  isInline() {\n    return false;\n  } // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n\n\n  isShadowRoot() {\n    return false;\n  }\n\n  canMergeWith(node) {\n    return false;\n  }\n\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\n\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n\n  while (node) {\n    const nodeKey = node.__key;\n\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n\n    node = node.getParent();\n  }\n\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n  static getType() {\n    return 'root';\n  }\n\n  static clone() {\n    return new RootNode();\n  }\n\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n\n  getTextContent() {\n    const cachedText = this.__cachedText;\n\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n\n    return super.getTextContent();\n  }\n\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  } // View\n\n\n  updateDOM(prevNode, dom) {\n    return false;\n  } // Mutate\n\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const node = nodesToAppend[i];\n\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n\n    return super.append(...nodesToAppend);\n  }\n\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n\n  collapseAtStart() {\n    return true;\n  }\n\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n\n  const pendingSelection = editorState._selection; // Check if we need to update because of changes in selection\n\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\n\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor; // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .exportJSON().`);\n    }\n  } // @ts-expect-error TODO Replace Class utility type with InstanceType\n\n\n  const serializedChildren = serializedNode.children;\n\n  if ($isElementNode(node)) {\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n\n    const children = node.getChildren();\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  } // @ts-expect-error\n\n\n  return serializedNode;\n}\n\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n\n  constructor(key) {\n    super(key);\n  }\n\n  getTextContent() {\n    return '\\n';\n  }\n\n  createDOM() {\n    return document.createElement('br');\n  }\n\n  updateDOM() {\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      br: node => {\n        const parentElement = node.parentElement; // If the <br> is the only child, then skip including it\n\n        if (parentElement != null && parentElement.firstChild === node && parentElement.lastChild === node) {\n          return null;\n        }\n\n        return {\n          conversion: convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n\n}\n\nfunction convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\n\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n\n  return null;\n}\n\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n\n  return 'span';\n}\n\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList; // Firstly we handle the base theme.\n\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  } // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n\n\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n\n          continue;\n        }\n\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\n\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\n\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing(); // Always add a suffix if we're composing a node\n\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        } // @ts-expect-error\n\n\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\n\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme; // Apply theme class names\n\n  const textClassNames = theme.text;\n\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\n\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n/** @noInheritDoc */\n\n\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  static getType() {\n    return 'text';\n  }\n\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  } // View\n\n\n  createDOM(config) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n\n    return dom;\n  }\n\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n\n    if (prevTag !== nextTag) {\n      return true;\n    }\n\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n\n    let innerDOM = dom;\n\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme; // Apply theme class names\n\n    const textClassNames = theme.text;\n\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      br: () => ({\n        conversion: convertLineBreakToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  } // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n\n\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor); // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n\n    if (element !== null) {\n      if (this.hasFormat('bold')) {\n        element = wrapElementWith(element, 'b');\n      }\n\n      if (this.hasFormat('italic')) {\n        element = wrapElementWith(element, 'i');\n      }\n\n      if (this.hasFormat('strikethrough')) {\n        element = wrapElementWith(element, 's');\n      }\n\n      if (this.hasFormat('underline')) {\n        element = wrapElementWith(element, 'u');\n      }\n    }\n\n    return {\n      element\n    };\n  }\n\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  } // Mutators\n\n\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  } // TODO 0.5 This should just be a `string`.\n\n\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  } // TODO 0.5 This should just be a `string`.\n\n\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  toggleFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return this.setFormat(this.getFormat() ^ formatFlag);\n  }\n\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n\n    if (this.__mode === mode) {\n      return this;\n    }\n\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n\n    return selection;\n  }\n\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n\n    if (index < 0) {\n      index = handledTextLength + index;\n\n      if (index < 0) {\n        index = 0;\n      }\n    }\n\n    const selection = $getSelection();\n\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  canInsertTextBefore() {\n    return true;\n  }\n\n  canInsertTextAfter() {\n    return true;\n  }\n\n  canContainTabs() {\n    return false;\n  }\n\n  splitText(...splitOffsets) {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n\n      string += textContent[i];\n    }\n\n    if (string !== '') {\n      parts.push(string);\n    }\n\n    const partsLength = parts.length;\n\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    } // Handle selection\n\n\n    const selection = $getSelection(); // Then handle all other parts\n\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    } // Insert the nodes into the parent's children\n\n\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n\n    return splitNodes;\n  }\n\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n\n    const selection = $getSelection();\n\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  isTextEntity() {\n    return false;\n  }\n\n}\n\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode; // Google Docs uses span tags + font-weight for bold text\n\n  const hasBoldFontWeight = span.style.fontWeight === '700'; // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n\n  const hasLinethroughTextDecoration = span.style.textDecoration === 'line-through'; // Google Docs uses span tags + font-style for italic text\n\n  const hasItalicFontStyle = span.style.fontStyle === 'italic'; // Google Docs uses span tags + text-decoration: underline for underline text\n\n  const hasUnderlineTextDecoration = span.style.textDecoration === 'underline'; // Google Docs uses span tags + vertical-align to specify subscript and superscript\n\n  const verticalAlign = span.style.verticalAlign;\n  return {\n    forChild: lexicalNode => {\n      if (!$isTextNode(lexicalNode)) {\n        return lexicalNode;\n      }\n\n      if (hasBoldFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n\n      if (hasLinethroughTextDecoration) {\n        lexicalNode.toggleFormat('strikethrough');\n      }\n\n      if (hasItalicFontStyle) {\n        lexicalNode.toggleFormat('italic');\n      }\n\n      if (hasUnderlineTextDecoration) {\n        lexicalNode.toggleFormat('underline');\n      }\n\n      if (verticalAlign === 'sub') {\n        lexicalNode.toggleFormat('subscript');\n      }\n\n      if (verticalAlign === 'super') {\n        lexicalNode.toggleFormat('superscript');\n      }\n\n      return lexicalNode;\n    },\n    node: null\n  };\n}\n\nfunction convertLineBreakToElement() {\n  return {\n    node: $createLineBreakNode()\n  };\n}\n\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode; // Google Docs wraps all copied HTML in a <b> with font-weight normal\n\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !hasNormalFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n\n      return lexicalNode;\n    },\n    node: null\n  };\n}\n\nfunction convertTextDOMNode(domNode, _parent, preformatted) {\n  let textContent = domNode.textContent || '';\n\n  if (!preformatted && /\\n/.test(textContent)) {\n    textContent = textContent.replace(/\\r?\\n/gm, ' ');\n\n    if (textContent.trim().length === 0) {\n      return {\n        node: null\n      };\n    }\n  }\n\n  return {\n    node: $createTextNode(textContent)\n  };\n}\n\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\n\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !lexicalNode.hasFormat(format)) {\n        lexicalNode.toggleFormat(format);\n      }\n\n      return lexicalNode;\n    },\n    node: null\n  };\n}\n\nfunction $createTextNode(text = '') {\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  static getType() {\n    return 'paragraph';\n  }\n\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  } // View\n\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n\n    return dom;\n  }\n\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n\n    if (element && this.isEmpty()) {\n      element.append(document.createElement('br'));\n    }\n\n    if (element) {\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n\n      if (direction) {\n        element.dir = direction;\n      }\n\n      const indent = this.getIndent();\n\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n\n    return {\n      element\n    };\n  }\n\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      type: 'paragraph',\n      version: 1\n    };\n  } // Mutation\n\n\n  insertNewAfter(_, restoreSelection) {\n    const newElement = $createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n\n  collapseAtStart() {\n    const children = this.getChildren(); // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n\n      const prevSibling = this.getPreviousSibling();\n\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nfunction convertParagraphElement(element) {\n  const node = $createParagraphNode();\n\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n\n  return {\n    node\n  };\n}\n\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n\n  editor._cloneNotNeeded.clear();\n\n  editor._dirtyLeaves = new Set();\n\n  editor._dirtyElements.clear();\n\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  } // Remove all the DOM nodes from the root element\n\n\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\n\nfunction initializeConversionCache(nodes) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM != null ? node.klass.importDOM.bind(node.klass) : null;\n\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n\n    handledConversions.add(importDOM);\n    const map = importDOM();\n\n    if (map !== null) {\n      Object.keys(map).forEach(key => {\n        let currentCache = conversionCache.get(key);\n\n        if (currentCache === undefined) {\n          currentCache = [];\n          conversionCache.set(key, currentCache);\n        }\n\n        currentCache.push(map[key]);\n      });\n    }\n  });\n  return conversionCache;\n}\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\n\n\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, ParagraphNode, ...(config.nodes || [])];\n  const onError = config.onError;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replacementClass = null;\n      let replacementKlass = null;\n\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replacementClass = options.with;\n        replacementKlass = options.withKlass ? options.withKlass : null;\n      } // Ensure custom nodes implement required methods.\n\n\n      {\n        const name = klass.name;\n\n        if (name !== 'RootNode') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n\n          if ( // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') && // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n\n          if ( // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n\n          if ( // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n\n      registeredNodes.set(type, {\n        klass,\n        replace: replacementClass,\n        replaceWithKlass: replacementKlass,\n        transforms\n      });\n    }\n  }\n\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes), isEditable);\n\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n\n  return editor;\n}\nclass LexicalEditor {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor; // The root element associated with this editor\n\n    this._rootElement = null; // The current editor state\n\n    this._editorState = editorState; // Handling of drafts and updates\n\n    this._pendingEditorState = null; // Used to help co-ordinate selection and events\n\n    this._compositionKey = null;\n    this._deferred = []; // Used during reconciliation\n\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false; // Listeners\n\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    }; // Commands\n\n    this._commands = new Map(); // Editor configuration for theme/context.\n\n    this._config = config; // Mapping of types to their nodes\n\n    this._nodes = nodes; // React node decorators for portals\n\n    this._decorators = {};\n    this._pendingDecorators = null; // Used to optimize reconciliation\n\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set(); // Handling of DOM mutations\n\n    this._observer = null; // Used for identifying owning editors\n\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n\n\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n\n    const commandsMap = this._commands;\n\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n\n    const listenersInPriorityOrder = commandsMap.get(command);\n\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerMutationListener(klass, listener) {\n    const registeredNode = this._nodes.get(klass.getType());\n\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klass);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n  /** @internal */\n\n\n  registerNodeTransformToKlass(klass, listener) {\n    const type = klass.getType();\n\n    const registeredNode = this._nodes.get(type);\n\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    return registeredNode;\n  }\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n\n\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n\n\n  hasNodes(nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const klass = nodes[i];\n      const type = klass.getType();\n\n      if (!this._nodes.has(type)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n\n\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n\n\n  getDecorators() {\n    return this._decorators;\n  }\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n\n\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n\n\n  getKey() {\n    return this._key;\n  }\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n\n\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n\n        this._updateTags.add('history-merge');\n\n        commitPendingUpdates(this); // TODO: remove this flag once we no longer use UEv2 internally\n\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        this._window = null;\n      }\n\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n\n\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n\n\n  getEditorState() {\n    return this._editorState;\n  }\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n\n\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n\n    flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n\n      commitPendingUpdates(this);\n    }\n\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n\n    this._dirtyElements.set('root', false);\n\n    this._compositionKey = null;\n\n    if (tag != null) {\n      tags.add(tag);\n    }\n\n    commitPendingUpdates(this);\n  }\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserliazation from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n\n\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n\n\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n\n\n  focus(callbackFn, options = {}) {\n    const rootElement = this._rootElement;\n\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      }); // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n  /**\n   * Removes focus from the editor.\n   */\n\n\n  blur() {\n    const rootElement = this._rootElement;\n\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n\n    const domSelection = getDOMSelection(this._window);\n\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n\n\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n\n\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n\n\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass DEPRECATED_GridCellNode extends ElementNode {\n  /** @internal */\n  constructor(colSpan, key) {\n    super(key);\n    this.__colSpan = colSpan;\n    this.__rowSpan = 1;\n  }\n\n  exportJSON() {\n    return { ...super.exportJSON(),\n      colSpan: this.__colSpan,\n      rowSpan: this.__rowSpan\n    };\n  }\n\n  getColSpan() {\n    return this.__colSpan;\n  }\n\n  setColSpan(colSpan) {\n    this.getWritable().__colSpan = colSpan;\n    return this;\n  }\n\n  getRowSpan() {\n    return this.__rowSpan;\n  }\n\n  setRowSpan(rowSpan) {\n    this.getWritable().__rowSpan = rowSpan;\n    return this;\n  }\n\n}\nfunction DEPRECATED_$isGridCellNode(node) {\n  return node instanceof DEPRECATED_GridCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridNode extends ElementNode {}\nfunction DEPRECATED_$isGridNode(node) {\n  return node instanceof DEPRECATED_GridNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass DEPRECATED_GridRowNode extends ElementNode {}\nfunction DEPRECATED_$isGridRowNode(node) {\n  return node instanceof DEPRECATED_GridRowNode;\n}\n\nexports.$addUpdateTag = $addUpdateTag;\nexports.$applyNodeReplacement = $applyNodeReplacement;\nexports.$copyNode = $copyNode;\nexports.$createLineBreakNode = $createLineBreakNode;\nexports.$createNodeSelection = $createNodeSelection;\nexports.$createParagraphNode = $createParagraphNode;\nexports.$createRangeSelection = $createRangeSelection;\nexports.$createTextNode = $createTextNode;\nexports.$getAdjacentNode = $getAdjacentNode;\nexports.$getNearestNodeFromDOMNode = $getNearestNodeFromDOMNode;\nexports.$getNearestRootOrShadowRoot = $getNearestRootOrShadowRoot;\nexports.$getNodeByKey = $getNodeByKey;\nexports.$getPreviousSelection = $getPreviousSelection;\nexports.$getRoot = $getRoot;\nexports.$getSelection = $getSelection;\nexports.$getTextContent = $getTextContent;\nexports.$hasAncestor = $hasAncestor;\nexports.$hasUpdateTag = $hasUpdateTag;\nexports.$insertNodes = $insertNodes;\nexports.$isDecoratorNode = $isDecoratorNode;\nexports.$isElementNode = $isElementNode;\nexports.$isInlineElementOrDecoratorNode = $isInlineElementOrDecoratorNode;\nexports.$isLeafNode = $isLeafNode;\nexports.$isLineBreakNode = $isLineBreakNode;\nexports.$isNodeSelection = $isNodeSelection;\nexports.$isParagraphNode = $isParagraphNode;\nexports.$isRangeSelection = $isRangeSelection;\nexports.$isRootNode = $isRootNode;\nexports.$isRootOrShadowRoot = $isRootOrShadowRoot;\nexports.$isTextNode = $isTextNode;\nexports.$nodesOfType = $nodesOfType;\nexports.$normalizeSelection__EXPERIMENTAL = $normalizeSelection;\nexports.$parseSerializedNode = $parseSerializedNode;\nexports.$setCompositionKey = $setCompositionKey;\nexports.$setSelection = $setSelection;\nexports.$splitNode = $splitNode;\nexports.BLUR_COMMAND = BLUR_COMMAND;\nexports.CAN_REDO_COMMAND = CAN_REDO_COMMAND;\nexports.CAN_UNDO_COMMAND = CAN_UNDO_COMMAND;\nexports.CLEAR_EDITOR_COMMAND = CLEAR_EDITOR_COMMAND;\nexports.CLEAR_HISTORY_COMMAND = CLEAR_HISTORY_COMMAND;\nexports.CLICK_COMMAND = CLICK_COMMAND;\nexports.COMMAND_PRIORITY_CRITICAL = COMMAND_PRIORITY_CRITICAL;\nexports.COMMAND_PRIORITY_EDITOR = COMMAND_PRIORITY_EDITOR;\nexports.COMMAND_PRIORITY_HIGH = COMMAND_PRIORITY_HIGH;\nexports.COMMAND_PRIORITY_LOW = COMMAND_PRIORITY_LOW;\nexports.COMMAND_PRIORITY_NORMAL = COMMAND_PRIORITY_NORMAL;\nexports.CONTROLLED_TEXT_INSERTION_COMMAND = CONTROLLED_TEXT_INSERTION_COMMAND;\nexports.COPY_COMMAND = COPY_COMMAND;\nexports.CUT_COMMAND = CUT_COMMAND;\nexports.DELETE_CHARACTER_COMMAND = DELETE_CHARACTER_COMMAND;\nexports.DELETE_LINE_COMMAND = DELETE_LINE_COMMAND;\nexports.DELETE_WORD_COMMAND = DELETE_WORD_COMMAND;\nexports.DEPRECATED_$computeGridMap = DEPRECATED_$computeGridMap;\nexports.DEPRECATED_$createGridSelection = DEPRECATED_$createGridSelection;\nexports.DEPRECATED_$getNodeTriplet = DEPRECATED_$getNodeTriplet;\nexports.DEPRECATED_$isGridCellNode = DEPRECATED_$isGridCellNode;\nexports.DEPRECATED_$isGridNode = DEPRECATED_$isGridNode;\nexports.DEPRECATED_$isGridRowNode = DEPRECATED_$isGridRowNode;\nexports.DEPRECATED_$isGridSelection = DEPRECATED_$isGridSelection;\nexports.DEPRECATED_GridCellNode = DEPRECATED_GridCellNode;\nexports.DEPRECATED_GridNode = DEPRECATED_GridNode;\nexports.DEPRECATED_GridRowNode = DEPRECATED_GridRowNode;\nexports.DRAGEND_COMMAND = DRAGEND_COMMAND;\nexports.DRAGOVER_COMMAND = DRAGOVER_COMMAND;\nexports.DRAGSTART_COMMAND = DRAGSTART_COMMAND;\nexports.DROP_COMMAND = DROP_COMMAND;\nexports.DecoratorNode = DecoratorNode;\nexports.ElementNode = ElementNode;\nexports.FOCUS_COMMAND = FOCUS_COMMAND;\nexports.FORMAT_ELEMENT_COMMAND = FORMAT_ELEMENT_COMMAND;\nexports.FORMAT_TEXT_COMMAND = FORMAT_TEXT_COMMAND;\nexports.INDENT_CONTENT_COMMAND = INDENT_CONTENT_COMMAND;\nexports.INSERT_LINE_BREAK_COMMAND = INSERT_LINE_BREAK_COMMAND;\nexports.INSERT_PARAGRAPH_COMMAND = INSERT_PARAGRAPH_COMMAND;\nexports.KEY_ARROW_DOWN_COMMAND = KEY_ARROW_DOWN_COMMAND;\nexports.KEY_ARROW_LEFT_COMMAND = KEY_ARROW_LEFT_COMMAND;\nexports.KEY_ARROW_RIGHT_COMMAND = KEY_ARROW_RIGHT_COMMAND;\nexports.KEY_ARROW_UP_COMMAND = KEY_ARROW_UP_COMMAND;\nexports.KEY_BACKSPACE_COMMAND = KEY_BACKSPACE_COMMAND;\nexports.KEY_DELETE_COMMAND = KEY_DELETE_COMMAND;\nexports.KEY_DOWN_COMMAND = KEY_DOWN_COMMAND;\nexports.KEY_ENTER_COMMAND = KEY_ENTER_COMMAND;\nexports.KEY_ESCAPE_COMMAND = KEY_ESCAPE_COMMAND;\nexports.KEY_MODIFIER_COMMAND = KEY_MODIFIER_COMMAND;\nexports.KEY_SPACE_COMMAND = KEY_SPACE_COMMAND;\nexports.KEY_TAB_COMMAND = KEY_TAB_COMMAND;\nexports.LineBreakNode = LineBreakNode;\nexports.MOVE_TO_END = MOVE_TO_END;\nexports.MOVE_TO_START = MOVE_TO_START;\nexports.OUTDENT_CONTENT_COMMAND = OUTDENT_CONTENT_COMMAND;\nexports.PASTE_COMMAND = PASTE_COMMAND;\nexports.ParagraphNode = ParagraphNode;\nexports.REDO_COMMAND = REDO_COMMAND;\nexports.REMOVE_TEXT_COMMAND = REMOVE_TEXT_COMMAND;\nexports.RootNode = RootNode;\nexports.SELECTION_CHANGE_COMMAND = SELECTION_CHANGE_COMMAND;\nexports.TextNode = TextNode;\nexports.UNDO_COMMAND = UNDO_COMMAND;\nexports.createCommand = createCommand;\nexports.createEditor = createEditor;\nexports.getNearestEditorFromDOMNode = getNearestEditorFromDOMNode;\nexports.isSelectionCapturedInDecoratorInput = isSelectionCapturedInDecoratorInput;\nexports.isSelectionWithinEditor = isSelectionWithinEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}