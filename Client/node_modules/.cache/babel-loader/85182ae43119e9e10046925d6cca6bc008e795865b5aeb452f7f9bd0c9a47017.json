{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teh_phoENIX\\\\source\\\\repos\\\\WEBp\\\\WEBpL1\\\\src\\\\jsx\\\\TextEditor.jsx\",\n  _s = $RefreshSig$();\nimport { $getRoot, $getSelection } from 'lexical';\nimport { useEffect } from 'react';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { PlainTextPlugin } from '@lexical/react/LexicalPlainTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport '../css/general.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = {\n  // Theme styling goes here\n};\n\n// When the editor changes, you can get notified via the\n// LexicalOnChangePlugin!\nfunction onChange(editorState) {\n  editorState.read(() => {\n    // Read the contents of the EditorState here.\n    const root = $getRoot();\n    const selection = $getSelection();\n    console.log(root, selection);\n  });\n}\n\n// Lexical React plugins are React components, which makes them\n// highly composable. Furthermore, you can lazy load plugins if\n// desired, so you don't pay the cost for plugins until you\n// actually use them.\nfunction MyCustomAutoFocusPlugin() {\n  _s();\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    // Focus the editor when the effect fires!\n    editor.focus();\n  }, [editor]);\n  return null;\n}\n\n// Catch any errors that occur during Lexical updates and log them\n// or throw them as needed. If you don't throw them, Lexical will\n// try to recover gracefully without losing user data.\n_s(MyCustomAutoFocusPlugin, \"mCqe7sh4aC9mLBXPHfG3d/PNTaQ=\", false, function () {\n  return [useLexicalComposerContext];\n});\n_c = MyCustomAutoFocusPlugin;\nfunction onError(error) {\n  console.error(error);\n}\nexport default function Editor() {\n  const initialConfig = {\n    namespace: 'MyEditor',\n    theme,\n    onError\n  };\n  return /*#__PURE__*/_jsxDEV(LexicalComposer, {\n    initialConfig: initialConfig,\n    classname: \"editor-bar\",\n    children: [/*#__PURE__*/_jsxDEV(PlainTextPlugin, {\n      contentEditable: /*#__PURE__*/_jsxDEV(ContentEditable, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 26\n      }, this),\n      placeholder: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Enter some text...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 22\n      }, this),\n      ErrorBoundary: LexicalErrorBoundary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OnChangePlugin, {\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HistoryPlugin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyCustomAutoFocusPlugin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Editor;\nvar _c, _c2;\n$RefreshReg$(_c, \"MyCustomAutoFocusPlugin\");\n$RefreshReg$(_c2, \"Editor\");","map":{"version":3,"names":["$getRoot","$getSelection","useEffect","LexicalComposer","PlainTextPlugin","ContentEditable","HistoryPlugin","OnChangePlugin","useLexicalComposerContext","LexicalErrorBoundary","jsxDEV","_jsxDEV","theme","onChange","editorState","read","root","selection","console","log","MyCustomAutoFocusPlugin","_s","editor","focus","_c","onError","error","Editor","initialConfig","namespace","classname","children","contentEditable","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","ErrorBoundary","_c2","$RefreshReg$"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/src/jsx/TextEditor.jsx"],"sourcesContent":["import {$getRoot, $getSelection} from 'lexical';\r\nimport {useEffect} from 'react';\r\n\r\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\r\nimport {PlainTextPlugin} from '@lexical/react/LexicalPlainTextPlugin';\r\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\r\nimport {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\r\nimport {OnChangePlugin} from '@lexical/react/LexicalOnChangePlugin';\r\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\r\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\r\n\r\nimport '../css/general.css'\r\n\r\nconst theme = {\r\n  // Theme styling goes here\r\n}\r\n\r\n// When the editor changes, you can get notified via the\r\n// LexicalOnChangePlugin!\r\nfunction onChange(editorState) {\r\n  editorState.read(() => {\r\n    // Read the contents of the EditorState here.\r\n    const root = $getRoot();\r\n    const selection = $getSelection();\r\n\r\n    console.log(root, selection);\r\n  });\r\n}\r\n\r\n// Lexical React plugins are React components, which makes them\r\n// highly composable. Furthermore, you can lazy load plugins if\r\n// desired, so you don't pay the cost for plugins until you\r\n// actually use them.\r\nfunction MyCustomAutoFocusPlugin() {\r\n  const [editor] = useLexicalComposerContext();\r\n\r\n  useEffect(() => {\r\n    // Focus the editor when the effect fires!\r\n    editor.focus();\r\n  }, [editor]);\r\n\r\n  return null;\r\n}\r\n\r\n// Catch any errors that occur during Lexical updates and log them\r\n// or throw them as needed. If you don't throw them, Lexical will\r\n// try to recover gracefully without losing user data.\r\nfunction onError(error) {\r\n  console.error(error);\r\n}\r\n\r\nexport default function Editor() {\r\n  const initialConfig = {\r\n    namespace: 'MyEditor', \r\n    theme,\r\n    onError,\r\n  };\r\n\r\n  return (\r\n    <LexicalComposer initialConfig={initialConfig} classname=\"editor-bar\">\r\n      <PlainTextPlugin\r\n        contentEditable={<ContentEditable />}\r\n        placeholder={<div>Enter some text...</div>}\r\n        ErrorBoundary={LexicalErrorBoundary}\r\n      />\r\n      <OnChangePlugin onChange={onChange} />\r\n      <HistoryPlugin />\r\n      <MyCustomAutoFocusPlugin />\r\n    </LexicalComposer>\r\n  );\r\n}"],"mappings":";;AAAA,SAAQA,QAAQ,EAAEC,aAAa,QAAO,SAAS;AAC/C,SAAQC,SAAS,QAAO,OAAO;AAE/B,SAAQC,eAAe,QAAO,gCAAgC;AAC9D,SAAQC,eAAe,QAAO,uCAAuC;AACrE,SAAQC,eAAe,QAAO,uCAAuC;AACrE,SAAQC,aAAa,QAAO,qCAAqC;AACjE,SAAQC,cAAc,QAAO,sCAAsC;AACnE,SAAQC,yBAAyB,QAAO,uCAAuC;AAC/E,OAAOC,oBAAoB,MAAM,qCAAqC;AAEtE,OAAO,oBAAoB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,KAAK,GAAG;EACZ;AAAA,CACD;;AAED;AACA;AACA,SAASC,QAAQA,CAACC,WAAW,EAAE;EAC7BA,WAAW,CAACC,IAAI,CAAC,MAAM;IACrB;IACA,MAAMC,IAAI,GAAGhB,QAAQ,EAAE;IACvB,MAAMiB,SAAS,GAAGhB,aAAa,EAAE;IAEjCiB,OAAO,CAACC,GAAG,CAACH,IAAI,EAAEC,SAAS,CAAC;EAC9B,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,SAASG,uBAAuBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,MAAM,CAAC,GAAGd,yBAAyB,EAAE;EAE5CN,SAAS,CAAC,MAAM;IACd;IACAoB,MAAM,CAACC,KAAK,EAAE;EAChB,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC;EAEZ,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AAAAD,EAAA,CAbSD,uBAAuB;EAAA,QACbZ,yBAAyB;AAAA;AAAAgB,EAAA,GADnCJ,uBAAuB;AAchC,SAASK,OAAOA,CAACC,KAAK,EAAE;EACtBR,OAAO,CAACQ,KAAK,CAACA,KAAK,CAAC;AACtB;AAEA,eAAe,SAASC,MAAMA,CAAA,EAAG;EAC/B,MAAMC,aAAa,GAAG;IACpBC,SAAS,EAAE,UAAU;IACrBjB,KAAK;IACLa;EACF,CAAC;EAED,oBACEd,OAAA,CAACR,eAAe;IAACyB,aAAa,EAAEA,aAAc;IAACE,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACnEpB,OAAA,CAACP,eAAe;MACd4B,eAAe,eAAErB,OAAA,CAACN,eAAe;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI;MACrCC,WAAW,eAAE1B,OAAA;QAAAoB,QAAA,EAAK;MAAkB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;MAC3CE,aAAa,EAAE7B;IAAqB;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACpC,eACFzB,OAAA,CAACJ,cAAc;MAACM,QAAQ,EAAEA;IAAS;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACtCzB,OAAA,CAACL,aAAa;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjBzB,OAAA,CAACS,uBAAuB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACX;AAEtB;AAACG,GAAA,GAnBuBZ,MAAM;AAAA,IAAAH,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}