{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar clipboard = require('@lexical/clipboard');\nvar selection = require('@lexical/selection');\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/** @module @lexical/plain-text */\n\nfunction onCopyForPlainText(event, editor) {\n  editor.update(() => {\n    const clipboardData = event instanceof KeyboardEvent ? null : event.clipboardData;\n    const selection = lexical.$getSelection();\n    if (selection !== null && clipboardData != null) {\n      event.preventDefault();\n      const htmlString = clipboard.$getHtmlContent(editor);\n      if (htmlString !== null) {\n        clipboardData.setData('text/html', htmlString);\n      }\n      clipboardData.setData('text/plain', selection.getTextContent());\n    }\n  });\n}\nfunction onPasteForPlainText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n    const clipboardData = event instanceof InputEvent || event instanceof KeyboardEvent ? null : event.clipboardData;\n    if (clipboardData != null && lexical.$isRangeSelection(selection)) {\n      clipboard.$insertDataTransferForPlainText(clipboardData, selection);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\nfunction onCutForPlainText(event, editor) {\n  onCopyForPlainText(event, editor);\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n    if (lexical.$isRangeSelection(selection)) {\n      selection.removeText();\n    }\n  });\n}\nfunction registerPlainText(editor) {\n  const removeListener = utils.mergeRegister(editor.registerCommand(lexical.DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_WORD_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteWord(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_LINE_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteLine(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    if (typeof eventOrText === 'string') {\n      selection.insertText(eventOrText);\n    } else {\n      const dataTransfer = eventOrText.dataTransfer;\n      if (dataTransfer != null) {\n        clipboard.$insertDataTransferForPlainText(dataTransfer, selection);\n      } else {\n        const data = eventOrText.data;\n        if (data) {\n          selection.insertText(data);\n        }\n      }\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REMOVE_TEXT_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.removeText();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertLineBreak();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, payload => {\n    const selection$1 = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n    const event = payload;\n    const isHoldingShift = event.shiftKey;\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, true)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, true);\n      return true;\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, payload => {\n    const selection$1 = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n    const event = payload;\n    const isHoldingShift = event.shiftKey;\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, false)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, false);\n      return true;\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_DELETE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n      event.preventDefault();\n    }\n    return editor.dispatchCommand(lexical.INSERT_LINE_BREAK_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.COPY_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    onCopyForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CUT_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    onCutForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.PASTE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n    onPasteForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DROP_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    } // TODO: Make drag and drop work at some point.\n\n    event.preventDefault();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGSTART_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    } // TODO: Make drag and drop work at some point.\n\n    event.preventDefault();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\nexports.registerPlainText = registerPlainText;","map":{"version":3,"names":["clipboard","require","selection","utils","lexical","CAN_USE_DOM","window","document","createElement","documentMode","test","navigator","platform","userAgent","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","IS_IOS","MSStream","IS_CHROME","IS_APPLE_WEBKIT","onCopyForPlainText","event","editor","update","clipboardData","KeyboardEvent","$getSelection","preventDefault","htmlString","$getHtmlContent","setData","getTextContent","onPasteForPlainText","$isRangeSelection","$insertDataTransferForPlainText","tag","onCutForPlainText","removeText","registerPlainText","removeListener","mergeRegister","registerCommand","DELETE_CHARACTER_COMMAND","isBackward","deleteCharacter","COMMAND_PRIORITY_EDITOR","DELETE_WORD_COMMAND","deleteWord","DELETE_LINE_COMMAND","deleteLine","CONTROLLED_TEXT_INSERTION_COMMAND","eventOrText","insertText","dataTransfer","data","REMOVE_TEXT_COMMAND","INSERT_LINE_BREAK_COMMAND","selectStart","insertLineBreak","INSERT_PARAGRAPH_COMMAND","KEY_ARROW_LEFT_COMMAND","payload","selection$1","isHoldingShift","shiftKey","$shouldOverrideDefaultCharacterSelection","$moveCharacter","KEY_ARROW_RIGHT_COMMAND","KEY_BACKSPACE_COMMAND","dispatchCommand","KEY_DELETE_COMMAND","KEY_ENTER_COMMAND","COPY_COMMAND","CUT_COMMAND","PASTE_COMMAND","DROP_COMMAND","DRAGSTART_COMMAND","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/@lexical/plain-text/LexicalPlainText.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar clipboard = require('@lexical/clipboard');\nvar selection = require('@lexical/selection');\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nCAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nCAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\n\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent); // export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/** @module @lexical/plain-text */\n\nfunction onCopyForPlainText(event, editor) {\n  editor.update(() => {\n    const clipboardData = event instanceof KeyboardEvent ? null : event.clipboardData;\n    const selection = lexical.$getSelection();\n\n    if (selection !== null && clipboardData != null) {\n      event.preventDefault();\n      const htmlString = clipboard.$getHtmlContent(editor);\n\n      if (htmlString !== null) {\n        clipboardData.setData('text/html', htmlString);\n      }\n\n      clipboardData.setData('text/plain', selection.getTextContent());\n    }\n  });\n}\n\nfunction onPasteForPlainText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n    const clipboardData = event instanceof InputEvent || event instanceof KeyboardEvent ? null : event.clipboardData;\n\n    if (clipboardData != null && lexical.$isRangeSelection(selection)) {\n      clipboard.$insertDataTransferForPlainText(clipboardData, selection);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\n\nfunction onCutForPlainText(event, editor) {\n  onCopyForPlainText(event, editor);\n  editor.update(() => {\n    const selection = lexical.$getSelection();\n\n    if (lexical.$isRangeSelection(selection)) {\n      selection.removeText();\n    }\n  });\n}\n\nfunction registerPlainText(editor) {\n  const removeListener = utils.mergeRegister(editor.registerCommand(lexical.DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_WORD_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteWord(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DELETE_LINE_COMMAND, isBackward => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.deleteLine(isBackward);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    if (typeof eventOrText === 'string') {\n      selection.insertText(eventOrText);\n    } else {\n      const dataTransfer = eventOrText.dataTransfer;\n\n      if (dataTransfer != null) {\n        clipboard.$insertDataTransferForPlainText(dataTransfer, selection);\n      } else {\n        const data = eventOrText.data;\n\n        if (data) {\n          selection.insertText(data);\n        }\n      }\n    }\n\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REMOVE_TEXT_COMMAND, () => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.removeText();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    selection.insertLineBreak();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, payload => {\n    const selection$1 = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n\n    const event = payload;\n    const isHoldingShift = event.shiftKey;\n\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, true)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, true);\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, payload => {\n    const selection$1 = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection$1)) {\n      return false;\n    }\n\n    const event = payload;\n    const isHoldingShift = event.shiftKey;\n\n    if (selection.$shouldOverrideDefaultCharacterSelection(selection$1, false)) {\n      event.preventDefault();\n      selection.$moveCharacter(selection$1, isHoldingShift, false);\n      return true;\n    }\n\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, true);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_DELETE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    event.preventDefault();\n    return editor.dispatchCommand(lexical.DELETE_CHARACTER_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.KEY_ENTER_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n\n      event.preventDefault();\n    }\n\n    return editor.dispatchCommand(lexical.INSERT_LINE_BREAK_COMMAND, false);\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.COPY_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    onCopyForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CUT_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    onCutForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.PASTE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    }\n\n    onPasteForPlainText(event, editor);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DROP_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    } // TODO: Make drag and drop work at some point.\n\n\n    event.preventDefault();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.DRAGSTART_COMMAND, event => {\n    const selection = lexical.$getSelection();\n\n    if (!lexical.$isRangeSelection(selection)) {\n      return false;\n    } // TODO: Make drag and drop work at some point.\n\n\n    event.preventDefault();\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\n\nexports.registerPlainText = registerPlainText;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}