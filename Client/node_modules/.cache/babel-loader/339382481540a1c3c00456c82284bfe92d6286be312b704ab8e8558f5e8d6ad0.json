{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\nvar CharacterMetadata = require(\"./CharacterMetadata\");\nvar ContentBlock = require(\"./ContentBlock\");\nvar ContentBlockNode = require(\"./ContentBlockNode\");\nvar DraftModifier = require(\"./DraftModifier\");\nvar EditorState = require(\"./EditorState\");\nvar generateRandomKey = require(\"./generateRandomKey\");\nvar gkx = require(\"./gkx\");\nvar Immutable = require(\"immutable\");\nvar moveBlockInContentState = require(\"./moveBlockInContentState\");\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar List = Immutable.List,\n  Repeat = Immutable.Repeat;\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n    var charData = CharacterMetadata.create({\n      entity: entityKey\n    });\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _objectSpread({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _objectSpread({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var withMovedAtomicBlock;\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\nmodule.exports = AtomicBlockUtils;","map":{"version":3,"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","BlockMapBuilder","require","CharacterMetadata","ContentBlock","ContentBlockNode","DraftModifier","EditorState","generateRandomKey","gkx","Immutable","moveBlockInContentState","experimentalTreeDataSupport","ContentBlockRecord","List","Repeat","AtomicBlockUtils","insertAtomicBlock","editorState","entityKey","character","contentState","getCurrentContent","selectionState","getSelection","afterRemoval","removeRange","targetSelection","getSelectionAfter","afterSplit","splitBlock","insertionTarget","asAtomicBlock","setBlockType","charData","create","entity","atomicBlockConfig","type","text","characterList","atomicDividerBlockConfig","nextSibling","prevSibling","fragmentArray","fragment","createFromArray","withAtomicBlock","replaceWithFragment","newContent","merge","selectionBefore","selectionAfter","set","push","moveAtomicBlock","atomicBlock","targetRange","insertionMode","withMovedAtomicBlock","targetBlock","getBlockForKey","getStartKey","getEndKey","selectionAfterRemoval","_targetBlock","getFocusKey","getStartOffset","getEndOffset","getLength","selectionAfterSplit","_targetBlock2","module","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/draft-js/lib/AtomicBlockUtils.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar BlockMapBuilder = require(\"./BlockMapBuilder\");\n\nvar CharacterMetadata = require(\"./CharacterMetadata\");\n\nvar ContentBlock = require(\"./ContentBlock\");\n\nvar ContentBlockNode = require(\"./ContentBlockNode\");\n\nvar DraftModifier = require(\"./DraftModifier\");\n\nvar EditorState = require(\"./EditorState\");\n\nvar generateRandomKey = require(\"./generateRandomKey\");\n\nvar gkx = require(\"./gkx\");\n\nvar Immutable = require(\"immutable\");\n\nvar moveBlockInContentState = require(\"./moveBlockInContentState\");\n\nvar experimentalTreeDataSupport = gkx('draft_tree_data_support');\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n    var charData = CharacterMetadata.create({\n      entity: entityKey\n    });\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _objectSpread({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _objectSpread({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var withMovedAtomicBlock;\n\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\nmodule.exports = AtomicBlockUtils;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}