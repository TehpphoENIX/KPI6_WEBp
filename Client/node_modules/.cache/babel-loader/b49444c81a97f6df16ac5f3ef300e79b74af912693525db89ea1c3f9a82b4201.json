{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/** @module @lexical/history */\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n    if (dirtyElement !== undefined && !lexical.$isRootNode(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n  return nodes;\n}\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n  if (!lexical.$isRangeSelection(nextSelection) || !lexical.$isRangeSelection(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  } // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && lexical.$isTextNode(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n    return OTHER;\n  }\n  const nextDirtyNode = dirtyNodes[0];\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n  if (!lexical.$isTextNode(prevDirtyNode) || !lexical.$isTextNode(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n  if (prevText === nextText) {\n    return OTHER;\n  }\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n  return OTHER;\n}\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n  const nextNode = nextEditorState._nodeMap.get(key);\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  let isDeletingLine = false;\n  if (lexical.$isRangeSelection(prevSelection) && lexical.$isRangeSelection(nextSelection)) {\n    isDeletingLine = prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  }\n  if (!isDeletingLine && lexical.$isTextNode(prevNode) && lexical.$isTextNode(nextNode)) {\n    return prevNode.__type === nextNode.__type && prevNode.__text === nextNode.__text && prevNode.__mode === nextNode.__mode && prevNode.__detail === nextNode.__detail && prevNode.__style === nextNode.__style && prevNode.__format === nextNode.__format && prevNode.__parent === nextNode.__parent;\n  }\n  return false;\n}\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now(); // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      } // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n      return HISTORY_PUSH;\n    })();\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n    }\n    const historyStateEntry = redoStack.pop();\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, true);\n    }\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    }\n    historyState.current = historyStateEntry || null;\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState.clone(historyStateEntry.undoSelection), {\n        tag: 'historic'\n      });\n    }\n  }\n}\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\n\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n  const applyChange = _ref => {\n    let {\n      editorState,\n      prevEditorState,\n      dirtyLeaves,\n      dirtyElements,\n      tags\n    } = _ref;\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n      }\n      if (current !== null) {\n        undoStack.push({\n          ...current,\n          undoSelection: prevEditorState.read(lexical.$getSelection)\n        });\n        editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    } // Else we merge\n\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n  const unregisterCommandListener = utils.mergeRegister(editor.registerCommand(lexical.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  const unregisterUpdateListener = editor.registerUpdateListener(applyChange);\n  return () => {\n    unregisterCommandListener();\n    unregisterUpdateListener();\n  };\n}\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\n\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\nexports.createEmptyHistoryState = createEmptyHistoryState;\nexports.registerHistory = registerHistory;","map":{"version":3,"names":["utils","require","lexical","HISTORY_MERGE","HISTORY_PUSH","DISCARD_HISTORY_CANDIDATE","OTHER","COMPOSING_CHARACTER","INSERT_CHARACTER_AFTER_SELECTION","DELETE_CHARACTER_BEFORE_SELECTION","DELETE_CHARACTER_AFTER_SELECTION","getDirtyNodes","editorState","dirtyLeaves","dirtyElements","nodeMap","_nodeMap","nodes","dirtyLeafKey","dirtyLeaf","get","undefined","push","dirtyElementKey","intentionallyMarkedAsDirty","dirtyElement","$isRootNode","getChangeType","prevEditorState","nextEditorState","dirtyLeavesSet","dirtyElementsSet","isComposing","size","nextSelection","_selection","prevSelection","$isRangeSelection","isCollapsed","dirtyNodes","length","nextNodeMap","nextAnchorNode","anchor","key","prevAnchorNode","has","__key","$isTextNode","__text","offset","nextDirtyNode","prevDirtyNode","__mode","prevText","nextText","nextAnchor","prevAnchor","type","nextAnchorOffset","prevAnchorOffset","textDiff","isTextNodeUnchanged","prevNode","nextNode","isDeletingLine","focus","__type","__detail","__style","__format","__parent","createMergeActionGetter","editor","delay","prevChangeTime","Date","now","prevChangeType","currentHistoryEntry","tags","changeTime","changeType","mergeAction","isSameEditor","shouldPushHistory","shouldMergeHistory","selection","hasDirtyNodes","Array","from","redo","historyState","redoStack","undoStack","current","dispatchCommand","CAN_UNDO_COMMAND","historyStateEntry","pop","CAN_REDO_COMMAND","setEditorState","tag","undo","undoStackLength","clone","undoSelection","clearHistory","registerHistory","getMergeAction","applyChange","_ref","currentEditorState","read","$getSelection","unregisterCommandListener","mergeRegister","registerCommand","UNDO_COMMAND","COMMAND_PRIORITY_EDITOR","REDO_COMMAND","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","registerUpdateListener","unregisterUpdateListener","createEmptyHistoryState","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/@lexical/history/LexicalHistory.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/** @module @lexical/history */\nconst HISTORY_MERGE = 0;\nconst HISTORY_PUSH = 1;\nconst DISCARD_HISTORY_CANDIDATE = 2;\nconst OTHER = 0;\nconst COMPOSING_CHARACTER = 1;\nconst INSERT_CHARACTER_AFTER_SELECTION = 2;\nconst DELETE_CHARACTER_BEFORE_SELECTION = 3;\nconst DELETE_CHARACTER_AFTER_SELECTION = 4;\n\nfunction getDirtyNodes(editorState, dirtyLeaves, dirtyElements) {\n  const nodeMap = editorState._nodeMap;\n  const nodes = [];\n\n  for (const dirtyLeafKey of dirtyLeaves) {\n    const dirtyLeaf = nodeMap.get(dirtyLeafKey);\n\n    if (dirtyLeaf !== undefined) {\n      nodes.push(dirtyLeaf);\n    }\n  }\n\n  for (const [dirtyElementKey, intentionallyMarkedAsDirty] of dirtyElements) {\n    if (!intentionallyMarkedAsDirty) {\n      continue;\n    }\n\n    const dirtyElement = nodeMap.get(dirtyElementKey);\n\n    if (dirtyElement !== undefined && !lexical.$isRootNode(dirtyElement)) {\n      nodes.push(dirtyElement);\n    }\n  }\n\n  return nodes;\n}\n\nfunction getChangeType(prevEditorState, nextEditorState, dirtyLeavesSet, dirtyElementsSet, isComposing) {\n  if (prevEditorState === null || dirtyLeavesSet.size === 0 && dirtyElementsSet.size === 0 && !isComposing) {\n    return OTHER;\n  }\n\n  const nextSelection = nextEditorState._selection;\n  const prevSelection = prevEditorState._selection;\n\n  if (isComposing) {\n    return COMPOSING_CHARACTER;\n  }\n\n  if (!lexical.$isRangeSelection(nextSelection) || !lexical.$isRangeSelection(prevSelection) || !prevSelection.isCollapsed() || !nextSelection.isCollapsed()) {\n    return OTHER;\n  }\n\n  const dirtyNodes = getDirtyNodes(nextEditorState, dirtyLeavesSet, dirtyElementsSet);\n\n  if (dirtyNodes.length === 0) {\n    return OTHER;\n  } // Catching the case when inserting new text node into an element (e.g. first char in paragraph/list),\n  // or after existing node.\n\n\n  if (dirtyNodes.length > 1) {\n    const nextNodeMap = nextEditorState._nodeMap;\n    const nextAnchorNode = nextNodeMap.get(nextSelection.anchor.key);\n    const prevAnchorNode = nextNodeMap.get(prevSelection.anchor.key);\n\n    if (nextAnchorNode && prevAnchorNode && !prevEditorState._nodeMap.has(nextAnchorNode.__key) && lexical.$isTextNode(nextAnchorNode) && nextAnchorNode.__text.length === 1 && nextSelection.anchor.offset === 1) {\n      return INSERT_CHARACTER_AFTER_SELECTION;\n    }\n\n    return OTHER;\n  }\n\n  const nextDirtyNode = dirtyNodes[0];\n\n  const prevDirtyNode = prevEditorState._nodeMap.get(nextDirtyNode.__key);\n\n  if (!lexical.$isTextNode(prevDirtyNode) || !lexical.$isTextNode(nextDirtyNode) || prevDirtyNode.__mode !== nextDirtyNode.__mode) {\n    return OTHER;\n  }\n\n  const prevText = prevDirtyNode.__text;\n  const nextText = nextDirtyNode.__text;\n\n  if (prevText === nextText) {\n    return OTHER;\n  }\n\n  const nextAnchor = nextSelection.anchor;\n  const prevAnchor = prevSelection.anchor;\n\n  if (nextAnchor.key !== prevAnchor.key || nextAnchor.type !== 'text') {\n    return OTHER;\n  }\n\n  const nextAnchorOffset = nextAnchor.offset;\n  const prevAnchorOffset = prevAnchor.offset;\n  const textDiff = nextText.length - prevText.length;\n\n  if (textDiff === 1 && prevAnchorOffset === nextAnchorOffset - 1) {\n    return INSERT_CHARACTER_AFTER_SELECTION;\n  }\n\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset + 1) {\n    return DELETE_CHARACTER_BEFORE_SELECTION;\n  }\n\n  if (textDiff === -1 && prevAnchorOffset === nextAnchorOffset) {\n    return DELETE_CHARACTER_AFTER_SELECTION;\n  }\n\n  return OTHER;\n}\n\nfunction isTextNodeUnchanged(key, prevEditorState, nextEditorState) {\n  const prevNode = prevEditorState._nodeMap.get(key);\n\n  const nextNode = nextEditorState._nodeMap.get(key);\n\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  let isDeletingLine = false;\n\n  if (lexical.$isRangeSelection(prevSelection) && lexical.$isRangeSelection(nextSelection)) {\n    isDeletingLine = prevSelection.anchor.type === 'element' && prevSelection.focus.type === 'element' && nextSelection.anchor.type === 'text' && nextSelection.focus.type === 'text';\n  }\n\n  if (!isDeletingLine && lexical.$isTextNode(prevNode) && lexical.$isTextNode(nextNode)) {\n    return prevNode.__type === nextNode.__type && prevNode.__text === nextNode.__text && prevNode.__mode === nextNode.__mode && prevNode.__detail === nextNode.__detail && prevNode.__style === nextNode.__style && prevNode.__format === nextNode.__format && prevNode.__parent === nextNode.__parent;\n  }\n\n  return false;\n}\n\nfunction createMergeActionGetter(editor, delay) {\n  let prevChangeTime = Date.now();\n  let prevChangeType = OTHER;\n  return (prevEditorState, nextEditorState, currentHistoryEntry, dirtyLeaves, dirtyElements, tags) => {\n    const changeTime = Date.now(); // If applying changes from history stack there's no need\n    // to run history logic again, as history entries already calculated\n\n    if (tags.has('historic')) {\n      prevChangeType = OTHER;\n      prevChangeTime = changeTime;\n      return DISCARD_HISTORY_CANDIDATE;\n    }\n\n    const changeType = getChangeType(prevEditorState, nextEditorState, dirtyLeaves, dirtyElements, editor.isComposing());\n\n    const mergeAction = (() => {\n      const isSameEditor = currentHistoryEntry === null || currentHistoryEntry.editor === editor;\n      const shouldPushHistory = tags.has('history-push');\n      const shouldMergeHistory = !shouldPushHistory && isSameEditor && tags.has('history-merge');\n\n      if (shouldMergeHistory) {\n        return HISTORY_MERGE;\n      }\n\n      if (prevEditorState === null) {\n        return HISTORY_PUSH;\n      }\n\n      const selection = nextEditorState._selection;\n      const hasDirtyNodes = dirtyLeaves.size > 0 || dirtyElements.size > 0;\n\n      if (!hasDirtyNodes) {\n        if (selection !== null) {\n          return HISTORY_MERGE;\n        }\n\n        return DISCARD_HISTORY_CANDIDATE;\n      }\n\n      if (shouldPushHistory === false && changeType !== OTHER && changeType === prevChangeType && changeTime < prevChangeTime + delay && isSameEditor) {\n        return HISTORY_MERGE;\n      } // A single node might have been marked as dirty, but not have changed\n      // due to some node transform reverting the change.\n\n\n      if (dirtyLeaves.size === 1) {\n        const dirtyLeafKey = Array.from(dirtyLeaves)[0];\n\n        if (isTextNodeUnchanged(dirtyLeafKey, prevEditorState, nextEditorState)) {\n          return HISTORY_MERGE;\n        }\n      }\n\n      return HISTORY_PUSH;\n    })();\n\n    prevChangeTime = changeTime;\n    prevChangeType = changeType;\n    return mergeAction;\n  };\n}\n\nfunction redo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n\n  if (redoStack.length !== 0) {\n    const current = historyState.current;\n\n    if (current !== null) {\n      undoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n    }\n\n    const historyStateEntry = redoStack.pop();\n\n    if (redoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    }\n\n    historyState.current = historyStateEntry || null;\n\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState, {\n        tag: 'historic'\n      });\n    }\n  }\n}\n\nfunction undo(editor, historyState) {\n  const redoStack = historyState.redoStack;\n  const undoStack = historyState.undoStack;\n  const undoStackLength = undoStack.length;\n\n  if (undoStackLength !== 0) {\n    const current = historyState.current;\n    const historyStateEntry = undoStack.pop();\n\n    if (current !== null) {\n      redoStack.push(current);\n      editor.dispatchCommand(lexical.CAN_REDO_COMMAND, true);\n    }\n\n    if (undoStack.length === 0) {\n      editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    }\n\n    historyState.current = historyStateEntry || null;\n\n    if (historyStateEntry) {\n      historyStateEntry.editor.setEditorState(historyStateEntry.editorState.clone(historyStateEntry.undoSelection), {\n        tag: 'historic'\n      });\n    }\n  }\n}\n\nfunction clearHistory(historyState) {\n  historyState.undoStack = [];\n  historyState.redoStack = [];\n  historyState.current = null;\n}\n/**\n * Registers necessary listeners to manage undo/redo history stack and related editor commands.\n * It returns `unregister` callback that cleans up all listeners and should be called on editor unmount.\n * @param editor - The lexical editor.\n * @param historyState - The history state, containing the current state and the undo/redo stack.\n * @param delay - The time (in milliseconds) the editor should delay generating a new history stack,\n * instead of merging the current changes with the current stack.\n * @returns The listeners cleanup callback function.\n */\n\n\nfunction registerHistory(editor, historyState, delay) {\n  const getMergeAction = createMergeActionGetter(editor, delay);\n\n  const applyChange = ({\n    editorState,\n    prevEditorState,\n    dirtyLeaves,\n    dirtyElements,\n    tags\n  }) => {\n    const current = historyState.current;\n    const redoStack = historyState.redoStack;\n    const undoStack = historyState.undoStack;\n    const currentEditorState = current === null ? null : current.editorState;\n\n    if (current !== null && editorState === currentEditorState) {\n      return;\n    }\n\n    const mergeAction = getMergeAction(prevEditorState, editorState, current, dirtyLeaves, dirtyElements, tags);\n\n    if (mergeAction === HISTORY_PUSH) {\n      if (redoStack.length !== 0) {\n        historyState.redoStack = [];\n        editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n      }\n\n      if (current !== null) {\n        undoStack.push({ ...current,\n          undoSelection: prevEditorState.read(lexical.$getSelection)\n        });\n        editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, true);\n      }\n    } else if (mergeAction === DISCARD_HISTORY_CANDIDATE) {\n      return;\n    } // Else we merge\n\n\n    historyState.current = {\n      editor,\n      editorState\n    };\n  };\n\n  const unregisterCommandListener = utils.mergeRegister(editor.registerCommand(lexical.UNDO_COMMAND, () => {\n    undo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.REDO_COMMAND, () => {\n    redo(editor, historyState);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_EDITOR_COMMAND, () => {\n    clearHistory(historyState);\n    return false;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerCommand(lexical.CLEAR_HISTORY_COMMAND, () => {\n    clearHistory(historyState);\n    editor.dispatchCommand(lexical.CAN_REDO_COMMAND, false);\n    editor.dispatchCommand(lexical.CAN_UNDO_COMMAND, false);\n    return true;\n  }, lexical.COMMAND_PRIORITY_EDITOR), editor.registerUpdateListener(applyChange));\n  const unregisterUpdateListener = editor.registerUpdateListener(applyChange);\n  return () => {\n    unregisterCommandListener();\n    unregisterUpdateListener();\n  };\n}\n/**\n * Creates an empty history state.\n * @returns - The empty history state, as an object.\n */\n\nfunction createEmptyHistoryState() {\n  return {\n    current: null,\n    redoStack: [],\n    undoStack: []\n  };\n}\n\nexports.createEmptyHistoryState = createEmptyHistoryState;\nexports.registerHistory = registerHistory;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}