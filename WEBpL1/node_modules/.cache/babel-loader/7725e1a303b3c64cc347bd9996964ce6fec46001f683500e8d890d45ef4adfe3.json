{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar EditorState = require(\"./EditorState\");\nvar containsNode = require(\"fbjs/lib/containsNode\");\nvar getActiveElement = require(\"fbjs/lib/getActiveElement\");\nfunction editOnBlur(editor, e) {\n  // In a contentEditable element, when you select a range and then click\n  // another active element, this does trigger a `blur` event but will not\n  // remove the DOM selection from the contenteditable.\n  // This is consistent across all browsers, but we prefer that the editor\n  // behave like a textarea, where a `blur` event clears the DOM selection.\n  // We therefore force the issue to be certain, checking whether the active\n  // element is `body` to force it when blurring occurs within the window (as\n  // opposed to clicking to another tab or window).\n  var ownerDocument = e.currentTarget.ownerDocument;\n  if (\n  // This ESLint rule conflicts with `sketchy-null-bool` flow check\n  // eslint-disable-next-line no-extra-boolean-cast\n  !Boolean(editor.props.preserveSelectionOnBlur) && getActiveElement(ownerDocument) === ownerDocument.body) {\n    var _selection = ownerDocument.defaultView.getSelection();\n    var editorNode = editor.editor;\n    if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\n      _selection.removeAllRanges();\n    }\n  }\n  var editorState = editor._latestEditorState;\n  var currentSelection = editorState.getSelection();\n  if (!currentSelection.getHasFocus()) {\n    return;\n  }\n  var selection = currentSelection.set('hasFocus', false);\n  editor.props.onBlur && editor.props.onBlur(e);\n  editor.update(EditorState.acceptSelection(editorState, selection));\n}\nmodule.exports = editOnBlur;","map":{"version":3,"names":["EditorState","require","containsNode","getActiveElement","editOnBlur","editor","e","ownerDocument","currentTarget","Boolean","props","preserveSelectionOnBlur","body","_selection","defaultView","getSelection","editorNode","rangeCount","anchorNode","focusNode","removeAllRanges","editorState","_latestEditorState","currentSelection","getHasFocus","selection","set","onBlur","update","acceptSelection","module","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/draft-js/lib/editOnBlur.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nvar EditorState = require(\"./EditorState\");\n\nvar containsNode = require(\"fbjs/lib/containsNode\");\n\nvar getActiveElement = require(\"fbjs/lib/getActiveElement\");\n\nfunction editOnBlur(editor, e) {\n  // In a contentEditable element, when you select a range and then click\n  // another active element, this does trigger a `blur` event but will not\n  // remove the DOM selection from the contenteditable.\n  // This is consistent across all browsers, but we prefer that the editor\n  // behave like a textarea, where a `blur` event clears the DOM selection.\n  // We therefore force the issue to be certain, checking whether the active\n  // element is `body` to force it when blurring occurs within the window (as\n  // opposed to clicking to another tab or window).\n  var ownerDocument = e.currentTarget.ownerDocument;\n\n  if ( // This ESLint rule conflicts with `sketchy-null-bool` flow check\n  // eslint-disable-next-line no-extra-boolean-cast\n  !Boolean(editor.props.preserveSelectionOnBlur) && getActiveElement(ownerDocument) === ownerDocument.body) {\n    var _selection = ownerDocument.defaultView.getSelection();\n\n    var editorNode = editor.editor;\n\n    if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\n      _selection.removeAllRanges();\n    }\n  }\n\n  var editorState = editor._latestEditorState;\n  var currentSelection = editorState.getSelection();\n\n  if (!currentSelection.getHasFocus()) {\n    return;\n  }\n\n  var selection = currentSelection.set('hasFocus', false);\n  editor.props.onBlur && editor.props.onBlur(e);\n  editor.update(EditorState.acceptSelection(editorState, selection));\n}\n\nmodule.exports = editOnBlur;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIC,YAAY,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAEnD,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AAE3D,SAASG,UAAUA,CAACC,MAAM,EAAEC,CAAC,EAAE;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,aAAa,GAAGD,CAAC,CAACE,aAAa,CAACD,aAAa;EAEjD;EAAK;EACL;EACA,CAACE,OAAO,CAACJ,MAAM,CAACK,KAAK,CAACC,uBAAuB,CAAC,IAAIR,gBAAgB,CAACI,aAAa,CAAC,KAAKA,aAAa,CAACK,IAAI,EAAE;IACxG,IAAIC,UAAU,GAAGN,aAAa,CAACO,WAAW,CAACC,YAAY,EAAE;IAEzD,IAAIC,UAAU,GAAGX,MAAM,CAACA,MAAM;IAE9B,IAAIQ,UAAU,CAACI,UAAU,KAAK,CAAC,IAAIf,YAAY,CAACc,UAAU,EAAEH,UAAU,CAACK,UAAU,CAAC,IAAIhB,YAAY,CAACc,UAAU,EAAEH,UAAU,CAACM,SAAS,CAAC,EAAE;MACpIN,UAAU,CAACO,eAAe,EAAE;IAC9B;EACF;EAEA,IAAIC,WAAW,GAAGhB,MAAM,CAACiB,kBAAkB;EAC3C,IAAIC,gBAAgB,GAAGF,WAAW,CAACN,YAAY,EAAE;EAEjD,IAAI,CAACQ,gBAAgB,CAACC,WAAW,EAAE,EAAE;IACnC;EACF;EAEA,IAAIC,SAAS,GAAGF,gBAAgB,CAACG,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;EACvDrB,MAAM,CAACK,KAAK,CAACiB,MAAM,IAAItB,MAAM,CAACK,KAAK,CAACiB,MAAM,CAACrB,CAAC,CAAC;EAC7CD,MAAM,CAACuB,MAAM,CAAC5B,WAAW,CAAC6B,eAAe,CAACR,WAAW,EAAEI,SAAS,CAAC,CAAC;AACpE;AAEAK,MAAM,CAACC,OAAO,GAAG3B,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}