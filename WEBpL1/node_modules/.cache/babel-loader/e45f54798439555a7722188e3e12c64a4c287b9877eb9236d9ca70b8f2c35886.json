{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/**\n * Constants to represent text directionality\n *\n * Also defines a *global* direciton, to be used in bidi algorithms as a\n * default fallback direciton, when no better direction is found or provided.\n *\n * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial\n *       global direction value based on the application.\n *\n * Part of the implementation of Unicode Bidirectional Algorithm (UBA)\n * Unicode Standard Annex #9 (UAX9)\n * http://www.unicode.org/reports/tr9/\n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\nvar NEUTRAL = 'NEUTRAL'; // No strong direction\n\nvar LTR = 'LTR'; // Left-to-Right direction\n\nvar RTL = 'RTL'; // Right-to-Left direction\n\nvar globalDir = null; // == Helpers ==\n\n/**\n * Check if a directionality value is a Strong one\n */\n\nfunction isStrong(dir) {\n  return dir === LTR || dir === RTL;\n}\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property.\n */\n\nfunction getHTMLDir(dir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === LTR ? 'ltr' : 'rtl';\n}\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property, but returns null if `dir` has same value as `otherDir`.\n * `null`.\n */\n\nfunction getHTMLDirIfDifferent(dir, otherDir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  !isStrong(otherDir) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === otherDir ? null : getHTMLDir(dir);\n} // == Global Direction ==\n\n/**\n * Set the global direction.\n */\n\nfunction setGlobalDir(dir) {\n  globalDir = dir;\n}\n/**\n * Initialize the global direction\n */\n\nfunction initGlobalDir() {\n  setGlobalDir(LTR);\n}\n/**\n * Get the global direction\n */\n\nfunction getGlobalDir() {\n  if (!globalDir) {\n    this.initGlobalDir();\n  }\n  !globalDir ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;\n  return globalDir;\n}\nvar UnicodeBidiDirection = {\n  // Values\n  NEUTRAL: NEUTRAL,\n  LTR: LTR,\n  RTL: RTL,\n  // Helpers\n  isStrong: isStrong,\n  getHTMLDir: getHTMLDir,\n  getHTMLDirIfDifferent: getHTMLDirIfDifferent,\n  // Global Direction\n  setGlobalDir: setGlobalDir,\n  initGlobalDir: initGlobalDir,\n  getGlobalDir: getGlobalDir\n};\nmodule.exports = UnicodeBidiDirection;","map":{"version":3,"names":["invariant","require","NEUTRAL","LTR","RTL","globalDir","isStrong","dir","getHTMLDir","process","env","NODE_ENV","getHTMLDirIfDifferent","otherDir","setGlobalDir","initGlobalDir","getGlobalDir","UnicodeBidiDirection","module","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/fbjs/lib/UnicodeBidiDirection.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/**\n * Constants to represent text directionality\n *\n * Also defines a *global* direciton, to be used in bidi algorithms as a\n * default fallback direciton, when no better direction is found or provided.\n *\n * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial\n *       global direction value based on the application.\n *\n * Part of the implementation of Unicode Bidirectional Algorithm (UBA)\n * Unicode Standard Annex #9 (UAX9)\n * http://www.unicode.org/reports/tr9/\n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n\nvar NEUTRAL = 'NEUTRAL'; // No strong direction\n\nvar LTR = 'LTR'; // Left-to-Right direction\n\nvar RTL = 'RTL'; // Right-to-Left direction\n\nvar globalDir = null; // == Helpers ==\n\n/**\n * Check if a directionality value is a Strong one\n */\n\nfunction isStrong(dir) {\n  return dir === LTR || dir === RTL;\n}\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property.\n */\n\n\nfunction getHTMLDir(dir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === LTR ? 'ltr' : 'rtl';\n}\n/**\n * Get string value to be used for `dir` HTML attribute or `direction` CSS\n * property, but returns null if `dir` has same value as `otherDir`.\n * `null`.\n */\n\n\nfunction getHTMLDirIfDifferent(dir, otherDir) {\n  !isStrong(dir) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  !isStrong(otherDir) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;\n  return dir === otherDir ? null : getHTMLDir(dir);\n} // == Global Direction ==\n\n/**\n * Set the global direction.\n */\n\n\nfunction setGlobalDir(dir) {\n  globalDir = dir;\n}\n/**\n * Initialize the global direction\n */\n\n\nfunction initGlobalDir() {\n  setGlobalDir(LTR);\n}\n/**\n * Get the global direction\n */\n\n\nfunction getGlobalDir() {\n  if (!globalDir) {\n    this.initGlobalDir();\n  }\n\n  !globalDir ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;\n  return globalDir;\n}\n\nvar UnicodeBidiDirection = {\n  // Values\n  NEUTRAL: NEUTRAL,\n  LTR: LTR,\n  RTL: RTL,\n  // Helpers\n  isStrong: isStrong,\n  getHTMLDir: getHTMLDir,\n  getHTMLDirIfDifferent: getHTMLDirIfDifferent,\n  // Global Direction\n  setGlobalDir: setGlobalDir,\n  initGlobalDir: initGlobalDir,\n  getGlobalDir: getGlobalDir\n};\nmodule.exports = UnicodeBidiDirection;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEtC,IAAIC,OAAO,GAAG,SAAS,CAAC,CAAC;;AAEzB,IAAIC,GAAG,GAAG,KAAK,CAAC,CAAC;;AAEjB,IAAIC,GAAG,GAAG,KAAK,CAAC,CAAC;;AAEjB,IAAIC,SAAS,GAAG,IAAI,CAAC,CAAC;;AAEtB;AACA;AACA;;AAEA,SAASC,QAAQA,CAACC,GAAG,EAAE;EACrB,OAAOA,GAAG,KAAKJ,GAAG,IAAII,GAAG,KAAKH,GAAG;AACnC;AACA;AACA;AACA;AACA;;AAGA,SAASI,UAAUA,CAACD,GAAG,EAAE;EACvB,CAACD,QAAQ,CAACC,GAAG,CAAC,GAAGE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,oEAAoE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAC3K,OAAOO,GAAG,KAAKJ,GAAG,GAAG,KAAK,GAAG,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASS,qBAAqBA,CAACL,GAAG,EAAEM,QAAQ,EAAE;EAC5C,CAACP,QAAQ,CAACC,GAAG,CAAC,GAAGE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,oEAAoE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAC3K,CAACM,QAAQ,CAACO,QAAQ,CAAC,GAAGJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,yEAAyE,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EACrL,OAAOO,GAAG,KAAKM,QAAQ,GAAG,IAAI,GAAGL,UAAU,CAACD,GAAG,CAAC;AAClD,CAAC,CAAC;;AAEF;AACA;AACA;;AAGA,SAASO,YAAYA,CAACP,GAAG,EAAE;EACzBF,SAAS,GAAGE,GAAG;AACjB;AACA;AACA;AACA;;AAGA,SAASQ,aAAaA,CAAA,EAAG;EACvBD,YAAY,CAACX,GAAG,CAAC;AACnB;AACA;AACA;AACA;;AAGA,SAASa,YAAYA,CAAA,EAAG;EACtB,IAAI,CAACX,SAAS,EAAE;IACd,IAAI,CAACU,aAAa,EAAE;EACtB;EAEA,CAACV,SAAS,GAAGI,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGX,SAAS,CAAC,KAAK,EAAE,2BAA2B,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAC9H,OAAOK,SAAS;AAClB;AAEA,IAAIY,oBAAoB,GAAG;EACzB;EACAf,OAAO,EAAEA,OAAO;EAChBC,GAAG,EAAEA,GAAG;EACRC,GAAG,EAAEA,GAAG;EACR;EACAE,QAAQ,EAAEA,QAAQ;EAClBE,UAAU,EAAEA,UAAU;EACtBI,qBAAqB,EAAEA,qBAAqB;EAC5C;EACAE,YAAY,EAAEA,YAAY;EAC1BC,aAAa,EAAEA,aAAa;EAC5BC,YAAY,EAAEA;AAChB,CAAC;AACDE,MAAM,CAACC,OAAO,GAAGF,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}