{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar React = require(\"react\");\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\nvar invariant = require(\"fbjs/lib/invariant\");\nvar isElement = require(\"./isElement\"); // In IE, spans with <br> tags render as two newlines. By rendering a span\n// with only a newline character, we can be sure to render a single line.\n\nvar useNewlineChar = UserAgent.isBrowser('IE <= 11');\n/**\n * Check whether the node should be considered a newline.\n */\n\nfunction isNewline(node) {\n  return useNewlineChar ? node.textContent === '\\n' : node.tagName === 'BR';\n}\n/**\n * Placeholder elements for empty text content.\n *\n * What is this `data-text` attribute, anyway? It turns out that we need to\n * put an attribute on the lowest-level text node in order to preserve correct\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\n * If the <span> has an attribute, this appears not to happen.\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\n */\n\nvar NEWLINE_A = function NEWLINE_A(ref) {\n  return useNewlineChar ? React.createElement(\"span\", {\n    key: \"A\",\n    \"data-text\": \"true\",\n    ref: ref\n  }, '\\n') : React.createElement(\"br\", {\n    key: \"A\",\n    \"data-text\": \"true\",\n    ref: ref\n  });\n};\nvar NEWLINE_B = function NEWLINE_B(ref) {\n  return useNewlineChar ? React.createElement(\"span\", {\n    key: \"B\",\n    \"data-text\": \"true\",\n    ref: ref\n  }, '\\n') : React.createElement(\"br\", {\n    key: \"B\",\n    \"data-text\": \"true\",\n    ref: ref\n  });\n};\n\n/**\n * The lowest-level component in a `DraftEditor`, the text node component\n * replaces the default React text node implementation. This allows us to\n * perform custom handling of newline behavior and avoid re-rendering text\n * nodes with DOM state that already matches the expectations of our immutable\n * editor state.\n */\nvar DraftEditorTextNode = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(DraftEditorTextNode, _React$Component);\n  function DraftEditorTextNode(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this; // By flipping this flag, we also keep flipping keys which forces\n    // React to remount this node every time it rerenders.\n\n    _defineProperty(_assertThisInitialized(_this), \"_forceFlag\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"_node\", void 0);\n    _this._forceFlag = false;\n    return _this;\n  }\n  var _proto = DraftEditorTextNode.prototype;\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var node = this._node;\n    var shouldBeNewline = nextProps.children === '';\n    !isElement(node) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'node is not an Element') : invariant(false) : void 0;\n    var elementNode = node;\n    if (shouldBeNewline) {\n      return !isNewline(elementNode);\n    }\n    return elementNode.textContent !== nextProps.children;\n  };\n  _proto.componentDidMount = function componentDidMount() {\n    this._forceFlag = !this._forceFlag;\n  };\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this._forceFlag = !this._forceFlag;\n  };\n  _proto.render = function render() {\n    var _this2 = this;\n    if (this.props.children === '') {\n      return this._forceFlag ? NEWLINE_A(function (ref) {\n        return _this2._node = ref;\n      }) : NEWLINE_B(function (ref) {\n        return _this2._node = ref;\n      });\n    }\n    return React.createElement(\"span\", {\n      key: this._forceFlag ? 'A' : 'B',\n      \"data-text\": \"true\",\n      ref: function ref(_ref) {\n        return _this2._node = _ref;\n      }\n    }, this.props.children);\n  };\n  return DraftEditorTextNode;\n}(React.Component);\nmodule.exports = DraftEditorTextNode;","map":{"version":3,"names":["_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_defineProperty","obj","key","value","defineProperty","enumerable","configurable","writable","React","require","UserAgent","invariant","isElement","useNewlineChar","isBrowser","isNewline","node","textContent","tagName","NEWLINE_A","ref","createElement","NEWLINE_B","DraftEditorTextNode","_React$Component","props","_this","call","_forceFlag","_proto","shouldComponentUpdate","nextProps","_node","shouldBeNewline","children","process","env","NODE_ENV","elementNode","componentDidMount","componentDidUpdate","render","_this2","_ref","Component","module","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/draft-js/lib/DraftEditorTextNode.react.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\n'use strict';\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar React = require(\"react\");\n\nvar UserAgent = require(\"fbjs/lib/UserAgent\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n\nvar isElement = require(\"./isElement\"); // In IE, spans with <br> tags render as two newlines. By rendering a span\n// with only a newline character, we can be sure to render a single line.\n\n\nvar useNewlineChar = UserAgent.isBrowser('IE <= 11');\n/**\n * Check whether the node should be considered a newline.\n */\n\nfunction isNewline(node) {\n  return useNewlineChar ? node.textContent === '\\n' : node.tagName === 'BR';\n}\n/**\n * Placeholder elements for empty text content.\n *\n * What is this `data-text` attribute, anyway? It turns out that we need to\n * put an attribute on the lowest-level text node in order to preserve correct\n * spellcheck handling. If the <span> is naked, Chrome and Safari may do\n * bizarre things to do the DOM -- split text nodes, create extra spans, etc.\n * If the <span> has an attribute, this appears not to happen.\n * See http://jsfiddle.net/9khdavod/ for the failure case, and\n * http://jsfiddle.net/7pg143f7/ for the fixed case.\n */\n\n\nvar NEWLINE_A = function NEWLINE_A(ref) {\n  return useNewlineChar ? React.createElement(\"span\", {\n    key: \"A\",\n    \"data-text\": \"true\",\n    ref: ref\n  }, '\\n') : React.createElement(\"br\", {\n    key: \"A\",\n    \"data-text\": \"true\",\n    ref: ref\n  });\n};\n\nvar NEWLINE_B = function NEWLINE_B(ref) {\n  return useNewlineChar ? React.createElement(\"span\", {\n    key: \"B\",\n    \"data-text\": \"true\",\n    ref: ref\n  }, '\\n') : React.createElement(\"br\", {\n    key: \"B\",\n    \"data-text\": \"true\",\n    ref: ref\n  });\n};\n\n/**\n * The lowest-level component in a `DraftEditor`, the text node component\n * replaces the default React text node implementation. This allows us to\n * perform custom handling of newline behavior and avoid re-rendering text\n * nodes with DOM state that already matches the expectations of our immutable\n * editor state.\n */\nvar DraftEditorTextNode = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(DraftEditorTextNode, _React$Component);\n\n  function DraftEditorTextNode(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this; // By flipping this flag, we also keep flipping keys which forces\n    // React to remount this node every time it rerenders.\n\n    _defineProperty(_assertThisInitialized(_this), \"_forceFlag\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_node\", void 0);\n\n    _this._forceFlag = false;\n    return _this;\n  }\n\n  var _proto = DraftEditorTextNode.prototype;\n\n  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n    var node = this._node;\n    var shouldBeNewline = nextProps.children === '';\n    !isElement(node) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'node is not an Element') : invariant(false) : void 0;\n    var elementNode = node;\n\n    if (shouldBeNewline) {\n      return !isNewline(elementNode);\n    }\n\n    return elementNode.textContent !== nextProps.children;\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._forceFlag = !this._forceFlag;\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    this._forceFlag = !this._forceFlag;\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    if (this.props.children === '') {\n      return this._forceFlag ? NEWLINE_A(function (ref) {\n        return _this2._node = ref;\n      }) : NEWLINE_B(function (ref) {\n        return _this2._node = ref;\n      });\n    }\n\n    return React.createElement(\"span\", {\n      key: this._forceFlag ? 'A' : 'B',\n      \"data-text\": \"true\",\n      ref: function ref(_ref) {\n        return _this2._node = _ref;\n      }\n    }, this.props.children);\n  };\n\n  return DraftEditorTextNode;\n}(React.Component);\n\nmodule.exports = DraftEditorTextNode;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}