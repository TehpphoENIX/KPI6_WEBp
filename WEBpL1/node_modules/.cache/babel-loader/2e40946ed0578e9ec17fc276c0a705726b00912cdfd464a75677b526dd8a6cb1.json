{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Teh_phoENIX\\\\source\\\\repos\\\\WEBp\\\\WEBpL1\\\\src\\\\components\\\\TextEditor.jsx\";\nimport { $getRoot, $getSelection } from 'lexical';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\nimport HtmlPlugin from './HTMLPlugin.tsx';\nimport { $generateHtmlFromNodes } from '@lexical/html';\nimport '../css/general.css';\nimport { useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = {\n  // Theme styling goes here\n};\n\n// Catch any errors that occur during Lexical updates and log them\n// or throw them as needed. If you don't throw them, Lexical will\n// try to recover gracefully without losing user data.\nfunction onError(error) {\n  console.error(error);\n}\n\n// When the editor changes, you can get notified via the\n// LexicalOnChangePlugin!\n\nexport default function Editor(_ref) {\n  let {\n    initialState,\n    updateCallback\n  } = _ref;\n  const initialConfig = {\n    namespace: 'MyEditor',\n    theme,\n    onError\n  };\n  return /*#__PURE__*/_jsxDEV(LexicalComposer, {\n    initialConfig: initialConfig,\n    children: [/*#__PURE__*/_jsxDEV(RichTextPlugin, {\n      contentEditable: /*#__PURE__*/_jsxDEV(ContentEditable, {\n        className: \"editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 30\n      }, this),\n      ErrorBoundary: LexicalErrorBoundary\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HtmlPlugin, {\n      onHtmlChanged: html => updateCallback(html),\n      initialHtml: initialState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HistoryPlugin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["$getRoot","$getSelection","LexicalComposer","RichTextPlugin","ContentEditable","HistoryPlugin","OnChangePlugin","useLexicalComposerContext","LexicalErrorBoundary","HtmlPlugin","$generateHtmlFromNodes","useContext","jsxDEV","_jsxDEV","theme","onError","error","console","Editor","_ref","initialState","updateCallback","initialConfig","namespace","children","contentEditable","className","fileName","_jsxFileName","lineNumber","columnNumber","ErrorBoundary","onHtmlChanged","html","initialHtml","_c","$RefreshReg$"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/src/components/TextEditor.jsx"],"sourcesContent":["import {$getRoot, $getSelection} from 'lexical';\r\nimport {LexicalComposer} from '@lexical/react/LexicalComposer';\r\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\r\nimport {ContentEditable} from '@lexical/react/LexicalContentEditable';\r\nimport {HistoryPlugin} from '@lexical/react/LexicalHistoryPlugin';\r\nimport {OnChangePlugin} from '@lexical/react/LexicalOnChangePlugin';\r\nimport {useLexicalComposerContext} from '@lexical/react/LexicalComposerContext';\r\nimport LexicalErrorBoundary from '@lexical/react/LexicalErrorBoundary';\r\nimport HtmlPlugin from './HTMLPlugin.tsx';\r\n\r\nimport {$generateHtmlFromNodes} from '@lexical/html';\r\n\r\nimport '../css/general.css'\r\nimport { useContext } from 'react';\r\n\r\nconst theme = {\r\n  // Theme styling goes here\r\n}\r\n\r\n// Catch any errors that occur during Lexical updates and log them\r\n// or throw them as needed. If you don't throw them, Lexical will\r\n// try to recover gracefully without losing user data.\r\nfunction onError(error) {\r\n  console.error(error);\r\n}\r\n\r\n// When the editor changes, you can get notified via the\r\n// LexicalOnChangePlugin!\r\n\r\nexport default function Editor({initialState, updateCallback}) {\r\n  const initialConfig = {\r\n    namespace: 'MyEditor', \r\n    theme,\r\n    onError,\r\n  };\r\n\r\n  return (\r\n    <LexicalComposer initialConfig={initialConfig}>\r\n        <RichTextPlugin\r\n            contentEditable={<ContentEditable className='editor'/>}\r\n            ErrorBoundary={LexicalErrorBoundary}\r\n        />\r\n        <HtmlPlugin\r\n            onHtmlChanged={(html) => updateCallback(html)}\r\n            initialHtml={initialState}\r\n        />\r\n        <HistoryPlugin />\r\n    </LexicalComposer>\r\n  );\r\n}"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,aAAa,QAAO,SAAS;AAC/C,SAAQC,eAAe,QAAO,gCAAgC;AAC9D,SAASC,cAAc,QAAQ,sCAAsC;AACrE,SAAQC,eAAe,QAAO,uCAAuC;AACrE,SAAQC,aAAa,QAAO,qCAAqC;AACjE,SAAQC,cAAc,QAAO,sCAAsC;AACnE,SAAQC,yBAAyB,QAAO,uCAAuC;AAC/E,OAAOC,oBAAoB,MAAM,qCAAqC;AACtE,OAAOC,UAAU,MAAM,kBAAkB;AAEzC,SAAQC,sBAAsB,QAAO,eAAe;AAEpD,OAAO,oBAAoB;AAC3B,SAASC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,KAAK,GAAG;EACZ;AAAA,CACD;;AAED;AACA;AACA;AACA,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;AACtB;;AAEA;AACA;;AAEA,eAAe,SAASE,MAAMA,CAAAC,IAAA,EAAiC;EAAA,IAAhC;IAACC,YAAY;IAAEC;EAAc,CAAC,GAAAF,IAAA;EAC3D,MAAMG,aAAa,GAAG;IACpBC,SAAS,EAAE,UAAU;IACrBT,KAAK;IACLC;EACF,CAAC;EAED,oBACEF,OAAA,CAACX,eAAe;IAACoB,aAAa,EAAEA,aAAc;IAAAE,QAAA,gBAC1CX,OAAA,CAACV,cAAc;MACXsB,eAAe,eAAEZ,OAAA,CAACT,eAAe;QAACsB,SAAS,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;MACvDC,aAAa,EAAEvB;IAAqB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACtC,eACFjB,OAAA,CAACJ,UAAU;MACPuB,aAAa,EAAGC,IAAI,IAAKZ,cAAc,CAACY,IAAI,CAAE;MAC9CC,WAAW,EAAEd;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC5B,eACFjB,OAAA,CAACR,aAAa;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEtB;AAACK,EAAA,GApBuBjB,MAAM;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}