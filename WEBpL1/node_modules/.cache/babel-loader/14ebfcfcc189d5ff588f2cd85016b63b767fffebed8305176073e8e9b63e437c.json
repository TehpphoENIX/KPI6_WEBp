{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\nvar UnicodeUtils = require(\"fbjs/lib/UnicodeUtils\");\nvar getCorrectDocumentFromNode = require(\"./getCorrectDocumentFromNode\");\nvar getRangeClientRects = require(\"./getRangeClientRects\");\nvar invariant = require(\"fbjs/lib/invariant\");\n/**\n * Return the computed line height, in pixels, for the provided element.\n */\n\nfunction getLineHeightPx(element) {\n  var computed = getComputedStyle(element);\n  var correctDocument = getCorrectDocumentFromNode(element);\n  var div = correctDocument.createElement('div');\n  div.style.fontFamily = computed.fontFamily;\n  div.style.fontSize = computed.fontSize;\n  div.style.fontStyle = computed.fontStyle;\n  div.style.fontWeight = computed.fontWeight;\n  div.style.lineHeight = computed.lineHeight;\n  div.style.position = 'absolute';\n  div.textContent = 'M';\n  var documentBody = correctDocument.body;\n  !documentBody ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Missing document.body') : invariant(false) : void 0; // forced layout here\n\n  documentBody.appendChild(div);\n  var rect = div.getBoundingClientRect();\n  documentBody.removeChild(div);\n  return rect.height;\n}\n/**\n * Return whether every ClientRect in the provided list lies on the same line.\n *\n * We assume that the rects on the same line all contain the baseline, so the\n * lowest top line needs to be above the highest bottom line (i.e., if you were\n * to project the rects onto the y-axis, their intersection would be nonempty).\n *\n * In addition, we require that no two boxes are lineHeight (or more) apart at\n * either top or bottom, which helps protect against false positives for fonts\n * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino\n * produces rects of height 58px!).\n */\n\nfunction areRectsOnOneLine(rects, lineHeight) {\n  var minTop = Infinity;\n  var minBottom = Infinity;\n  var maxTop = -Infinity;\n  var maxBottom = -Infinity;\n  for (var ii = 0; ii < rects.length; ii++) {\n    var rect = rects[ii];\n    if (rect.width === 0 || rect.width === 1) {\n      // When a range starts or ends a soft wrap, many browsers (Chrome, IE,\n      // Safari) include an empty rect on the previous or next line. When the\n      // text lies in a container whose position is not integral (e.g., from\n      // margin: auto), Safari makes these empty rects have width 1 (instead of\n      // 0). Having one-pixel-wide characters seems unlikely (and most browsers\n      // report widths in subpixel precision anyway) so it's relatively safe to\n      // skip over them.\n      continue;\n    }\n    minTop = Math.min(minTop, rect.top);\n    minBottom = Math.min(minBottom, rect.bottom);\n    maxTop = Math.max(maxTop, rect.top);\n    maxBottom = Math.max(maxBottom, rect.bottom);\n  }\n  return maxTop <= minBottom && maxTop - minTop < lineHeight && maxBottom - minBottom < lineHeight;\n}\n/**\n * Return the length of a node, as used by Range offsets.\n */\n\nfunction getNodeLength(node) {\n  // http://www.w3.org/TR/dom/#concept-node-length\n  switch (node.nodeType) {\n    case Node.DOCUMENT_TYPE_NODE:\n      return 0;\n    case Node.TEXT_NODE:\n    case Node.PROCESSING_INSTRUCTION_NODE:\n    case Node.COMMENT_NODE:\n      return node.length;\n    default:\n      return node.childNodes.length;\n  }\n}\n/**\n * Given a collapsed range, move the start position backwards as far as\n * possible while the range still spans only a single line.\n */\n\nfunction expandRangeToStartOfLine(range) {\n  !range.collapsed ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'expandRangeToStartOfLine: Provided range is not collapsed.') : invariant(false) : void 0;\n  range = range.cloneRange();\n  var containingElement = range.startContainer;\n  if (containingElement.nodeType !== 1) {\n    containingElement = containingElement.parentNode;\n  }\n  var lineHeight = getLineHeightPx(containingElement); // Imagine our text looks like:\n  //   <div><span>once upon a time, there was a <em>boy\n  //   who lived</em> </span><q><strong>under^ the\n  //   stairs</strong> in a small closet.</q></div>\n  // where the caret represents the cursor. First, we crawl up the tree until\n  // the range spans multiple lines (setting the start point to before\n  // \"<strong>\", then before \"<div>\"), then at each level we do a search to\n  // find the latest point which is still on a previous line. We'll find that\n  // the break point is inside the span, then inside the <em>, then in its text\n  // node child, the actual break point before \"who\".\n\n  var bestContainer = range.endContainer;\n  var bestOffset = range.endOffset;\n  range.setStart(range.startContainer, 0);\n  while (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\n    bestContainer = range.startContainer;\n    bestOffset = range.startOffset;\n    !bestContainer.parentNode ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Found unexpected detached subtree when traversing.') : invariant(false) : void 0;\n    range.setStartBefore(bestContainer);\n    if (bestContainer.nodeType === 1 && getComputedStyle(bestContainer).display !== 'inline') {\n      // The start of the line is never in a different block-level container.\n      break;\n    }\n  } // In the above example, range now spans from \"<div>\" to \"under\",\n  // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].\n  // Picking out which child to recurse into here is a special case since we\n  // don't want to check past <q> -- once we find that the final range starts\n  // in <span>, we can look at all of its children (and all of their children)\n  // to find the break point.\n  // At all times, (bestContainer, bestOffset) is the latest single-line start\n  // point that we know of.\n\n  var currentContainer = bestContainer;\n  var maxIndexToConsider = bestOffset - 1;\n  do {\n    var nodeValue = currentContainer.nodeValue;\n    var ii = maxIndexToConsider;\n    for (; ii >= 0; ii--) {\n      if (nodeValue != null && ii > 0 && UnicodeUtils.isSurrogatePair(nodeValue, ii - 1)) {\n        // We're in the middle of a surrogate pair -- skip over so we never\n        // return a range with an endpoint in the middle of a code point.\n        continue;\n      }\n      range.setStart(currentContainer, ii);\n      if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\n        bestContainer = currentContainer;\n        bestOffset = ii;\n      } else {\n        break;\n      }\n    }\n    if (ii === -1 || currentContainer.childNodes.length === 0) {\n      // If ii === -1, then (bestContainer, bestOffset), which is equal to\n      // (currentContainer, 0), was a single-line start point but a start\n      // point before currentContainer wasn't, so the line break seems to\n      // have occurred immediately after currentContainer's start tag\n      //\n      // If currentContainer.childNodes.length === 0, we're already at a\n      // terminal node (e.g., text node) and should return our current best.\n      break;\n    }\n    currentContainer = currentContainer.childNodes[ii];\n    maxIndexToConsider = getNodeLength(currentContainer);\n  } while (true);\n  range.setStart(bestContainer, bestOffset);\n  return range;\n}\nmodule.exports = expandRangeToStartOfLine;","map":{"version":3,"names":["UnicodeUtils","require","getCorrectDocumentFromNode","getRangeClientRects","invariant","getLineHeightPx","element","computed","getComputedStyle","correctDocument","div","createElement","style","fontFamily","fontSize","fontStyle","fontWeight","lineHeight","position","textContent","documentBody","body","process","env","NODE_ENV","appendChild","rect","getBoundingClientRect","removeChild","height","areRectsOnOneLine","rects","minTop","Infinity","minBottom","maxTop","maxBottom","ii","length","width","Math","min","top","bottom","max","getNodeLength","node","nodeType","Node","DOCUMENT_TYPE_NODE","TEXT_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","childNodes","expandRangeToStartOfLine","range","collapsed","cloneRange","containingElement","startContainer","parentNode","bestContainer","endContainer","bestOffset","endOffset","setStart","startOffset","setStartBefore","display","currentContainer","maxIndexToConsider","nodeValue","isSurrogatePair","module","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/draft-js/lib/expandRangeToStartOfLine.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @emails oncall+draft_js\n */\nvar UnicodeUtils = require(\"fbjs/lib/UnicodeUtils\");\n\nvar getCorrectDocumentFromNode = require(\"./getCorrectDocumentFromNode\");\n\nvar getRangeClientRects = require(\"./getRangeClientRects\");\n\nvar invariant = require(\"fbjs/lib/invariant\");\n/**\n * Return the computed line height, in pixels, for the provided element.\n */\n\n\nfunction getLineHeightPx(element) {\n  var computed = getComputedStyle(element);\n  var correctDocument = getCorrectDocumentFromNode(element);\n  var div = correctDocument.createElement('div');\n  div.style.fontFamily = computed.fontFamily;\n  div.style.fontSize = computed.fontSize;\n  div.style.fontStyle = computed.fontStyle;\n  div.style.fontWeight = computed.fontWeight;\n  div.style.lineHeight = computed.lineHeight;\n  div.style.position = 'absolute';\n  div.textContent = 'M';\n  var documentBody = correctDocument.body;\n  !documentBody ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Missing document.body') : invariant(false) : void 0; // forced layout here\n\n  documentBody.appendChild(div);\n  var rect = div.getBoundingClientRect();\n  documentBody.removeChild(div);\n  return rect.height;\n}\n/**\n * Return whether every ClientRect in the provided list lies on the same line.\n *\n * We assume that the rects on the same line all contain the baseline, so the\n * lowest top line needs to be above the highest bottom line (i.e., if you were\n * to project the rects onto the y-axis, their intersection would be nonempty).\n *\n * In addition, we require that no two boxes are lineHeight (or more) apart at\n * either top or bottom, which helps protect against false positives for fonts\n * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino\n * produces rects of height 58px!).\n */\n\n\nfunction areRectsOnOneLine(rects, lineHeight) {\n  var minTop = Infinity;\n  var minBottom = Infinity;\n  var maxTop = -Infinity;\n  var maxBottom = -Infinity;\n\n  for (var ii = 0; ii < rects.length; ii++) {\n    var rect = rects[ii];\n\n    if (rect.width === 0 || rect.width === 1) {\n      // When a range starts or ends a soft wrap, many browsers (Chrome, IE,\n      // Safari) include an empty rect on the previous or next line. When the\n      // text lies in a container whose position is not integral (e.g., from\n      // margin: auto), Safari makes these empty rects have width 1 (instead of\n      // 0). Having one-pixel-wide characters seems unlikely (and most browsers\n      // report widths in subpixel precision anyway) so it's relatively safe to\n      // skip over them.\n      continue;\n    }\n\n    minTop = Math.min(minTop, rect.top);\n    minBottom = Math.min(minBottom, rect.bottom);\n    maxTop = Math.max(maxTop, rect.top);\n    maxBottom = Math.max(maxBottom, rect.bottom);\n  }\n\n  return maxTop <= minBottom && maxTop - minTop < lineHeight && maxBottom - minBottom < lineHeight;\n}\n/**\n * Return the length of a node, as used by Range offsets.\n */\n\n\nfunction getNodeLength(node) {\n  // http://www.w3.org/TR/dom/#concept-node-length\n  switch (node.nodeType) {\n    case Node.DOCUMENT_TYPE_NODE:\n      return 0;\n\n    case Node.TEXT_NODE:\n    case Node.PROCESSING_INSTRUCTION_NODE:\n    case Node.COMMENT_NODE:\n      return node.length;\n\n    default:\n      return node.childNodes.length;\n  }\n}\n/**\n * Given a collapsed range, move the start position backwards as far as\n * possible while the range still spans only a single line.\n */\n\n\nfunction expandRangeToStartOfLine(range) {\n  !range.collapsed ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'expandRangeToStartOfLine: Provided range is not collapsed.') : invariant(false) : void 0;\n  range = range.cloneRange();\n  var containingElement = range.startContainer;\n\n  if (containingElement.nodeType !== 1) {\n    containingElement = containingElement.parentNode;\n  }\n\n  var lineHeight = getLineHeightPx(containingElement); // Imagine our text looks like:\n  //   <div><span>once upon a time, there was a <em>boy\n  //   who lived</em> </span><q><strong>under^ the\n  //   stairs</strong> in a small closet.</q></div>\n  // where the caret represents the cursor. First, we crawl up the tree until\n  // the range spans multiple lines (setting the start point to before\n  // \"<strong>\", then before \"<div>\"), then at each level we do a search to\n  // find the latest point which is still on a previous line. We'll find that\n  // the break point is inside the span, then inside the <em>, then in its text\n  // node child, the actual break point before \"who\".\n\n  var bestContainer = range.endContainer;\n  var bestOffset = range.endOffset;\n  range.setStart(range.startContainer, 0);\n\n  while (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\n    bestContainer = range.startContainer;\n    bestOffset = range.startOffset;\n    !bestContainer.parentNode ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Found unexpected detached subtree when traversing.') : invariant(false) : void 0;\n    range.setStartBefore(bestContainer);\n\n    if (bestContainer.nodeType === 1 && getComputedStyle(bestContainer).display !== 'inline') {\n      // The start of the line is never in a different block-level container.\n      break;\n    }\n  } // In the above example, range now spans from \"<div>\" to \"under\",\n  // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].\n  // Picking out which child to recurse into here is a special case since we\n  // don't want to check past <q> -- once we find that the final range starts\n  // in <span>, we can look at all of its children (and all of their children)\n  // to find the break point.\n  // At all times, (bestContainer, bestOffset) is the latest single-line start\n  // point that we know of.\n\n\n  var currentContainer = bestContainer;\n  var maxIndexToConsider = bestOffset - 1;\n\n  do {\n    var nodeValue = currentContainer.nodeValue;\n    var ii = maxIndexToConsider;\n\n    for (; ii >= 0; ii--) {\n      if (nodeValue != null && ii > 0 && UnicodeUtils.isSurrogatePair(nodeValue, ii - 1)) {\n        // We're in the middle of a surrogate pair -- skip over so we never\n        // return a range with an endpoint in the middle of a code point.\n        continue;\n      }\n\n      range.setStart(currentContainer, ii);\n\n      if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {\n        bestContainer = currentContainer;\n        bestOffset = ii;\n      } else {\n        break;\n      }\n    }\n\n    if (ii === -1 || currentContainer.childNodes.length === 0) {\n      // If ii === -1, then (bestContainer, bestOffset), which is equal to\n      // (currentContainer, 0), was a single-line start point but a start\n      // point before currentContainer wasn't, so the line break seems to\n      // have occurred immediately after currentContainer's start tag\n      //\n      // If currentContainer.childNodes.length === 0, we're already at a\n      // terminal node (e.g., text node) and should return our current best.\n      break;\n    }\n\n    currentContainer = currentContainer.childNodes[ii];\n    maxIndexToConsider = getNodeLength(currentContainer);\n  } while (true);\n\n  range.setStart(bestContainer, bestOffset);\n  return range;\n}\n\nmodule.exports = expandRangeToStartOfLine;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}