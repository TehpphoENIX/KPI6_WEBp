{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction OnChangePlugin(_ref) {\n  let {\n    ignoreHistoryMergeTagChange = true,\n    ignoreSelectionChange = false,\n    onChange\n  } = _ref;\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  useLayoutEffect(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(_ref2 => {\n        let {\n          editorState,\n          dirtyElements,\n          dirtyLeaves,\n          prevEditorState,\n          tags\n        } = _ref2;\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has('history-merge') || prevEditorState.isEmpty()) {\n          return;\n        }\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\nexports.OnChangePlugin = OnChangePlugin;","map":{"version":3,"names":["LexicalComposerContext","require","react","CAN_USE_DOM","window","document","createElement","useLayoutEffectImpl","useLayoutEffect","useEffect","OnChangePlugin","_ref","ignoreHistoryMergeTagChange","ignoreSelectionChange","onChange","editor","useLexicalComposerContext","registerUpdateListener","_ref2","editorState","dirtyElements","dirtyLeaves","prevEditorState","tags","size","has","isEmpty","exports"],"sources":["C:/Users/Teh_phoENIX/source/repos/WEBp/WEBpL1/node_modules/@lexical/react/LexicalOnChangePlugin.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst useLayoutEffectImpl = CAN_USE_DOM ? react.useLayoutEffect : react.useEffect;\nvar useLayoutEffect = useLayoutEffectImpl;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction OnChangePlugin({\n  ignoreHistoryMergeTagChange = true,\n  ignoreSelectionChange = false,\n  onChange\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  useLayoutEffect(() => {\n    if (onChange) {\n      return editor.registerUpdateListener(({\n        editorState,\n        dirtyElements,\n        dirtyLeaves,\n        prevEditorState,\n        tags\n      }) => {\n        if (ignoreSelectionChange && dirtyElements.size === 0 && dirtyLeaves.size === 0 || ignoreHistoryMergeTagChange && tags.has('history-merge') || prevEditorState.isEmpty()) {\n          return;\n        }\n\n        onChange(editorState, editor, tags);\n      });\n    }\n  }, [editor, ignoreHistoryMergeTagChange, ignoreSelectionChange, onChange]);\n  return null;\n}\n\nexports.OnChangePlugin = OnChangePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,uCAAuC,CAAC;AAC7E,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,WAAW,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,QAAQ,KAAK,WAAW,IAAI,OAAOD,MAAM,CAACC,QAAQ,CAACC,aAAa,KAAK,WAAW;;AAEnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGJ,WAAW,GAAGD,KAAK,CAACM,eAAe,GAAGN,KAAK,CAACO,SAAS;AACjF,IAAID,eAAe,GAAGD,mBAAmB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,cAAcA,CAAAC,IAAA,EAIpB;EAAA,IAJqB;IACtBC,2BAA2B,GAAG,IAAI;IAClCC,qBAAqB,GAAG,KAAK;IAC7BC;EACF,CAAC,GAAAH,IAAA;EACC,MAAM,CAACI,MAAM,CAAC,GAAGf,sBAAsB,CAACgB,yBAAyB,EAAE;EACnER,eAAe,CAAC,MAAM;IACpB,IAAIM,QAAQ,EAAE;MACZ,OAAOC,MAAM,CAACE,sBAAsB,CAACC,KAAA,IAM/B;QAAA,IANgC;UACpCC,WAAW;UACXC,aAAa;UACbC,WAAW;UACXC,eAAe;UACfC;QACF,CAAC,GAAAL,KAAA;QACC,IAAIL,qBAAqB,IAAIO,aAAa,CAACI,IAAI,KAAK,CAAC,IAAIH,WAAW,CAACG,IAAI,KAAK,CAAC,IAAIZ,2BAA2B,IAAIW,IAAI,CAACE,GAAG,CAAC,eAAe,CAAC,IAAIH,eAAe,CAACI,OAAO,EAAE,EAAE;UACxK;QACF;QAEAZ,QAAQ,CAACK,WAAW,EAAEJ,MAAM,EAAEQ,IAAI,CAAC;MACrC,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACR,MAAM,EAAEH,2BAA2B,EAAEC,qBAAqB,EAAEC,QAAQ,CAAC,CAAC;EAC1E,OAAO,IAAI;AACb;AAEAa,OAAO,CAACjB,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}